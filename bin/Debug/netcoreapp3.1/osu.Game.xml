<?xml version="1.0"?>
<doc>
    <assembly>
        <name>osu.Game</name>
    </assembly>
    <members>
        <member name="T:osu.Game.Audio.HitSampleInfo">
            <summary>
            Describes a gameplay hit sample.
            </summary>
        </member>
        <member name="F:osu.Game.Audio.HitSampleInfo.Bank">
            <summary>
            The bank to load the sample from.
            </summary>
        </member>
        <member name="F:osu.Game.Audio.HitSampleInfo.Name">
            <summary>
            The name of the sample to load.
            </summary>
        </member>
        <member name="F:osu.Game.Audio.HitSampleInfo.Suffix">
            <summary>
            An optional suffix to provide priority lookup. Falls back to non-suffixed <see cref="F:osu.Game.Audio.HitSampleInfo.Name"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Audio.HitSampleInfo.Volume">
            <summary>
            The sample volume.
            </summary>
        </member>
        <member name="P:osu.Game.Audio.HitSampleInfo.LookupNames">
            <summary>
            Retrieve all possible filenames that can be used as a source, returned in order of preference (highest first).
            </summary>
        </member>
        <member name="T:osu.Game.Audio.IPreviewTrackOwner">
            <summary>
            Interface for objects that can own <see cref="T:osu.Game.Audio.PreviewTrack"/>s.
            </summary>
            <remarks>
            <see cref="T:osu.Game.Audio.IPreviewTrackOwner"/>s can cancel the currently playing <see cref="T:osu.Game.Audio.PreviewTrack"/> through the
            global <see cref="T:osu.Game.Audio.PreviewTrackManager"/> if they're the owner of the playing <see cref="T:osu.Game.Audio.PreviewTrack"/>.
            </remarks>
        </member>
        <member name="P:osu.Game.Audio.ISampleInfo.LookupNames">
            <summary>
            Retrieve all possible filenames that can be used as a source, returned in order of preference (highest first).
            </summary>
        </member>
        <member name="E:osu.Game.Audio.PreviewTrack.Stopped">
            <summary>
            Invoked when this <see cref="T:osu.Game.Audio.PreviewTrack"/> has stopped playing.
            Not invoked in a thread-safe context.
            </summary>
        </member>
        <member name="E:osu.Game.Audio.PreviewTrack.Started">
            <summary>
            Invoked when this <see cref="T:osu.Game.Audio.PreviewTrack"/> has started playing.
            Not invoked in a thread-safe context.
            </summary>
        </member>
        <member name="P:osu.Game.Audio.PreviewTrack.Length">
            <summary>
            Length of the track.
            </summary>
        </member>
        <member name="P:osu.Game.Audio.PreviewTrack.CurrentTime">
            <summary>
            The current track time.
            </summary>
        </member>
        <member name="P:osu.Game.Audio.PreviewTrack.TrackLoaded">
            <summary>
            Whether the track is loaded.
            </summary>
        </member>
        <member name="P:osu.Game.Audio.PreviewTrack.IsRunning">
            <summary>
            Whether the track is playing.
            </summary>
        </member>
        <member name="M:osu.Game.Audio.PreviewTrack.Start">
            <summary>
            Starts playing this <see cref="T:osu.Game.Audio.PreviewTrack"/>.
            </summary>
            <returns>Whether the track is started or already playing.</returns>
        </member>
        <member name="M:osu.Game.Audio.PreviewTrack.Stop">
            <summary>
            Stops playing this <see cref="T:osu.Game.Audio.PreviewTrack"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Audio.PreviewTrack.GetTrack">
            <summary>
            Retrieves the audio track.
            </summary>
        </member>
        <member name="M:osu.Game.Audio.PreviewTrackManager.Get(osu.Game.Beatmaps.BeatmapSetInfo)">
            <summary>
            Retrieves a <see cref="T:osu.Game.Audio.PreviewTrack"/> for a <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>.
            </summary>
            <param name="beatmapSetInfo">The <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/> to retrieve the preview track for.</param>
            <returns>The playable <see cref="T:osu.Game.Audio.PreviewTrack"/>.</returns>
        </member>
        <member name="M:osu.Game.Audio.PreviewTrackManager.StopAnyPlaying(osu.Game.Audio.IPreviewTrackOwner)">
            <summary>
            Stops any currently playing <see cref="T:osu.Game.Audio.PreviewTrack"/>.
            </summary>
            <remarks>
            Only the immediate owner (an object that implements <see cref="T:osu.Game.Audio.IPreviewTrackOwner"/>) of the playing <see cref="T:osu.Game.Audio.PreviewTrack"/>
            can globally stop the currently playing <see cref="T:osu.Game.Audio.PreviewTrack"/>. The object holding a reference to the <see cref="T:osu.Game.Audio.PreviewTrack"/>
            can always stop the <see cref="T:osu.Game.Audio.PreviewTrack"/> themselves through <see cref="M:osu.Game.Audio.PreviewTrack.Stop"/>.
            </remarks>
            <param name="source">The <see cref="T:osu.Game.Audio.IPreviewTrackOwner"/> which may be the owner of the <see cref="T:osu.Game.Audio.PreviewTrack"/>.</param>
        </member>
        <member name="M:osu.Game.Audio.PreviewTrackManager.CreatePreviewTrack(osu.Game.Beatmaps.BeatmapSetInfo,osu.Framework.Audio.Track.ITrackStore)">
            <summary>
            Creates the <see cref="T:osu.Game.Audio.PreviewTrackManager.TrackManagerPreviewTrack"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Audio.SampleInfo">
            <summary>
            Describes a gameplay sample.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.Beatmap`1">
            <summary>
            A Beatmap containing converted HitObjects.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapConverter`1">
            <summary>
            Converts a Beatmap for another mode.
            </summary>
            <typeparam name="T">The type of HitObject stored in the Beatmap.</typeparam>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapConverter`1.CanConvert">
            <summary>
            Whether <see cref="P:osu.Game.Beatmaps.BeatmapConverter`1.Beatmap"/> can be converted by this <see cref="T:osu.Game.Beatmaps.BeatmapConverter`1"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapConverter`1.Convert">
            <summary>
            Converts <see cref="P:osu.Game.Beatmaps.BeatmapConverter`1.Beatmap"/>.
            </summary>
            <returns>The converted Beatmap.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapConverter`1.ConvertBeatmap(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Performs the conversion of a Beatmap using this Beatmap Converter.
            </summary>
            <param name="original">The un-converted Beatmap.</param>
            <returns>The converted Beatmap.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapConverter`1.CreateBeatmap">
            <summary>
            Creates the <see cref="T:osu.Game.Beatmaps.Beatmap`1"/> that will be returned by this <see cref="T:osu.Game.Beatmaps.BeatmapProcessor"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapConverter`1.ConvertHitObject(osu.Game.Rulesets.Objects.HitObject,osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Performs the conversion of a hit object.
            This method is generally executed sequentially for all objects in a beatmap.
            </summary>
            <param name="original">The hit object to convert.</param>
            <param name="beatmap">The un-converted Beatmap.</param>
            <returns>The converted hit object.</returns>
        </member>
        <member name="F:osu.Game.Beatmaps.BeatmapDifficulty.DEFAULT_DIFFICULTY">
            <summary>
            The default value used for all difficulty settings except <see cref="P:osu.Game.Beatmaps.BeatmapDifficulty.SliderMultiplier"/> and <see cref="P:osu.Game.Beatmaps.BeatmapDifficulty.SliderTickRate"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapDifficulty.Clone">
            <summary>
            Returns a shallow-clone of this <see cref="T:osu.Game.Beatmaps.BeatmapDifficulty"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapDifficulty.DifficultyRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Maps a difficulty value [0, 10] to a two-piece linear range of values.
            </summary>
            <param name="difficulty">The difficulty value to be mapped.</param>
            <param name="min">Minimum of the resulting range which will be achieved by a difficulty value of 0.</param>
            <param name="mid">Midpoint of the resulting range which will be achieved by a difficulty value of 5.</param>
            <param name="max">Maximum of the resulting range which will be achieved by a difficulty value of 10.</param>
            <returns>Value to which the difficulty value maps in the specified range.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapDifficulty.DifficultyRange(System.Double,System.ValueTuple{System.Double,System.Double,System.Double})">
            <summary>
            Maps a difficulty value [0, 10] to a two-piece linear range of values.
            </summary>
            <param name="difficulty">The difficulty value to be mapped.</param>
            <param name="range">The values that define the two linear ranges.
            <list type="table">
              <item>
                <term>od0</term>
                <description>Minimum of the resulting range which will be achieved by a difficulty value of 0.</description>
              </item>
              <item>
                <term>od5</term>
                <description>Midpoint of the resulting range which will be achieved by a difficulty value of 5.</description>
              </item>
              <item>
                <term>od10</term>
                <description>Maximum of the resulting range which will be achieved by a difficulty value of 10.</description>
              </item>
            </list>
            </param>
            <returns>Value to which the difficulty value maps in the specified range.</returns>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapInfo.Length">
            <summary>
            The playable length in milliseconds of this beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapInfo.BPM">
            <summary>
            The most common BPM of this beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapInfo.MD5Hash">
            <summary>
            MD5 is kept for legacy support (matching against replays, osu-web-10 etc.).
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapInfo.Scores">
            <summary>
            Currently only populated for beatmap deletion. Use <see cref="T:osu.Game.Scoring.ScoreManager"/> to query scores.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapInfo.Clone">
            <summary>
            Returns a shallow-clone of this <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapManager">
            <summary>
            Handles the storage and retrieval of Beatmaps/WorkingBeatmaps.
            </summary>
        </member>
        <member name="E:osu.Game.Beatmaps.BeatmapManager.BeatmapHidden">
            <summary>
            Fired when a single difficulty has been hidden.
            </summary>
        </member>
        <member name="E:osu.Game.Beatmaps.BeatmapManager.BeatmapRestored">
            <summary>
            Fired when a single difficulty has been restored.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.BeatmapManager.DefaultBeatmap">
            <summary>
            A default representation of a WorkingBeatmap to use when no beatmap is available.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.Hide(osu.Game.Beatmaps.BeatmapInfo)">
            <summary>
            Delete a beatmap difficulty.
            </summary>
            <param name="beatmap">The beatmap difficulty to hide.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.Restore(osu.Game.Beatmaps.BeatmapInfo)">
            <summary>
            Restore a beatmap difficulty.
            </summary>
            <param name="beatmap">The beatmap difficulty to restore.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.Save(osu.Game.Beatmaps.BeatmapInfo,osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Saves an <see cref="T:osu.Game.Beatmaps.IBeatmap"/> file against a given <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>.
            </summary>
            <param name="info">The <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/> to save the content against. The file referenced by <see cref="P:osu.Game.Beatmaps.BeatmapInfo.Path"/> will be replaced.</param>
            <param name="beatmapContent">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> content to write.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.Export(osu.Game.Beatmaps.BeatmapSetInfo)">
            <summary>
            Exports a <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/> to an .osz package.
            </summary>
            <param name="set">The <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/> to export.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.GetWorkingBeatmap(osu.Game.Beatmaps.BeatmapInfo,osu.Game.Beatmaps.WorkingBeatmap)">
            <summary>
            Retrieve a <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> instance for the provided <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>
            </summary>
            <param name="beatmapInfo">The beatmap to lookup.</param>
            <param name="previous">The currently loaded <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>. Allows for optimisation where elements are shared with the new beatmap. May be returned if beatmapInfo requested matches</param>
            <returns>A <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> instance correlating to the provided <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.QueryBeatmapSet(System.Linq.Expressions.Expression{System.Func{osu.Game.Beatmaps.BeatmapSetInfo,System.Boolean}})">
            <summary>
            Perform a lookup query on available <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>s.
            </summary>
            <param name="query">The query.</param>
            <returns>The first result for the provided query, or null if no results were found.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.GetAllUsableBeatmapSets(osu.Game.Beatmaps.IncludedDetails)">
            <summary>
            Returns a list of all usable <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>s.
            </summary>
            <returns>A list of available <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.GetAllUsableBeatmapSetsEnumerable(osu.Game.Beatmaps.IncludedDetails)">
            <summary>
            Returns a list of all usable <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>s. Note that files are not populated.
            </summary>
            <param name="includes">The level of detail to include in the returned objects.</param>
            <returns>A list of available <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.QueryBeatmapSets(System.Linq.Expressions.Expression{System.Func{osu.Game.Beatmaps.BeatmapSetInfo,System.Boolean}})">
            <summary>
            Perform a lookup query on available <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/>s.
            </summary>
            <param name="query">The query.</param>
            <returns>Results from the provided query.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.QueryBeatmap(System.Linq.Expressions.Expression{System.Func{osu.Game.Beatmaps.BeatmapInfo,System.Boolean}})">
            <summary>
            Perform a lookup query on available <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>s.
            </summary>
            <param name="query">The query.</param>
            <returns>The first result for the provided query, or null if no results were found.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.QueryBeatmaps(System.Linq.Expressions.Expression{System.Func{osu.Game.Beatmaps.BeatmapInfo,System.Boolean}})">
            <summary>
            Perform a lookup query on available <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>s.
            </summary>
            <param name="query">The query.</param>
            <returns>Results from the provided query.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapManager.createBeatmapDifficulties(System.Collections.Generic.List{osu.Game.Beatmaps.BeatmapSetFileInfo})">
            <summary>
            Create all required <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>s for the provided archive.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapManager.DummyConversionBeatmap">
            <summary>
            A dummy WorkingBeatmap for the purpose of retrieving a beatmap for star difficulty calculation.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.IncludedDetails">
            <summary>
            The level of detail to include in database results.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.IncludedDetails.Minimal">
            <summary>
            Only include beatmap difficulties and set level metadata.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.IncludedDetails.AllButFiles">
            <summary>
            Include all difficulties, rulesets, difficulty metadata but no files.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.IncludedDetails.All">
            <summary>
            Include everything.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapMetadata.AuthorString">
            <summary>
            Helper property to deserialize a username to <see cref="T:osu.Game.Users.User"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.BeatmapMetadata.Author">
            <summary>
            The author of the beatmaps in this set.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapMetrics">
            <summary>
            Beatmap metrics based on accumulated online data from community plays.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapMetrics.Fails">
            <summary>
            Points of failure on a relative time scale (usually 0..100).
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapMetrics.Retries">
            <summary>
            Points of retry on a relative time scale (usually 0..100).
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapOnlineInfo">
            <summary>
            Beatmap info retrieved for previewing locally without having the beatmap downloaded.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapOnlineInfo.CircleCount">
            <summary>
            The amount of circles in this beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapOnlineInfo.SliderCount">
            <summary>
            The amount of sliders in this beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapOnlineInfo.PlayCount">
            <summary>
            The amount of plays this beatmap has.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapOnlineInfo.PassCount">
            <summary>
            The amount of passes this beatmap has.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapProcessor">
            <summary>
            Provides functionality to alter a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> after it has been converted.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetInfo.MaxStarDifficulty">
            <summary>
            The maximum star difficulty of all beatmaps in this set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetInfo.MaxLength">
            <summary>
            The maximum playable length in milliseconds of all beatmaps in this set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetInfo.MaxBPM">
            <summary>
            The maximum BPM of all beatmaps in this set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetMetrics.Ratings">
            <summary>
            Total vote counts of user ratings on a scale of 0..10 where 0 is unused (probably will be fixed at API?).
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapSetOnlineInfo">
            <summary>
            Beatmap set info retrieved for previewing locally without having the set downloaded.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Submitted">
            <summary>
            The date this beatmap set was submitted to the online listing.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Ranked">
            <summary>
            The date this beatmap set was ranked.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.LastUpdated">
            <summary>
            The date this beatmap set was last updated.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Status">
            <summary>
            The status of this beatmap set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.HasVideo">
            <summary>
            Whether or not this beatmap set has a background video.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.HasStoryboard">
            <summary>
            Whether or not this beatmap set has a storyboard.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Covers">
            <summary>
            The different sizes of cover art for this beatmap set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Preview">
            <summary>
            A small sample clip of this beatmap set's song.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.BPM">
            <summary>
            The beats per minute of this beatmap set's song.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.PlayCount">
            <summary>
            The amount of plays this beatmap set has.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.FavouriteCount">
            <summary>
            The amount of people who have favourited this beatmap set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.HasFavourited">
            <summary>
            Whether this beatmap set has been favourited by the current user.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Availability">
            <summary>
            The availability of this beatmap set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Genre">
            <summary>
            The song genre of this beatmap set.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.BeatmapSetOnlineInfo.Language">
            <summary>
            The song language of this beatmap set.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.BeatmapStore">
            <summary>
            Handles the storage and retrieval of Beatmaps/BeatmapSets to the database backing
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapStore.Hide(osu.Game.Beatmaps.BeatmapInfo)">
            <summary>
            Hide a <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/> in the database.
            </summary>
            <param name="beatmap">The beatmap to hide.</param>
            <returns>Whether the beatmap's <see cref="P:osu.Game.Beatmaps.BeatmapInfo.Hidden"/> was changed.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.BeatmapStore.Restore(osu.Game.Beatmaps.BeatmapInfo)">
            <summary>
            Restore a previously hidden <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>.
            </summary>
            <param name="beatmap">The beatmap to restore.</param>
            <returns>Whether the beatmap's <see cref="P:osu.Game.Beatmaps.BeatmapInfo.Hidden"/> was changed.</returns>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPoint.Time">
            <summary>
            The time at which the control point takes effect.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPoint.IsRedundant(osu.Game.Beatmaps.ControlPoints.ControlPoint)">
            <summary>
            Determines whether this <see cref="T:osu.Game.Beatmaps.ControlPoints.ControlPoint"/> results in a meaningful change when placed alongside another.
            </summary>
            <param name="existing">An existing control point to compare with.</param>
            <returns>Whether this <see cref="T:osu.Game.Beatmaps.ControlPoints.ControlPoint"/> is redundant when placed alongside <paramref name="existing"/>.</returns>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointGroup.Time">
            <summary>
            The time at which the control point takes effect.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.Groups">
            <summary>
            All control points grouped by time.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.TimingPoints">
            <summary>
            All timing points.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.DifficultyPoints">
            <summary>
            All difficulty points.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.SamplePoints">
            <summary>
            All sound points.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.EffectPoints">
            <summary>
            All effect points.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.AllControlPoints">
            <summary>
            All control points, of all types.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.DifficultyPointAt(System.Double)">
            <summary>
            Finds the difficulty control point that is active at <paramref name="time"/>.
            </summary>
            <param name="time">The time to find the difficulty control point at.</param>
            <returns>The difficulty control point.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.EffectPointAt(System.Double)">
            <summary>
            Finds the effect control point that is active at <paramref name="time"/>.
            </summary>
            <param name="time">The time to find the effect control point at.</param>
            <returns>The effect control point.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.SamplePointAt(System.Double)">
            <summary>
            Finds the sound control point that is active at <paramref name="time"/>.
            </summary>
            <param name="time">The time to find the sound control point at.</param>
            <returns>The sound control point.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.TimingPointAt(System.Double)">
            <summary>
            Finds the timing control point that is active at <paramref name="time"/>.
            </summary>
            <param name="time">The time to find the timing control point at.</param>
            <returns>The timing control point.</returns>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.BPMMaximum">
            <summary>
            Finds the maximum BPM represented by any timing control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.BPMMinimum">
            <summary>
            Finds the minimum BPM represented by any timing control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.BPMMode">
            <summary>
            Finds the mode BPM (most common BPM) represented by the control points.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.Clear">
            <summary>
            Remove all <see cref="T:osu.Game.Beatmaps.ControlPoints.ControlPointGroup"/>s and return to a pristine state.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.Add(System.Double,osu.Game.Beatmaps.ControlPoints.ControlPoint)">
            <summary>
            Add a new <see cref="T:osu.Game.Beatmaps.ControlPoints.ControlPoint"/>. Note that the provided control point may not be added if the correct state is already present at the provided time.
            </summary>
            <param name="time">The time at which the control point should be added.</param>
            <param name="controlPoint">The control point to add.</param>
            <returns>Whether the control point was added.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.binarySearchWithFallback``1(System.Collections.Generic.IReadOnlyList{``0},System.Double,``0)">
            <summary>
            Binary searches one of the control point lists to find the active control point at <paramref name="time"/>.
            Includes logic for returning a specific point when no matching point is found.
            </summary>
            <param name="list">The list to search.</param>
            <param name="time">The time to find the control point at.</param>
            <param name="prePoint">The control point to use when <paramref name="time"/> is before any control points. If null, a new control point will be constructed.</param>
            <returns>The active control point at <paramref name="time"/>, or a fallback <see cref="T:osu.Game.Beatmaps.ControlPoints.ControlPoint"/> if none found.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.binarySearch``1(System.Collections.Generic.IReadOnlyList{``0},System.Double)">
            <summary>
            Binary searches one of the control point lists to find the active control point at <paramref name="time"/>.
            </summary>
            <param name="list">The list to search.</param>
            <param name="time">The time to find the control point at.</param>
            <returns>The active control point at <paramref name="time"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.ControlPointInfo.checkAlreadyExisting(System.Double,osu.Game.Beatmaps.ControlPoints.ControlPoint)">
            <summary>
            Check whether <paramref name="newPoint"/> should be added.
            </summary>
            <param name="time">The time to find the timing control point at.</param>
            <param name="newPoint">A point to be added.</param>
            <returns>Whether the new point should be added.</returns>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.DifficultyControlPoint.SpeedMultiplierBindable">
            <summary>
            The speed multiplier at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.DifficultyControlPoint.SpeedMultiplier">
            <summary>
            The speed multiplier at this control point.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.EffectControlPoint.OmitFirstBarLineBindable">
            <summary>
            Whether the first bar line of this control point is ignored.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.EffectControlPoint.OmitFirstBarLine">
            <summary>
            Whether the first bar line of this control point is ignored.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.EffectControlPoint.KiaiModeBindable">
            <summary>
            Whether this control point enables Kiai mode.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.EffectControlPoint.KiaiMode">
            <summary>
            Whether this control point enables Kiai mode.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.SampleBankBindable">
            <summary>
            The default sample bank at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.SampleBank">
            <summary>
            The speed multiplier at this control point.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.SampleVolumeBindable">
            <summary>
            The default sample bank at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.SampleVolume">
            <summary>
            The default sample volume at this control point.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.GetSampleInfo(System.String)">
            <summary>
            Create a SampleInfo based on the sample settings in this control point.
            </summary>
            <param name="sampleName">The name of the same.</param>
            <returns>A populated <see cref="T:osu.Game.Audio.HitSampleInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.ApplyTo(osu.Game.Audio.HitSampleInfo)">
            <summary>
            Applies <see cref="P:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.SampleBank"/> and <see cref="P:osu.Game.Beatmaps.ControlPoints.SampleControlPoint.SampleVolume"/> to a <see cref="T:osu.Game.Audio.HitSampleInfo"/> if necessary, returning the modified <see cref="T:osu.Game.Audio.HitSampleInfo"/>.
            </summary>
            <param name="hitSampleInfo">The <see cref="T:osu.Game.Audio.HitSampleInfo"/>. This will not be modified.</param>
            <returns>The modified <see cref="T:osu.Game.Audio.HitSampleInfo"/>. This does not share a reference with <paramref name="hitSampleInfo"/>.</returns>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.TimingControlPoint.TimeSignatureBindable">
            <summary>
            The time signature at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.TimingControlPoint.TimeSignature">
            <summary>
            The time signature at this control point.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.ControlPoints.TimingControlPoint.BeatLengthBindable">
            <summary>
            The beat length at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.TimingControlPoint.BeatLength">
            <summary>
            The beat length at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.ControlPoints.TimingControlPoint.BPM">
            <summary>
            The BPM at this control point.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.Drawables.DifficultyIcon.Size">
            <summary>
            Size of this difficulty icon.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.Drawables.GroupedDifficultyIcon">
            <summary>
            A difficulty icon that contains a counter on the right-side of it.
            </summary>
            <remarks>
            Used in cases when there are too many difficulty icons to show.
            </remarks>
        </member>
        <member name="T:osu.Game.Beatmaps.Drawables.UpdateableBeatmapBackgroundSprite">
            <summary>
            Display a beatmap background from a local source, but fallback to online source if not available.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.Drawables.UpdateableBeatmapBackgroundSprite.UnloadDelay">
            <summary>
            Delay before the background is unloaded while off-screen.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.Formats.Decoder.GetDecoder``1(osu.Game.IO.LineBufferedReader)">
            <summary>
            Retrieves a <see cref="T:osu.Game.Beatmaps.Formats.Decoder"/> to parse a <see cref="T:osu.Game.Beatmaps.Beatmap"/>.
            </summary>
            <param name="stream">A stream pointing to the <see cref="T:osu.Game.Beatmaps.Beatmap"/>.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.Formats.Decoder.AddDecoder``1(System.String,System.Func{System.String,osu.Game.Beatmaps.Formats.Decoder})">
            <summary>
            Registers an instantiation function for a <see cref="T:osu.Game.Beatmaps.Formats.Decoder"/>.
            </summary>
            <param name="magic">A string in the file which triggers this decoder to be used.</param>
            <param name="constructor">A function which constructs the <see cref="T:osu.Game.Beatmaps.Formats.Decoder"/> given <paramref name="magic"/>.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.Formats.Decoder.SetFallbackDecoder``1(System.Func{osu.Game.Beatmaps.Formats.Decoder})">
            <summary>
            Registers a fallback decoder instantiation function.
            The fallback will be returned if the first non-empty line of the decoded stream does not match any known magic.
            Calling this method will overwrite any existing global fallback registration for type <typeparamref name="T"/> - use with caution.
            </summary>
            <typeparam name="T">Type of object being decoded.</typeparam>
            <param name="constructor">A function that constructs the fallback<see cref="T:osu.Game.Beatmaps.Formats.Decoder"/>.</param>
        </member>
        <member name="P:osu.Game.Beatmaps.Formats.IHasComboColours.ComboColours">
            <summary>
            Retrieves the list of combo colours for presentation only.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.Formats.IHasComboColours.AddComboColours(osuTK.Graphics.Color4[])">
            <summary>
            Adds combo colours to the list.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.Formats.LegacyBeatmapDecoder.ApplyOffsets">
            <summary>
            Whether or not beatmap or runtime offsets should be applied. Defaults on; only disable for testing purposes.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.Formats.LegacyDecoder`1.OnBeginNewSection(osu.Game.Beatmaps.Formats.LegacyDecoder{`0}.Section)">
            <summary>
            Invoked when a new <see cref="T:osu.Game.Beatmaps.Formats.LegacyDecoder`1.Section"/> has been entered.
            </summary>
            <param name="section">The entered <see cref="T:osu.Game.Beatmaps.Formats.LegacyDecoder`1.Section"/>.</param>
        </member>
        <member name="T:osu.Game.Beatmaps.Formats.LegacyDifficultyCalculatorBeatmapDecoder">
            <summary>
            A <see cref="T:osu.Game.Beatmaps.Formats.LegacyBeatmapDecoder"/> built for difficulty calculation of legacy <see cref="T:osu.Game.Beatmaps.Beatmap"/>s
            <remarks>
            To use this, the decoder must be registered by the application through <see cref="M:osu.Game.Beatmaps.Formats.LegacyDifficultyCalculatorBeatmapDecoder.Register"/>.
            Doing so will override any existing <see cref="T:osu.Game.Beatmaps.Beatmap"/> decoders.
            </remarks>
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.Formats.LegacyStoryboardDecoder.decodeVariables(System.String@)">
            <summary>
            Decodes any beatmap variables present in a line into their real values.
            </summary>
            <param name="line">The line which may contains variables.</param>
        </member>
        <member name="T:osu.Game.Beatmaps.Formats.Parsing">
            <summary>
            Helper methods to parse from string to number and perform very basic validation.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap.BeatmapInfo">
            <summary>
            This beatmap's info.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap.Metadata">
            <summary>
            This beatmap's metadata.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap.ControlPointInfo">
            <summary>
            The control points in this beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap.Breaks">
            <summary>
            The breaks in this beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap.TotalBreakTime">
            <summary>
            Total amount of break time in the beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap.HitObjects">
            <summary>
            The hitobjects contained by this beatmap.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.IBeatmap.GetStatistics">
            <summary>
            Returns statistics for the <see cref="P:osu.Game.Beatmaps.IBeatmap.HitObjects"/> contained in this beatmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:osu.Game.Beatmaps.IBeatmap.Clone">
            <summary>
            Creates a shallow-clone of this beatmap and returns it.
            </summary>
            <returns>The shallow-cloned beatmap.</returns>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmap`1.HitObjects">
            <summary>
            The hitobjects contained by this beatmap.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.IBeatmapConverter">
            <summary>
            Provides functionality to convert a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> for a <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
        </member>
        <member name="E:osu.Game.Beatmaps.IBeatmapConverter.ObjectConverted">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> has been converted.
            The first argument contains the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> that was converted.
            The second argument contains the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s that were output from the conversion process.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.IBeatmapConverter.CanConvert">
            <summary>
            Whether <see cref="P:osu.Game.Beatmaps.IBeatmapConverter.Beatmap"/> can be converted by this <see cref="T:osu.Game.Beatmaps.IBeatmapConverter"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.IBeatmapConverter.Convert">
            <summary>
            Converts <see cref="P:osu.Game.Beatmaps.IBeatmapConverter.Beatmap"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Beatmaps.IBeatmapProcessor">
            <summary>
            Provides functionality to alter a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> after it has been converted.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IBeatmapProcessor.Beatmap">
            <summary>
            The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to process. This should already be converted to the applicable <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.IBeatmapProcessor.PreProcess">
            <summary>
            Processes the converted <see cref="P:osu.Game.Beatmaps.IBeatmapProcessor.Beatmap"/> prior to <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/> being invoked.
            <para>
            Nested <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s generated during <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/> will not be present by this point,
            and no mods will have been applied to the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </para>
            </summary>
            <remarks>
            This can only be used to add alterations to <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s generated directly through the conversion process.
            </remarks>
        </member>
        <member name="M:osu.Game.Beatmaps.IBeatmapProcessor.PostProcess">
            <summary>
            Processes the converted <see cref="P:osu.Game.Beatmaps.IBeatmapProcessor.Beatmap"/> after <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/> has been invoked.
            <para>
            Nested <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s generated during <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/> will be present by this point,
            and mods will have been applied to all <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </para>
            </summary>
            <remarks>
            This should be used to add alterations to <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s while they are in their most playable state.
            </remarks>
        </member>
        <member name="P:osu.Game.Beatmaps.IWorkingBeatmap.Beatmap">
            <summary>
            Retrieves the <see cref="T:osu.Game.Beatmaps.IBeatmap"/> which this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> represents.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IWorkingBeatmap.Background">
            <summary>
            Retrieves the background for this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IWorkingBeatmap.Track">
            <summary>
            Retrieves the audio track for this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IWorkingBeatmap.Waveform">
            <summary>
            Retrieves the <see cref="P:osu.Game.Beatmaps.IWorkingBeatmap.Waveform"/> for the <see cref="P:osu.Game.Beatmaps.IWorkingBeatmap.Track"/> of this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IWorkingBeatmap.Storyboard">
            <summary>
            Retrieves the <see cref="P:osu.Game.Beatmaps.IWorkingBeatmap.Storyboard"/> which this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> provides.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.IWorkingBeatmap.Skin">
            <summary>
            Retrieves the <see cref="P:osu.Game.Beatmaps.IWorkingBeatmap.Skin"/> which this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> provides.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.IWorkingBeatmap.GetPlayableBeatmap(osu.Game.Rulesets.RulesetInfo,System.Collections.Generic.IReadOnlyList{osu.Game.Rulesets.Mods.Mod},System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a playable <see cref="T:osu.Game.Beatmaps.IBeatmap"/> from <see cref="P:osu.Game.Beatmaps.IWorkingBeatmap.Beatmap"/> using the applicable converters for a specific <see cref="T:osu.Game.Rulesets.RulesetInfo"/>.
            <para>
            The returned <see cref="T:osu.Game.Beatmaps.IBeatmap"/> is in a playable state - all <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> and <see cref="T:osu.Game.Beatmaps.BeatmapDifficulty"/> <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s
            have been applied, and <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s have been fully constructed.
            </para>
            </summary>
            <param name="ruleset">The <see cref="T:osu.Game.Rulesets.RulesetInfo"/> to create a playable <see cref="T:osu.Game.Beatmaps.IBeatmap"/> for.</param>
            <param name="mods">The <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s to apply to the <see cref="T:osu.Game.Beatmaps.IBeatmap"/>.</param>
            <param name="timeout">The maximum length in milliseconds to wait for load to complete. Defaults to 10,000ms.</param>
            <returns>The converted <see cref="T:osu.Game.Beatmaps.IBeatmap"/>.</returns>
            <exception cref="T:osu.Game.Rulesets.UI.BeatmapInvalidForRulesetException">If <see cref="P:osu.Game.Beatmaps.IWorkingBeatmap.Beatmap"/> could not be converted to <paramref name="ruleset"/>.</exception>
        </member>
        <member name="F:osu.Game.Beatmaps.Timing.BreakPeriod.MIN_BREAK_DURATION">
            <summary>
            The minimum duration required for a break to have any effect.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.Timing.BreakPeriod.StartTime">
            <summary>
            The break start time.
            </summary>
        </member>
        <member name="F:osu.Game.Beatmaps.Timing.BreakPeriod.EndTime">
            <summary>
            The break end time.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.Timing.BreakPeriod.Duration">
            <summary>
            The break duration.
            </summary>
        </member>
        <member name="P:osu.Game.Beatmaps.Timing.BreakPeriod.HasEffect">
            <summary>
            Whether the break has any effect. Breaks that are too short are culled before they are added to the beatmap.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.Timing.BreakPeriod.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new break period.
            </summary>
            <param name="startTime">The start time of the break period.</param>
            <param name="endTime">The end time of the break period.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.Timing.BreakPeriod.Contains(System.Double)">
            <summary>
            Whether this break contains a specified time.
            </summary>
            <param name="time">The time to check in milliseconds.</param>
            <returns>Whether the time falls within this <see cref="T:osu.Game.Beatmaps.Timing.BreakPeriod"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.WorkingBeatmap.CreateBeatmapConverter(osu.Game.Beatmaps.IBeatmap,osu.Game.Rulesets.Ruleset)">
            <summary>
            Creates a <see cref="T:osu.Game.Beatmaps.IBeatmapConverter"/> to convert a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> for a specified <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to be converted.</param>
            <param name="ruleset">The <see cref="T:osu.Game.Rulesets.Ruleset"/> for which <paramref name="beatmap"/> should be converted.</param>
            <returns>The applicable <see cref="T:osu.Game.Beatmaps.IBeatmapConverter"/>.</returns>
        </member>
        <member name="M:osu.Game.Beatmaps.WorkingBeatmap.BeginAsyncLoad">
            <summary>
            Beings loading the contents of this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> asynchronously.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.WorkingBeatmap.CancelAsyncLoad">
            <summary>
            Cancels the asynchronous loading of the contents of this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Beatmaps.WorkingBeatmap.TransferTo(osu.Game.Beatmaps.WorkingBeatmap)">
            <summary>
            Transfer pieces of a beatmap to a new one, where possible, to save on loading.
            </summary>
            <param name="other">The new beatmap which is being switched to.</param>
        </member>
        <member name="M:osu.Game.Beatmaps.WorkingBeatmap.RecycleTrack">
            <summary>
            Eagerly dispose of the audio track associated with this <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> (if any).
            Accessing track again will load a fresh instance.
            </summary>
        </member>
        <member name="M:osu.Game.Configuration.DatabasedSetting.#ctor">
            <summary>
            Constructor for derived classes that may require serialisation.
            </summary>
        </member>
        <member name="T:osu.Game.Configuration.SessionStatics">
            <summary>
            Stores global per-session statics. These will not be stored after exiting the game.
            </summary>
        </member>
        <member name="T:osu.Game.Configuration.SettingSourceAttribute">
            <summary>
            An attribute to mark a bindable as being exposed to the user via settings controls.
            Can be used in conjunction with <see cref="M:osu.Game.Configuration.SettingSourceExtensions.CreateSettingsControls(System.Object)"/> to automatically create UI controls.
            </summary>
            <remarks>
            All controls with <see cref="P:osu.Game.Configuration.SettingSourceAttribute.OrderPosition"/> set will be placed first in ascending order.
            All controls with no <see cref="P:osu.Game.Configuration.SettingSourceAttribute.OrderPosition"/> will come afterward in default order.
            </remarks>
        </member>
        <member name="M:osu.Game.Configuration.SettingsStore.Query(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieve <see cref="T:osu.Game.Configuration.DatabasedSetting"/>s for a specified ruleset/variant content.
            </summary>
            <param name="rulesetId">The ruleset's internal ID.</param>
            <param name="variant">An optional variant.</param>
            <returns></returns>
        </member>
        <member name="T:osu.Game.Database.ArchiveModelManager`2">
            <summary>
            Encapsulates a model store class to give it import functionality.
            Adds cross-functionality with <see cref="T:osu.Game.IO.FileStore"/> to give access to the central file store for the provided model.
            </summary>
            <typeparam name="TModel">The model type.</typeparam>
            <typeparam name="TFileModel">The associated file join type.</typeparam>
        </member>
        <member name="F:osu.Game.Database.ArchiveModelManager`2.import_scheduler">
            <summary>
            A singleton scheduler shared by all <see cref="T:osu.Game.Database.ArchiveModelManager`2"/>.
            </summary>
            <remarks>
            This scheduler generally performs IO and CPU intensive work so concurrency is limited harshly.
            It is mainly being used as a queue mechanism for large imports.
            </remarks>
        </member>
        <member name="P:osu.Game.Database.ArchiveModelManager`2.PostNotification">
            <summary>
            Set an endpoint for notifications to be posted to.
            </summary>
        </member>
        <member name="E:osu.Game.Database.ArchiveModelManager`2.ItemAdded">
            <summary>
            Fired when a new <typeparamref name="TModel"/> becomes available in the database.
            This is not guaranteed to run on the update thread.
            </summary>
        </member>
        <member name="E:osu.Game.Database.ArchiveModelManager`2.ItemRemoved">
            <summary>
            Fired when a <typeparamref name="TModel"/> is removed from the database.
            This is not guaranteed to run on the update thread.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Import(System.String[])">
            <summary>
            Import one or more <typeparamref name="TModel"/> items from filesystem <paramref name="paths"/>.
            This will post notifications tracking progress.
            </summary>
            <param name="paths">One or more archive locations on disk.</param>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Import(System.String,System.Threading.CancellationToken)">
            <summary>
            Import one <typeparamref name="TModel"/> from the filesystem and delete the file on success.
            </summary>
            <param name="path">The archive location on disk.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The imported model, if successful.</returns>
        </member>
        <member name="F:osu.Game.Database.ArchiveModelManager`2.PresentImport">
            <summary>
            Fired when the user requests to view the resulting import.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Import(osu.Game.IO.Archives.ArchiveReader,System.Threading.CancellationToken)">
            <summary>
            Import an item from an <see cref="T:osu.Game.IO.Archives.ArchiveReader"/>.
            </summary>
            <param name="archive">The archive to be imported.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
        </member>
        <member name="P:osu.Game.Database.ArchiveModelManager`2.HashableFileTypes">
            <summary>
            Any file extensions which should be included in hash creation.
            Generally should include all file types which determine the file's uniqueness.
            Large files should be avoided if possible.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.computeHash(`0,osu.Game.IO.Archives.ArchiveReader)">
            <summary>
            Create a SHA-2 hash from the provided archive based on file content of all files matching <see cref="P:osu.Game.Database.ArchiveModelManager`2.HashableFileTypes"/>.
            </summary>
            <remarks>
             In the case of no matching files, a hash will be generated from the passed archive's <see cref="F:osu.Game.IO.Archives.ArchiveReader.Name"/>.
            </remarks>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Import(`0,osu.Game.IO.Archives.ArchiveReader,System.Threading.CancellationToken)">
            <summary>
            Import an item from a <typeparamref name="TModel"/>.
            </summary>
            <param name="item">The model to be imported.</param>
            <param name="archive">An optional archive to use for model population.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Update(`0)">
            <summary>
            Perform an update of the specified item.
            TODO: Support file additions/removals.
            </summary>
            <param name="item">The item to update.</param>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Delete(`0)">
            <summary>
            Delete an item from the manager.
            Is a no-op for already deleted items.
            </summary>
            <param name="item">The item to delete.</param>
            <returns>false if no operation was performed</returns>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Delete(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Delete multiple items.
            This will post notifications tracking progress.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Undelete(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Restore multiple items that were previously deleted.
            This will post notifications tracking progress.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Undelete(`0)">
            <summary>
            Restore an item that was previously deleted. Is a no-op if the item is not in a deleted state, or has its protected flag set.
            </summary>
            <param name="item">The item to restore</param>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.createFileInfos(osu.Game.IO.Archives.ArchiveReader,osu.Game.IO.FileStore)">
            <summary>
            Create all required <see cref="T:osu.Game.IO.FileInfo"/>s for the provided archive, adding them to the global file store.
            </summary>
        </member>
        <member name="P:osu.Game.Database.ArchiveModelManager`2.GetStableStorage">
            <summary>
            Set a storage with access to an osu-stable install for import purposes.
            </summary>
        </member>
        <member name="P:osu.Game.Database.ArchiveModelManager`2.StableInstallationAvailable">
            <summary>
            Denotes whether an osu-stable installation is present to perform automated imports from.
            </summary>
        </member>
        <member name="P:osu.Game.Database.ArchiveModelManager`2.ImportFromStablePath">
            <summary>
            The relative path from osu-stable's data directory to import items from.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.GetStableImportPaths(osu.Framework.Platform.Storage)">
            <summary>
            Select paths to import from stable. Default implementation iterates all directories in <see cref="P:osu.Game.Database.ArchiveModelManager`2.ImportFromStablePath"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.ShouldDeleteArchive(System.String)">
            <summary>
            Whether this specified path should be removed after successful import.
            </summary>
            <param name="path">The path for consideration. May be a file or a directory.</param>
            <returns>Whether to perform deletion.</returns>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.ImportFromStableAsync">
            <summary>
            This is a temporary method and will likely be replaced by a full-fledged (and more correctly placed) migration process in the future.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.CreateModel(osu.Game.IO.Archives.ArchiveReader)">
            <summary>
            Create a barebones model from the provided archive.
            Actual expensive population should be done in <see cref="M:osu.Game.Database.ArchiveModelManager`2.Populate(`0,osu.Game.IO.Archives.ArchiveReader,System.Threading.CancellationToken)"/>; this should just prepare for duplicate checking.
            </summary>
            <param name="archive">The archive to create the model for.</param>
            <returns>A model populated with minimal information. Returning a null will abort importing silently.</returns>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.Populate(`0,osu.Game.IO.Archives.ArchiveReader,System.Threading.CancellationToken)">
            <summary>
            Populate the provided model completely from the given archive.
            After this method, the model should be in a state ready to commit to a store.
            </summary>
            <param name="model">The model to populate.</param>
            <param name="archive">The archive to use as a reference for population. May be null.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.PreImport(`0)">
            <summary>
            Perform any final actions before the import to database executes.
            </summary>
            <param name="model">The model prepared for import.</param>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.CheckForExisting(`0)">
            <summary>
            Check whether an existing model already exists for a new import item.
            </summary>
            <param name="model">The new model proposed for import.</param>
            <returns>An existing model which matches the criteria to skip importing, else null.</returns>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.CanUndelete(`0,`0)">
            <summary>
            After an existing <typeparamref name="TModel"/> is found during an import process, the default behaviour is to restore the existing
            item and skip the import. This method allows changing that behaviour.
            </summary>
            <param name="existing">The existing model.</param>
            <param name="import">The newly imported model.</param>
            <returns>Whether the existing model should be restored and used. Returning false will delete the existing and force a re-import.</returns>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.getReaderFrom(System.String)">
            <summary>
            Creates an <see cref="T:osu.Game.IO.Archives.ArchiveReader"/> from a valid storage path.
            </summary>
            <param name="path">A file or folder path resolving the archive content.</param>
            <returns>A reader giving access to the archive's content.</returns>
        </member>
        <member name="F:osu.Game.Database.ArchiveModelManager`2.delayingEvents">
            <summary>
            Allows delaying of outwards events until an operation is confirmed (at a database level).
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.delayEvents">
            <summary>
            Begin delaying outwards events.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ArchiveModelManager`2.flushEvents(System.Boolean)">
            <summary>
            Flush delayed events and disable delaying.
            </summary>
            <param name="perform">Whether the flushed events should be performed.</param>
        </member>
        <member name="M:osu.Game.Database.DatabaseBackedStore.Refresh``1(``0@,System.Linq.IQueryable{``0})">
            <summary>
            Refresh an instance potentially from a different thread with a local context-tracked instance.
            </summary>
            <param name="obj">The object to use as a reference when negotiating a local instance.</param>
            <param name="lookupSource">An optional lookup source which will be used to query and populate a freshly retrieved replacement. If not provided, the refreshed object will still be returned but will not have any includes.</param>
            <typeparam name="T">A valid EF-stored type.</typeparam>
        </member>
        <member name="M:osu.Game.Database.DatabaseBackedStore.Cleanup">
            <summary>
            Perform any common clean-up tasks. Should be run when idle, or whenever necessary.
            </summary>
        </member>
        <member name="M:osu.Game.Database.DatabaseContextFactory.Get">
            <summary>
            Get a context for the current thread for read-only usage.
            If a <see cref="T:osu.Game.Database.DatabaseWriteUsage"/> is in progress, the existing write-safe context will be returned.
            </summary>
        </member>
        <member name="M:osu.Game.Database.DatabaseContextFactory.GetForWrite(System.Boolean)">
            <summary>
            Request a context for write usage. Can be consumed in a nested fashion (and will return the same underlying context).
            This method may block if a write is already active on a different thread.
            </summary>
            <param name="withTransaction">Whether to start a transaction for this write.</param>
            <returns>A usage containing a usable context.</returns>
        </member>
        <member name="F:osu.Game.Database.DatabaseWriteUsage.IsTransactionLeader">
            <summary>
            Whether this write usage will commit a transaction on completion.
            If false, there is a parent usage responsible for transaction commit.
            </summary>
        </member>
        <member name="T:osu.Game.Database.DownloadableArchiveModelManager`2">
            <summary>
            An <see cref="T:osu.Game.Database.ArchiveModelManager`2"/> that has the ability to download models using an <see cref="T:osu.Game.Online.API.IAPIProvider"/> and
            import them into the store.
            </summary>
            <typeparam name="TModel">The model type.</typeparam>
            <typeparam name="TFileModel">The associated file join type.</typeparam>
        </member>
        <member name="M:osu.Game.Database.DownloadableArchiveModelManager`2.CreateDownloadRequest(`0,System.Boolean)">
            <summary>
            Creates the download request for this <typeparamref name="TModel"/>.
            </summary>
            <param name="model">The <typeparamref name="TModel"/> to be downloaded.</param>
            <param name="minimiseDownloadSize">Whether this download should be optimised for slow connections. Generally means extras are not included in the download bundle.</param>
            <returns>The request object.</returns>
        </member>
        <member name="M:osu.Game.Database.DownloadableArchiveModelManager`2.Download(`0,System.Boolean)">
            <summary>
            Begin a download for the requested <typeparamref name="TModel"/>.
            </summary>
            <param name="model">The <typeparamref name="TModel"/> to be downloaded.</param>
            <param name="minimiseDownloadSize">Whether this download should be optimised for slow connections. Generally means extras are not included in the download bundle.</param>
            <returns>Whether the download was started.</returns>
        </member>
        <member name="M:osu.Game.Database.DownloadableArchiveModelManager`2.CheckLocalAvailability(`0,System.Linq.IQueryable{`0})">
            <summary>
            Performs implementation specific comparisons to determine whether a given model is present in the local store.
            </summary>
            <param name="model">The <typeparamref name="TModel"/> whose existence needs to be checked.</param>
            <param name="items">The usable items present in the store.</param>
            <returns>Whether the <typeparamref name="TModel"/> exists.</returns>
        </member>
        <member name="T:osu.Game.Database.ICanAcceptFiles">
            <summary>
            A class which can accept files for importing.
            </summary>
        </member>
        <member name="M:osu.Game.Database.ICanAcceptFiles.Import(System.String[])">
            <summary>
            Import the specified paths.
            </summary>
            <param name="paths">The files which should be imported.</param>
        </member>
        <member name="P:osu.Game.Database.ICanAcceptFiles.HandledExtensions">
            <summary>
            An array of accepted file extensions (in the standard format of ".abc").
            </summary>
        </member>
        <member name="M:osu.Game.Database.IDatabaseContextFactory.Get">
            <summary>
            Get a context for read-only usage.
            </summary>
        </member>
        <member name="M:osu.Game.Database.IDatabaseContextFactory.GetForWrite(System.Boolean)">
            <summary>
            Request a context for write usage. Can be consumed in a nested fashion (and will return the same underlying context).
            This method may block if a write is already active on a different thread.
            </summary>
            <param name="withTransaction">Whether to start a transaction for this write.</param>
            <returns>A usage containing a usable context.</returns>
        </member>
        <member name="T:osu.Game.Database.IHasFiles`1">
            <summary>
            A model that contains a list of files it is responsible for.
            </summary>
            <typeparam name="TFile">The model representing a file.</typeparam>
        </member>
        <member name="T:osu.Game.Database.IModelDownloader`1">
            <summary>
            Represents a <see cref="T:osu.Game.Database.IModelManager`1"/> that can download new models from an external source.
            </summary>
            <typeparam name="TModel">The model type.</typeparam>
        </member>
        <member name="E:osu.Game.Database.IModelDownloader`1.DownloadBegan">
            <summary>
            Fired when a <typeparamref name="TModel"/> download begins.
            This is NOT run on the update thread and should be scheduled.
            </summary>
        </member>
        <member name="E:osu.Game.Database.IModelDownloader`1.DownloadFailed">
            <summary>
            Fired when a <typeparamref name="TModel"/> download is interrupted, either due to user cancellation or failure.
            This is NOT run on the update thread and should be scheduled.
            </summary>
        </member>
        <member name="M:osu.Game.Database.IModelDownloader`1.IsAvailableLocally(`0)">
            <summary>
            Checks whether a given <typeparamref name="TModel"/> is already available in the local store.
            </summary>
            <param name="model">The <typeparamref name="TModel"/> whose existence needs to be checked.</param>
            <returns>Whether the <typeparamref name="TModel"/> exists.</returns>
        </member>
        <member name="M:osu.Game.Database.IModelDownloader`1.Download(`0,System.Boolean)">
            <summary>
            Begin a download for the requested <typeparamref name="TModel"/>.
            </summary>
            <param name="model">The <stypeparamref name="TModel"/> to be downloaded.</param>
            <param name="minimiseDownloadSize">Whether this download should be optimised for slow connections. Generally means extras are not included in the download bundle..</param>
            <returns>Whether the download was started.</returns>
        </member>
        <member name="M:osu.Game.Database.IModelDownloader`1.GetExistingDownload(`0)">
            <summary>
            Gets an existing <typeparamref name="TModel"/> download request if it exists.
            </summary>
            <param name="model">The <typeparamref name="TModel"/> whose request is wanted.</param>
            <returns>The <see cref="T:osu.Game.Online.API.ArchiveDownloadRequest`1"/> object if it exists, otherwise null.</returns>
        </member>
        <member name="T:osu.Game.Database.IModelManager`1">
            <summary>
            Represents a model manager that publishes events when <typeparamref name="TModel"/>s are added or removed.
            </summary>
            <typeparam name="TModel">The model type.</typeparam>
        </member>
        <member name="T:osu.Game.Database.INamedFileInfo">
            <summary>
            Represent a join model which gives a filename and scope to a <see cref="P:osu.Game.Database.INamedFileInfo.FileInfo"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Database.ISoftDelete">
            <summary>
            A model that can be deleted from user's view without being instantly lost.
            </summary>
        </member>
        <member name="P:osu.Game.Database.ISoftDelete.DeletePending">
            <summary>
            Whether this model is marked for future deletion.
            </summary>
        </member>
        <member name="T:osu.Game.Database.MutableDatabaseBackedStore`1">
            <summary>
            A typed store which supports basic addition, deletion and updating for soft-deletable models.
            </summary>
            <typeparam name="T">The databased model.</typeparam>
        </member>
        <member name="P:osu.Game.Database.MutableDatabaseBackedStore`1.ConsumableItems">
            <summary>
            Access items pre-populated with includes for consumption.
            </summary>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.Add(`0)">
            <summary>
            Add a <typeparamref name="T"/> to the database.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.Update(`0)">
            <summary>
            Update a <typeparamref name="T"/> in the database.
            </summary>
            <param name="item">The item to update.</param>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.Delete(`0)">
            <summary>
            Delete a <typeparamref name="T"/> from the database.
            </summary>
            <param name="item">The item to delete.</param>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.Undelete(`0)">
            <summary>
            Restore a <typeparamref name="T"/> from a deleted state.
            </summary>
            <param name="item">The item to undelete.</param>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.AddIncludesForConsumption(System.Linq.IQueryable{`0})">
            <summary>
            Allow implementations to add database-side includes or constraints when querying for consumption of items.
            </summary>
            <param name="query">The input query.</param>
            <returns>A potentially modified output query.</returns>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.AddIncludesForDeletion(System.Linq.IQueryable{`0})">
            <summary>
            Allow implementations to add database-side includes or constraints when deleting items.
            Included properties could then be subsequently deleted by overriding <see cref="M:osu.Game.Database.MutableDatabaseBackedStore`1.Purge(System.Collections.Generic.List{`0},osu.Game.Database.OsuDbContext)"/>.
            </summary>
            <param name="query">The input query.</param>
            <returns>A potentially modified output query.</returns>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.Purge(System.Collections.Generic.List{`0},osu.Game.Database.OsuDbContext)">
            <summary>
            Called when removing an item completely from the database.
            </summary>
            <param name="items">The items to be purged.</param>
            <param name="context">The write context which can be used to perform subsequent deletions.</param>
        </member>
        <member name="M:osu.Game.Database.MutableDatabaseBackedStore`1.PurgeDeletable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Purge items in a pending delete state.
            </summary>
            <param name="query">An optional query limiting the scope of the purge.</param>
        </member>
        <member name="M:osu.Game.Database.OsuDbContext.#ctor">
            <summary>
            Create a new in-memory OsuDbContext instance.
            </summary>
        </member>
        <member name="M:osu.Game.Database.OsuDbContext.#ctor(System.String)">
            <summary>
            Create a new OsuDbContext instance.
            </summary>
            <param name="connectionString">A valid SQLite connection string.</param>
        </member>
        <member name="M:osu.Game.Extensions.DrawableExtensions.BeginKeyRepeat(osu.Framework.Input.Bindings.IKeyBindingHandler,osu.Framework.Threading.Scheduler,System.Action)">
            <summary>
            Helper method that is used while <see cref="T:osu.Framework.Input.Bindings.IKeyBindingHandler"/> doesn't support repetitions of <see cref="M:osu.Framework.Input.Bindings.IKeyBindingHandler`1.OnPressed(`0)"/>.
            Simulates repetitions by continually invoking a delegate according to the default key repeat rate.
            </summary>
            <remarks>
            The returned delegate can be cancelled to stop repeat events from firing (usually in <see cref="M:osu.Framework.Input.Bindings.IKeyBindingHandler`1.OnReleased(`0)"/>).
            </remarks>
            <param name="handler">The <see cref="T:osu.Framework.Input.Bindings.IKeyBindingHandler`1"/> which is handling the repeat.</param>
            <param name="scheduler">The <see cref="T:osu.Framework.Threading.Scheduler"/> to schedule repetitions on.</param>
            <param name="action">The <see cref="T:System.Action"/> to be invoked once immediately and with every repetition.</param>
            <returns>A <see cref="T:osu.Framework.Threading.ScheduledDelegate"/> which can be cancelled to stop the repeat events from firing.</returns>
        </member>
        <member name="M:osu.Game.Extensions.WebRequestExtensions.AddCursor(osu.Framework.IO.Network.WebRequest,osu.Game.Online.API.Requests.Cursor)">
            <summary>
            Add a pagination cursor to the web request in the format required by osu-web.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Backgrounds.Background">
            <summary>
            A background which offers blurring via a <see cref="T:osu.Framework.Graphics.Containers.BufferedContainer"/> on demand.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Backgrounds.Background.BlurTo(osuTK.Vector2,System.Double,osu.Framework.Graphics.Easing)">
            <summary>
            Smoothly adjusts <see cref="P:osu.Framework.Graphics.Containers.IBufferedContainer.BlurSigma"/> over time.
            </summary>
            <returns>A <see cref="T:osu.Framework.Graphics.Transforms.TransformSequence`1"/> to which further transforms can be added.</returns>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.edge_smoothness">
            <summary>
            How many screen-space pixels are smoothed over.
            Same behavior as Sprite's EdgeSmoothness.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Backgrounds.Triangles.ExpireOffScreenTriangles">
            <summary>
            Whether we want to expire triangles as they exit our draw area completely.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Backgrounds.Triangles.CreateNewTriangles">
            <summary>
            Whether we should create new triangles as others expire.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Backgrounds.Triangles.SpawnRatio">
            <summary>
            The amount of triangles we want compared to the default distribution.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.HideAlphaDiscrepancies">
            <summary>
            Whether we should drop-off alpha values of triangles more quickly to improve
            the visual appearance of fading. This defaults to on as it is generally more
            aesthetically pleasing, but should be turned off in buffered containers.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.Velocity">
            <summary>
            The relative velocity of the triangles. Default is 1.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Backgrounds.Triangles.CreateTriangle">
            <summary>
            Creates a triangle particle with a random scale.
            </summary>
            <returns>The triangle particle.</returns>
        </member>
        <member name="M:osu.Game.Graphics.Backgrounds.Triangles.CreateTriangleShade(System.Single)">
            <summary>
            Creates a shade of colour for the triangles.
            </summary>
            <returns>The colour.</returns>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle.Position">
            <summary>
            The position of the top vertex of the triangle.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle.ColourShade">
            <summary>
            The colour shade of the triangle.
            This is needed for colour recalculation of visible triangles when <see cref="P:osu.Game.Graphics.Backgrounds.Triangles.ColourDark"/> or <see cref="P:osu.Game.Graphics.Backgrounds.Triangles.ColourLight"/> is changed.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle.Colour">
            <summary>
            The colour of the triangle.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle.Scale">
            <summary>
            The scale of the triangle.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle.CompareTo(osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle)">
            <summary>
            Compares two <see cref="T:osu.Game.Graphics.Backgrounds.Triangles.TriangleParticle"/>s. This is a reverse comparer because when the
            triangles are added to the particles list, they should be drawn from largest to smallest
            such that the smaller triangles appear on top.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:osu.Game.Graphics.Containers.BeatSyncedContainer.EarlyActivationMilliseconds">
            <summary>
            The amount of time before a beat we should fire <see cref="M:osu.Game.Graphics.Containers.BeatSyncedContainer.OnNewBeat(System.Int32,osu.Game.Beatmaps.ControlPoints.TimingControlPoint,osu.Game.Beatmaps.ControlPoints.EffectControlPoint,osu.Framework.Audio.Track.TrackAmplitudes)"/>.
            This allows for adding easing to animations that may be synchronised to the beat.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.BeatSyncedContainer.TimeUntilNextBeat">
            <summary>
            The time in milliseconds until the next beat.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.BeatSyncedContainer.TimeSinceLastBeat">
            <summary>
            The time in milliseconds since the last beat
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.BeatSyncedContainer.Divisor">
            <summary>
            How many beats per beatlength to trigger. Defaults to 1.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.BeatSyncedContainer.MinimumBeatLength">
            <summary>
            An optional minimum beat length. Any beat length below this will be multiplied by two until valid.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.BeatSyncedContainer.default_beat_length">
            <summary>
            Default length of a beat in milliseconds. Used whenever there is no beatmap or track playing.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Containers.ConstrainedIconContainer">
            <summary>
            Display an icon that is forced to scale to the size of this container.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.ConstrainedIconContainer.EdgeEffect">
            <summary>
            Determines an edge effect of this <see cref="T:osu.Framework.Graphics.Containers.Container"/>.
            Edge effects are e.g. glow or a shadow.
            Only has an effect when <see cref="P:osu.Framework.Graphics.Containers.CompositeDrawable.Masking"/> is true.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.HoldToConfirmContainer.Fired">
            <summary>
            Whether currently in a fired state (and the confirm <see cref="F:osu.Game.Graphics.Containers.HoldToConfirmContainer.Action"/> has been sent).
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.HoldToConfirmContainer.AllowMultipleFires">
            <summary>
            Whether the overlay should be allowed to return from a fired state.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Containers.LogoTrackingContainer">
            <summary>
            A container that handles tracking of an <see cref="T:osu.Game.Screens.Menu.OsuLogo"/> through different layout scenarios.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Containers.LogoTrackingContainer.StartTracking(osu.Game.Screens.Menu.OsuLogo,System.Double,osu.Framework.Graphics.Easing)">
            <summary>
            Assign the logo that should track the facade's position, as well as how it should transform to its initial position.
            </summary>
            <param name="logo">The instance of the logo to be used for tracking.</param>
            <param name="duration">The duration of the initial transform. Default is instant.</param>
            <param name="easing">The easing type of the initial transform.</param>
        </member>
        <member name="M:osu.Game.Graphics.Containers.LogoTrackingContainer.StopTracking">
            <summary>
            Stops the logo assigned in <see cref="M:osu.Game.Graphics.Containers.LogoTrackingContainer.StartTracking(osu.Game.Screens.Menu.OsuLogo,System.Double,osu.Framework.Graphics.Easing)"/> from tracking the facade's position.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Containers.LogoTrackingContainer.ComputeLogoTrackingPosition">
            <summary>
            Gets the position that the logo should move to with respect to the <see cref="P:osu.Game.Graphics.Containers.LogoTrackingContainer.LogoFacade"/>.
            Manually performs a conversion of the Facade's position to the Logo's parent's relative space.
            </summary>
            <remarks>Will only be correct if the logo's <see cref="P:osu.Framework.Graphics.Drawable.RelativePositionAxes"/> are set to Axes.Both</remarks>
        </member>
        <member name="T:osu.Game.Graphics.Containers.LogoTrackingContainer.Facade">
            <summary>
            A dummy object used to denote another object's location.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.OsuFocusedOverlayContainer.DimMainContent">
            <summary>
            Temporary to allow for overlays in the main screen content to not dim theirselves.
            Should be eventually replaced by dimming which is aware of the target dim container (traverse parent for certain interface type?).
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.OsuFocusedOverlayContainer.BlockScreenWideMouse">
            <summary>
            Whether mouse input should be blocked screen-wide while this overlay is visible.
            Performing mouse actions outside of the valid extents will hide the overlay.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.OsuRearrangeableListContainer`1.playlistDragActive">
            <summary>
            Whether any item is currently being dragged. Used to hide other items' drag handles.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.OsuRearrangeableListItem`1.PlaylistDragActive">
            <summary>
            Whether any item is currently being dragged. Used to hide other items' drag handles.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.OsuRearrangeableListItem`1.HandleColour">
            <summary>
            The colour of the drag handle.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.OsuRearrangeableListItem`1.ShowDragHandle">
            <summary>
            Whether the drag handle should be shown.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.OsuScrollContainer.RightMouseScrollbar">
            <summary>
            Allows controlling the scroll bar from any position in the container using the right mouse button.
            Uses the value of <see cref="F:osu.Game.Graphics.Containers.OsuScrollContainer.DistanceDecayOnRightMouseScrollbar"/> to smoothly scroll to the dragged location.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.OsuScrollContainer.DistanceDecayOnRightMouseScrollbar">
            <summary>
            Controls the rate with which the target position is approached when performing a relative drag. Default is 0.02.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.ParallaxContainer.ParallaxAmount">
            <summary>
            The amount of parallax movement. Negative values will reverse the direction of parallax relative to user input.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Containers.ScalingContainer">
            <summary>
            Handles user-defined scaling, allowing application at multiple levels defined by <see cref="T:osu.Game.Configuration.ScalingMode"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Containers.ScalingContainer.#ctor(System.Nullable{osu.Game.Configuration.ScalingMode})">
            <summary>
            Create a new instance.
            </summary>
            <param name="targetMode">The mode which this container should be handling. Handles all modes if null.</param>
        </member>
        <member name="T:osu.Game.Graphics.Containers.SectionsContainer`1">
            <summary>
            A container that can scroll to each section inside it.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Containers.ShakeContainer">
            <summary>
            A container that adds the ability to shake its contents.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.ShakeContainer.ShakeDuration">
            <summary>
            The length of a single shake.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.ShakeContainer.TotalShakes">
            <summary>
            Total number of shakes. May be shortened if possible.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.ShakeContainer.ShakeMagnitude">
            <summary>
            Pixels of displacement per shake.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Containers.ShakeContainer.Shake(System.Nullable{System.Double})">
            <summary>
            Shake the contents of this container.
            </summary>
            <param name="maximumLength">The maximum length the shake should last.</param>
        </member>
        <member name="T:osu.Game.Graphics.Containers.UserDimContainer">
            <summary>
            A container that applies user-configured visual settings to its contents.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.UserDimContainer.BREAK_LIGHTEN_AMOUNT">
            <summary>
            Amount of lightening to apply to current dim level during break times.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.UserDimContainer.EnableUserDim">
            <summary>
            Whether or not user-configured dim levels should be applied to the container.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.UserDimContainer.IgnoreUserSettings">
            <summary>
            Whether or not user-configured settings relating to brightness of elements should be ignored
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.UserDimContainer.StoryboardReplacesBackground">
            <summary>
            Whether or not the storyboard loaded should completely hide the background behind it.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Containers.UserDimContainer.IsBreakTime">
            <summary>
            Whether player is in break time.
            Must be bound to <see cref="P:osu.Game.Screens.Play.BreakTracker.IsBreakTime"/> to allow for dim adjustments in gameplay.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.UserDimContainer.ContentDisplayed">
            <summary>
            Whether the content of this container is currently being displayed.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Containers.UserDimContainer.#ctor">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.Containers.UserDimContainer"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Containers.UserDimContainer.ShowDimContent">
            <summary>
            Whether the content of this container should currently be visible.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.Containers.UserDimContainer.UpdateVisuals">
            <summary>
            Should be invoked when any dependent dim level or user setting is changed and bring the visual state up-to-date.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Cursor.IProvideCursor">
            <summary>
            Interface for <see cref="T:osu.Framework.Graphics.IDrawable"/>s that display cursors which can replace the user's cursor.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Cursor.IProvideCursor.Cursor">
            <summary>
            The cursor provided by this <see cref="T:osu.Framework.Graphics.IDrawable"/>.
            May be null if no cursor should be visible.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.Cursor.IProvideCursor.ProvidingUserCursor">
            <summary>
            Whether <see cref="P:osu.Game.Graphics.Cursor.IProvideCursor.Cursor"/> should be displayed as the singular user cursor. This will temporarily hide any other user cursor.
            This value is checked every frame and may be used to control whether multiple cursors are displayed (e.g. watching replays).
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.Cursor.MenuCursorContainer">
            <summary>
            A container which provides a <see cref="T:osu.Game.Graphics.Cursor.MenuCursor"/> which can be overridden by hovered <see cref="T:osu.Framework.Graphics.Drawable"/>s.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.Cursor.MenuCursorContainer.CanShowCursor">
            <summary>
            Whether any cursors can be displayed.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.IHasAccentColour">
            <summary>
            A type of drawable that has an accent colour.
            The accent colour is used to colorize various objects inside a drawable
            without colorizing the drawable itself.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.AccentedColourExtensions.FadeAccent``1(``0,osuTK.Graphics.Color4,System.Double,osu.Framework.Graphics.Easing)">
            <summary>
            Smoothly adjusts <see cref="P:osu.Game.Graphics.IHasAccentColour.AccentColour"/> over time.
            </summary>
            <returns>A <see cref="T:osu.Framework.Graphics.Transforms.TransformSequence`1"/> to which further transforms can be added.</returns>
        </member>
        <member name="M:osu.Game.Graphics.AccentedColourExtensions.FadeAccent``1(osu.Framework.Graphics.Transforms.TransformSequence{``0},osuTK.Graphics.Color4,System.Double,osu.Framework.Graphics.Easing)">
            <summary>
            Smoothly adjusts <see cref="P:osu.Game.Graphics.IHasAccentColour.AccentColour"/> over time.
            </summary>
            <returns>A <see cref="T:osu.Framework.Graphics.Transforms.TransformSequence`1"/> to which further transforms can be added.</returns>
        </member>
        <member name="M:osu.Game.Graphics.OsuColour.ForRank(osu.Game.Scoring.ScoreRank)">
            <summary>
            Retrieves the colour for a <see cref="T:osu.Game.Scoring.ScoreRank"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.OsuColour.ForHitResult(osu.Game.Rulesets.Scoring.HitResult)">
            <summary>
            Retrieves the colour for a <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.OsuFont.DEFAULT_FONT_SIZE">
            <summary>
            The default font size.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.OsuFont.Default">
            <summary>
            The default font.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.OsuFont.GetFont(osu.Game.Graphics.Typeface,System.Single,osu.Game.Graphics.FontWeight,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.
            </summary>
            <param name="typeface">The font typeface.</param>
            <param name="size">The size of the text in local space. For a value of 16, a single line will have a height of 16px.</param>
            <param name="weight">The font weight.</param>
            <param name="italics">Whether the font is italic.</param>
            <param name="fixedWidth">Whether all characters should be spaced the same distance apart.</param>
            <returns>The <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</returns>
        </member>
        <member name="M:osu.Game.Graphics.OsuFont.GetFamilyString(osu.Game.Graphics.Typeface)">
            <summary>
            Retrieves the string representation of a <see cref="T:osu.Game.Graphics.Typeface"/>.
            </summary>
            <param name="typeface">The <see cref="T:osu.Game.Graphics.Typeface"/>.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:osu.Game.Graphics.OsuFont.GetWeightString(osu.Game.Graphics.Typeface,osu.Game.Graphics.FontWeight)">
            <summary>
            Retrieves the string representation of a <see cref="T:osu.Game.Graphics.FontWeight"/>.
            </summary>
            <param name="typeface">The <see cref="T:osu.Game.Graphics.Typeface"/>.</param>
            <param name="weight">The <see cref="T:osu.Game.Graphics.FontWeight"/>.</param>
            <returns>The string representation of <paramref name="weight"/> in the specified <paramref name="typeface"/>.</returns>
        </member>
        <member name="M:osu.Game.Graphics.OsuFont.GetWeightString(System.String,osu.Game.Graphics.FontWeight)">
            <summary>
            Retrieves the string representation of a <see cref="T:osu.Game.Graphics.FontWeight"/>.
            </summary>
            <param name="family">The family string.</param>
            <param name="weight">The <see cref="T:osu.Game.Graphics.FontWeight"/>.</param>
            <returns>The string representation of <paramref name="weight"/> in the specified <paramref name="family"/>.</returns>
        </member>
        <member name="M:osu.Game.Graphics.OsuFontExtensions.With(osu.Framework.Graphics.Sprites.FontUsage,System.Nullable{osu.Game.Graphics.Typeface},System.Nullable{System.Single},System.Nullable{osu.Game.Graphics.FontWeight},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/> by applying adjustments to this <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.
            </summary>
            <param name="usage">The base <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</param>
            <param name="typeface">The font typeface. If null, the value is copied from this <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</param>
            <param name="size">The text size. If null, the value is copied from this <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</param>
            <param name="weight">The font weight. If null, the value is copied from this <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</param>
            <param name="italics">Whether the font is italic. If null, the value is copied from this <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</param>
            <param name="fixedWidth">Whether all characters should be spaced apart the same distance. If null, the value is copied from this <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</param>
            <returns>The resulting <see cref="T:osu.Framework.Graphics.Sprites.FontUsage"/>.</returns>
        </member>
        <member name="F:osu.Game.Graphics.FontWeight.Light">
            <summary>
            Equivalent to weight 300.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.FontWeight.Regular">
            <summary>
            Equivalent to weight 400.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.FontWeight.Medium">
            <summary>
            Equivalent to weight 500.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.FontWeight.SemiBold">
            <summary>
            Equivalent to weight 600.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.FontWeight.Bold">
            <summary>
            Equivalent to weight 700.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.FontWeight.Black">
            <summary>
            Equivalent to weight 900.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.ScreenshotManager.CursorVisibility">
            <summary>
            Changed when screenshots are being or have finished being taken, to control whether cursors should be visible.
            If cursors should not be visible, cursors have 3 frames to hide themselves.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterfaceV2.LabelledDrawable`1.Component">
            <summary>
            The component that is being displayed.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterfaceV2.LabelledDrawable`1.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterfaceV2.LabelledComponent`2"/>.
            </summary>
            <param name="padded">Whether the component should be padded or should be expanded to the bounds of this <see cref="T:osu.Game.Graphics.UserInterfaceV2.LabelledComponent`2"/>.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterfaceV2.LabelledDrawable`1.CreateComponent">
            <summary>
            Creates the component that should be displayed.
            </summary>
            <returns>The component.</returns>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.Bar.Length">
            <summary>
            Length of the bar, ranges from 0 to 1
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.BarGraph.MaxValue">
            <summary>
            Manually sets the max value, if null <see cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})"/> is instead used
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.BarGraph.Values">
            <summary>
            A list of floats that defines the length of each <see cref="T:osu.Game.Graphics.UserInterface.Bar"/>
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.ExpandingBar">
            <summary>
            A rounded bar which can be expanded or collapsed.
            Generally used for tabs or breadcrumbs.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.FocusedTextBox">
            <summary>
            A textbox which holds focus eagerly.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.HoverClickSounds">
            <summary>
            Adds hover and click sounds to a drawable.
            Does not draw anything.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.HoverClickSounds.#ctor(osu.Game.Graphics.UserInterface.HoverSampleSet,osuTK.Input.MouseButton[])">
            <summary>
            a container which plays sounds on hover and click for any specified <see cref="T:osuTK.Input.MouseButton"/>s.
            </summary>
            <param name="sampleSet">Set of click samples to play.</param>
            <param name="buttons">
            Array of button codes which should trigger the click sound.
            If this optional parameter is omitted or set to <code>null</code>, the click sound will only be played on left click.
            </param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.HoverSounds">
            <summary>
            Adds hover sounds to a drawable.
            Does not draw anything.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.HoverSounds.HoverDebounceTime">
            <summary>
            Length of debounce for hover sound playback, in milliseconds. Default is 50ms.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.IconButton.IconColour">
            <summary>
            The icon colour. This does not affect <see cref="P:osu.Framework.Graphics.Drawable.Colour">Colour</see>.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.IconButton.IconHoverColour">
            <summary>
            The icon colour while the <see cref="T:osu.Game.Graphics.UserInterface.IconButton"/> is hovered.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.IconButton.Icon">
            <summary>
            The icon.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.IconButton.IconScale">
            <summary>
            The icon scale. This does not affect <see cref="P:osu.Framework.Graphics.Drawable.Scale">Scale</see>.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.LineGraph.MaxValue">
            <summary>
            Manually set the max value, otherwise <see cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})"/> will be used.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.LineGraph.MinValue">
            <summary>
            Manually set the min value, otherwise <see cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})"/> will be used.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.LineGraph.DefaultValueCount">
            <summary>
            Hold an empty area if values are less.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.LineGraph.Values">
            <summary>
            A list of floats decides position of each line node.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.LoadingLayer">
            <summary>
            A layer that will show a loading spinner and completely block input to an area.
            Also optionally dims target elements.
            Useful for disabling all elements in a form and showing we are waiting on a response, for instance.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.LoadingLayer.#ctor(osu.Framework.Graphics.Drawable,System.Boolean)">
            <summary>
            Constuct a new loading spinner.
            </summary>
            <param name="dimTarget">An optional target to dim when displayed.</param>
            <param name="withBox">Whether the spinner should have a surrounding black box for visibility.</param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.LoadingSpinner">
            <summary>
            A loading spinner.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.LoadingSpinner.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constuct a new loading spinner.
            </summary>
            <param name="withBox">Whether the spinner should have a surrounding black box for visibility.</param>
            <param name="inverted">Whether colours should be inverted (black spinner instead of white).</param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.OsuAnimatedButton">
            <summary>
            Highlight on hover, bounce on click.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.OsuAnimatedButton.FlashColour">
            <summary>
            The colour that should be flashed when the <see cref="T:osu.Game.Graphics.UserInterface.OsuAnimatedButton"/> is clicked.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.OsuAnimatedButton.HoverColour">
            <summary>
            The background colour of the <see cref="T:osu.Game.Graphics.UserInterface.OsuAnimatedButton"/> while it is hovered.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.OsuButton">
            <summary>
            A button with added default sound effects.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.OsuSliderBar`1.max_decimal_digits">
            <summary>
            Maximum number of decimal digits to be displayed in the tooltip.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.OsuSliderBar`1.DisplayAsPercentage">
            <summary>
            Whether to format the tooltip as a percentage or the actual value.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.OsuSliderBar`1.normalise(System.Decimal,System.Int32)">
            <summary>
            Removes all non-significant digits, keeping at most a requested number of decimal digits.
            </summary>
            <param name="d">The decimal to normalize.</param>
            <param name="sd">The maximum number of decimal digits to keep. The final result may have fewer decimal digits than this value.</param>
            <returns>The normalised decimal.</returns>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.OsuSliderBar`1.findPrecision(System.Decimal)">
            <summary>
            Finds the number of digits after the decimal.
            </summary>
            <param name="d">The value to find the number of decimal digits for.</param>
            <returns>The number decimal digits.</returns>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.OsuTabControl`1.AddEnumEntriesAutomatically">
            <summary>
            Whether entries should be automatically populated if <typeparamref name="T"/> is an <see cref="T:System.Enum"/> type.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.OsuTabControlCheckbox">
            <summary>
            A Checkbox styled to be placed in line with an <see cref="T:osu.Game.Graphics.UserInterface.OsuTabControl`1"/>
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.PercentageCounter">
            <summary>
            Used as an accuracy counter. Represented visually as a percentage.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.RollingCounter`1.Current">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.RollingCounter`1.IsRollingProportional">
            <summary>
            If true, the roll-up duration will be proportional to change in value.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.RollingCounter`1.RollingDuration">
            <summary>
            If IsRollingProportional = false, duration in milliseconds for the counter roll-up animation for each
            element; else duration in milliseconds for the counter roll-up animation in total.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.RollingCounter`1.RollingEasing">
            <summary>
            Easing for the counter rollover animation.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.RollingCounter`1.DisplayedCount">
            <summary>
            Value shown at the current moment.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.#ctor">
            <summary>
            Skeleton of a numeric counter which value rolls over time.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.SetCountWithoutRolling(`0)">
            <summary>
            Sets count value, bypassing rollover animation.
            </summary>
            <param name="count">New count value.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.StopRolling">
            <summary>
            Stops rollover animation, forcing the displayed count to be the actual count.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.ResetCount">
            <summary>
            Resets count to default value.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.GetProportionalDuration(`0,`0)">
            <summary>
            Calculates the duration of the roll-up animation by using the difference between the current visible value
            and the new final value.
            </summary>
            <remarks>
            To be used in conjunction with IsRollingProportional = true.
            Unless a derived class needs to have a proportional rolling, it is not necessary to override this function.
            </remarks>
            <param name="currentValue">Current visible value.</param>
            <param name="newValue">New final value.</param>
            <returns>Calculated rollover duration in milliseconds.</returns>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.FormatCount(`0)">
            <summary>
            Used to format counts.
            </summary>
            <param name="count">Count to format.</param>
            <returns>Count formatted as a string.</returns>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.RollingCounter`1.TransformCount(`0,`0)">
            <summary>
            Called when the count is updated to add a transformer that changes the value of the visible count (i.e.
            implement the rollover animation).
            </summary>
            <param name="currentValue">Count value before modification.</param>
            <param name="newValue">Expected count value after modification.</param>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.ScoreCounter.LeadingZeroes">
            <summary>
            How many leading zeroes the counter has.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.ScoreCounter.#ctor(System.UInt32)">
            <summary>
            Displays score.
            </summary>
            <param name="leading">How many leading zeroes the counter will have.</param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.ScreenBreadcrumbControl">
            <summary>
            A <see cref="T:osu.Game.Graphics.UserInterface.BreadcrumbControl`1"/> which follows the active screen (and allows navigation) in a <see cref="T:osu.Framework.Screens.Screen"/> stack.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.SeekLimitedSearchTextBox">
            <summary>
            A <see cref="T:osu.Game.Graphics.UserInterface.SearchTextBox"/> which does not handle left/right arrow keys for seeking.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.SimpleComboCounter">
            <summary>
            Used as an accuracy counter. Represented visually as a percentage.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.StarCounter.StarCount">
            <summary>
            Maximum amount of stars displayed.
            </summary>
            <remarks>
            This does not limit the counter value, but the amount of stars displayed.
            </remarks>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.StarCounter.AnimationDelay">
            <summary>
            The added delay for each subsequent star to be animated.
            </summary>
        </member>
        <member name="P:osu.Game.Graphics.UserInterface.StarCounter.Current">
            <summary>
            Amount of stars represented.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StarCounter.#ctor(System.Int32)">
            <summary>
            Shows a float count as stars. Used as star difficulty display.
            </summary>
            <param name="starCount">Maximum amount of stars to display.</param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.StatefulMenuItem">
            <summary>
            An <see cref="T:osu.Game.Graphics.UserInterface.OsuMenuItem"/> which contains and displays a state.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.StatefulMenuItem.State">
            <summary>
            The current state that should be displayed.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StatefulMenuItem.#ctor(System.String,System.Func{System.Object,System.Object},osu.Game.Graphics.UserInterface.MenuItemType)">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="changeStateFunc">A function that mutates a state to another state after this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> is pressed.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> performs.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StatefulMenuItem.#ctor(System.String,System.Func{System.Object,System.Object},osu.Game.Graphics.UserInterface.MenuItemType,System.Action{System.Object})">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="changeStateFunc">A function that mutates a state to another state after this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> is pressed.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> performs.</param>
            <param name="action">A delegate to be invoked when this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> is pressed.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StatefulMenuItem.GetIconForState(System.Object)">
            <summary>
            Retrieves the icon to be displayed for a state.
            </summary>
            <param name="state">The state to retrieve the relevant icon for.</param>
            <returns>The icon to be displayed for <paramref name="state"/>.</returns>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.StatefulMenuItem`1.State">
            <summary>
            The current state that should be displayed.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StatefulMenuItem`1.#ctor(System.String,System.Func{`0,`0},osu.Game.Graphics.UserInterface.MenuItemType)">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="changeStateFunc">A function that mutates a state to another state after this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> is pressed.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> performs.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StatefulMenuItem`1.#ctor(System.String,System.Func{`0,`0},osu.Game.Graphics.UserInterface.MenuItemType,System.Action{`0})">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="changeStateFunc">A function that mutates a state to another state after this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> is pressed.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> performs.</param>
            <param name="action">A delegate to be invoked when this <see cref="T:osu.Game.Graphics.UserInterface.StatefulMenuItem"/> is pressed.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.StatefulMenuItem`1.GetIconForState(`0)">
            <summary>
            Retrieves the icon to be displayed for a state.
            </summary>
            <param name="state">The state to retrieve the relevant icon for.</param>
            <returns>The icon to be displayed for <paramref name="state"/>.</returns>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.TernaryState">
            <summary>
            An on/off state with an extra indeterminate state.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.TernaryState.False">
            <summary>
            The current state is false.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.TernaryState.Indeterminate">
            <summary>
            The current state is a combination of <see cref="F:osu.Game.Graphics.UserInterface.TernaryState.False"/> and <see cref="F:osu.Game.Graphics.UserInterface.TernaryState.True"/>.
            The state becomes <see cref="F:osu.Game.Graphics.UserInterface.TernaryState.True"/> if the <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> is pressed.
            </summary>
        </member>
        <member name="F:osu.Game.Graphics.UserInterface.TernaryState.True">
            <summary>
            The current state is true.
            </summary>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem">
            <summary>
            An <see cref="T:osu.Game.Graphics.UserInterface.OsuMenuItem"/> with three possible states.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.TernaryStateMenuItem.#ctor(System.String,osu.Game.Graphics.UserInterface.MenuItemType)">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> performs.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.TernaryStateMenuItem.#ctor(System.String,osu.Game.Graphics.UserInterface.MenuItemType,System.Action{osu.Game.Graphics.UserInterface.TernaryState})">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> performs.</param>
            <param name="action">A delegate to be invoked when this <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> is pressed.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.TernaryStateMenuItem.#ctor(System.String,System.Func{osu.Game.Graphics.UserInterface.TernaryState,osu.Game.Graphics.UserInterface.TernaryState},osu.Game.Graphics.UserInterface.MenuItemType,System.Action{osu.Game.Graphics.UserInterface.TernaryState})">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="changeStateFunc">A function that mutates a state to another state after this <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> is pressed.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> performs.</param>
            <param name="action">A delegate to be invoked when this <see cref="T:osu.Game.Graphics.UserInterface.TernaryStateMenuItem"/> is pressed.</param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.ToggleMenuItem">
            <summary>
            An <see cref="T:osu.Game.Graphics.UserInterface.OsuMenuItem"/> which displays an enabled or disabled state.
            </summary>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.ToggleMenuItem.#ctor(System.String,osu.Game.Graphics.UserInterface.MenuItemType)">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.ToggleMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.ToggleMenuItem"/> performs.</param>
        </member>
        <member name="M:osu.Game.Graphics.UserInterface.ToggleMenuItem.#ctor(System.String,osu.Game.Graphics.UserInterface.MenuItemType,System.Action{System.Boolean})">
            <summary>
            Creates a new <see cref="T:osu.Game.Graphics.UserInterface.ToggleMenuItem"/>.
            </summary>
            <param name="text">The text to display.</param>
            <param name="type">The type of action which this <see cref="T:osu.Game.Graphics.UserInterface.ToggleMenuItem"/> performs.</param>
            <param name="action">A delegate to be invoked when this <see cref="T:osu.Game.Graphics.UserInterface.ToggleMenuItem"/> is pressed.</param>
        </member>
        <member name="T:osu.Game.Graphics.UserInterface.TriangleButton">
            <summary>
            A button with moving triangles in the background.
            </summary>
        </member>
        <member name="T:osu.Game.Input.Bindings.DatabasedKeyBindingContainer`1">
            <summary>
            A KeyBindingInputManager with a database backing for custom overrides.
            </summary>
            <typeparam name="T">The type of the custom action.</typeparam>
        </member>
        <member name="M:osu.Game.Input.Bindings.DatabasedKeyBindingContainer`1.#ctor(osu.Game.Rulesets.RulesetInfo,System.Nullable{System.Int32},osu.Framework.Input.Bindings.SimultaneousBindingMode,osu.Framework.Input.Bindings.KeyCombinationMatchingMode)">
            <summary>
            Create a new instance.
            </summary>
            <param name="ruleset">A reference to identify the current <see cref="T:osu.Game.Rulesets.Ruleset"/>. Used to lookup mappings. Null for global mappings.</param>
            <param name="variant">An optional variant for the specified <see cref="T:osu.Game.Rulesets.Ruleset"/>. Used when a ruleset has more than one possible keyboard layouts.</param>
            <param name="simultaneousMode">Specify how to deal with multiple matches of <see cref="T:osu.Framework.Input.Bindings.KeyCombination"/>s and <typeparamref name="T"/>s.</param>
            <param name="matchingMode">Specify how to deal with exact <see cref="T:osu.Framework.Input.Bindings.KeyCombination"/> matches.</param>
        </member>
        <member name="P:osu.Game.Input.Handlers.ReplayInputHandler.GamefieldToScreenSpace">
            <summary>
            A function that converts coordinates from gamefield to screen space.
            </summary>
        </member>
        <member name="M:osu.Game.Input.Handlers.ReplayInputHandler.SetFrameFromTime(System.Double)">
            <summary>
            Update the current frame based on an incoming time value.
            There are cases where we return a "must-use" time value that is different from the input.
            This is to ensure accurate playback of replay data.
            </summary>
            <param name="time">The time which we should use for finding the current frame.</param>
            <returns>The usable time value. If null, we should not advance time as we do not have enough data.</returns>
        </member>
        <member name="T:osu.Game.Input.IdleTracker">
            <summary>
            Track whether the end-user is in an idle state, based on their last interaction with the game.
            </summary>
        </member>
        <member name="P:osu.Game.Input.IdleTracker.IsIdle">
            <summary>
            Whether the user is currently in an idle state.
            </summary>
        </member>
        <member name="P:osu.Game.Input.IdleTracker.AllowIdle">
            <summary>
            Whether the game can currently enter an idle state.
            </summary>
        </member>
        <member name="M:osu.Game.Input.IdleTracker.#ctor(System.Double)">
            <summary>
            Intstantiate a new <see cref="T:osu.Game.Input.IdleTracker"/>.
            </summary>
            <param name="timeToIdle">The length in milliseconds until an idle state should be assumed.</param>
        </member>
        <member name="M:osu.Game.Input.KeyBindingStore.Query(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieve <see cref="T:osu.Game.Input.Bindings.DatabasedKeyBinding"/>s for a specified ruleset/variant content.
            </summary>
            <param name="rulesetId">The ruleset's internal ID.</param>
            <param name="variant">An optional variant.</param>
            <returns></returns>
        </member>
        <member name="M:osu.Game.IO.Archives.ArchiveReader.GetStream(System.String)">
            <summary>
            Opens a stream for reading a specific file from this archive.
            </summary>
        </member>
        <member name="F:osu.Game.IO.Archives.ArchiveReader.Name">
            <summary>
            The name of this archive (usually the containing filename).
            </summary>
        </member>
        <member name="T:osu.Game.IO.Archives.LegacyByteArrayReader">
            <summary>
            Allows reading a single file from the provided stream.
            </summary>
        </member>
        <member name="T:osu.Game.IO.Archives.LegacyDirectoryArchiveReader">
            <summary>
            Reads an archive from a directory on disk.
            </summary>
        </member>
        <member name="T:osu.Game.IO.Archives.LegacyFileArchiveReader">
            <summary>
            Reads a file on disk as an archive.
            Note: In this case, the file is not an extractable archive, use <see cref="T:osu.Game.IO.Archives.ZipArchiveReader"/> instead.
            </summary>
        </member>
        <member name="T:osu.Game.IO.FileStore">
            <summary>
            Handles the Store and retrieval of Files/FileSets to the database backing
            </summary>
        </member>
        <member name="M:osu.Game.IO.FileStore.QueryFiles(System.Linq.Expressions.Expression{System.Func{osu.Game.IO.FileInfo,System.Boolean}})">
            <summary>
            Perform a lookup query on available <see cref="T:osu.Game.IO.FileInfo"/>s.
            </summary>
            <param name="query">The query.</param>
            <returns>Results from the provided query.</returns>
        </member>
        <member name="T:osu.Game.IO.Legacy.SerializationReader">
            <summary> SerializationReader.  Extends BinaryReader to add additional data types,
            handle null strings and simplify use with ISerializable. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.GetReader(System.Runtime.Serialization.SerializationInfo)">
            <summary> Static method to take a SerializationInfo object (an input to an ISerializable constructor)
            and produce a SerializationReader from which serialized objects can be read </summary>.
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadString">
            <summary> Reads a string from the buffer.  Overrides the base implementation so it can cope with nulls. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadByteArray">
            <summary> Reads a byte array from the buffer, handling nulls and the array length. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadCharArray">
            <summary> Reads a char array from the buffer, handling nulls and the array length. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadDateTime">
            <summary> Reads a DateTime from the buffer. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadBList``1(System.Boolean)">
            <summary> Reads a generic list from the buffer. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadList``1">
            <summary> Reads a generic list from the buffer. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadDictionary``2">
            <summary> Reads a generic Dictionary from the buffer. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationReader.ReadObject">
            <summary> Reads an object which was added to the buffer by WriteObject. </summary>
        </member>
        <member name="T:osu.Game.IO.Legacy.SerializationWriter">
            <summary> SerializationWriter.  Extends BinaryWriter to add additional data types,
            handle null strings and simplify use with ISerializable. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.GetWriter">
            <summary> Static method to initialise the writer with a suitable MemoryStream. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.Write(System.String)">
            <summary> Writes a string to the buffer.  Overrides the base implementation so it can cope with nulls </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.Write(System.Byte[])">
            <summary> Writes a byte array to the buffer.  Overrides the base implementation to
            send the length of the array which is needed when it is retrieved </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.Write(System.Char[])">
            <summary> Writes a char array to the buffer.  Overrides the base implementation to
            sends the length of the array which is needed when it is read. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.Write(System.DateTime)">
            <summary>
            Writes DateTime to the buffer.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary> Writes a generic ICollection (such as an IList(T)) to the buffer.</summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.Write``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary> Writes a generic IDictionary to the buffer. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.WriteObject(System.Object)">
            <summary> Writes an arbitrary object to the buffer.  Useful where we have something of type "object"
            and don't know how to treat it.  This works out the best method to use to write to the buffer. </summary>
        </member>
        <member name="M:osu.Game.IO.Legacy.SerializationWriter.AddToInfo(System.Runtime.Serialization.SerializationInfo)">
            <summary> Adds the SerializationWriter buffer to the SerializationInfo at the end of GetObjectData(). </summary>
        </member>
        <member name="T:osu.Game.IO.LineBufferedReader">
            <summary>
            A <see cref="T:System.IO.StreamReader"/>-like decorator (with more limited API) for <see cref="T:System.IO.Stream"/>s
            that allows lines to be peeked without consuming.
            </summary>
        </member>
        <member name="M:osu.Game.IO.LineBufferedReader.PeekLine">
            <summary>
            Reads the next line from the stream without consuming it.
            Subsequent calls to <see cref="M:osu.Game.IO.LineBufferedReader.PeekLine"/> without a <see cref="M:osu.Game.IO.LineBufferedReader.ReadLine"/> will return the same string.
            </summary>
        </member>
        <member name="M:osu.Game.IO.LineBufferedReader.ReadLine">
            <summary>
            Reads the next line from the stream and consumes it.
            If a line was peeked, that same line will then be consumed and returned.
            </summary>
        </member>
        <member name="M:osu.Game.IO.LineBufferedReader.ReadToEnd">
            <summary>
            Reads the stream to its end and returns the text read.
            This includes any peeked but unconsumed lines.
            </summary>
        </member>
        <member name="M:osu.Game.IO.OsuStorage.attemptOperation(System.Action,System.Int32)">
            <summary>
            Attempt an IO operation multiple times and only throw if none of the attempts succeed.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="attempts">The number of attempts (250ms wait between each).</param>
        </member>
        <member name="T:osu.Game.IO.Serialization.Converters.TypedListConverter`1">
            <summary>
            A type of <see cref="T:Newtonsoft.Json.JsonConverter"/> that serializes an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> alongside
            a lookup table for the types contained. The lookup table is used in deserialization to
            reconstruct the objects with their original types.
            </summary>
            <typeparam name="T">The type of objects contained in the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> this attribute is attached to.</typeparam>
        </member>
        <member name="M:osu.Game.IO.Serialization.Converters.TypedListConverter`1.#ctor">
            <summary>
            Constructs a new <see cref="T:osu.Game.IO.Serialization.Converters.TypedListConverter`1"/>.
            </summary>
        </member>
        <member name="M:osu.Game.IO.Serialization.Converters.TypedListConverter`1.#ctor(System.Boolean)">
            <summary>
            Constructs a new <see cref="T:osu.Game.IO.Serialization.Converters.TypedListConverter`1"/>.
            </summary>
            <param name="requiresTypeVersion">Whether the version of the type should be serialized.</param>
        </member>
        <member name="T:osu.Game.IO.Serialization.Converters.Vector2Converter">
            <summary>
            A type of <see cref="T:Newtonsoft.Json.JsonConverter"/> that serializes only the X and Y coordinates of a <see cref="T:osuTK.Vector2"/>.
            </summary>
        </member>
        <member name="M:osu.Game.IO.Serialization.JsonSerializableExtensions.CreateGlobalSettings">
            <summary>
            Creates the default <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> that should be used for all <see cref="T:osu.Game.IO.Serialization.IJsonSerializable"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="T:osu.Game.IO.WrappedStorage">
            <summary>
            A storage which wraps another storage and delegates implementation, potentially mutating the lookup path.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.APIAccess.ProvidedUsername">
            <summary>
            The username/email provided by the user when initiating a login.
            </summary>
        </member>
        <member name="M:osu.Game.Online.API.APIAccess.Register(osu.Game.Online.API.IOnlineComponent)">
            <summary>
            Register a component to receive API events.
            Fires <see cref="M:osu.Game.Online.API.IOnlineComponent.APIStateChanged(osu.Game.Online.API.IAPIProvider,osu.Game.Online.API.APIState)"/> once immediately to ensure a correct state.
            </summary>
            <param name="component"></param>
        </member>
        <member name="F:osu.Game.Online.API.APIAccess.failureCount">
            <summary>
            Number of consecutive requests which failed due to network issues.
            </summary>
        </member>
        <member name="M:osu.Game.Online.API.APIAccess.handleRequest(osu.Game.Online.API.APIRequest)">
            <summary>
            Handle a single API request.
            Ensures all exceptions are caught and dealt with correctly.
            </summary>
            <param name="req">The request.</param>
            <returns>true if the request succeeded.</returns>
        </member>
        <member name="F:osu.Game.Online.API.APIState.Offline">
            <summary>
            We cannot login (not enough credentials).
            </summary>
        </member>
        <member name="F:osu.Game.Online.API.APIState.Failing">
            <summary>
            We are having connectivity issues.
            </summary>
        </member>
        <member name="F:osu.Game.Online.API.APIState.Connecting">
            <summary>
            We are in the process of (re-)connecting.
            </summary>
        </member>
        <member name="F:osu.Game.Online.API.APIState.Online">
            <summary>
            We are online.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.APIDownloadRequest.FileExtension">
            <summary>
            Used to set the extension of the file returned by this request.
            </summary>
        </member>
        <member name="T:osu.Game.Online.API.APIRequest`1">
            <summary>
            An API request with a well-defined response type.
            </summary>
            <typeparam name="T">Type of the response (used for deserialisation).</typeparam>
        </member>
        <member name="E:osu.Game.Online.API.APIRequest`1.Success">
            <summary>
            Invoked on successful completion of an API request.
            This will be scheduled to the API's internal scheduler (run on update thread automatically).
            </summary>
        </member>
        <member name="T:osu.Game.Online.API.APIRequest">
            <summary>
            AN API request with no specified response type.
            </summary>
        </member>
        <member name="E:osu.Game.Online.API.APIRequest.Success">
            <summary>
            Invoked on successful completion of an API request.
            This will be scheduled to the API's internal scheduler (run on update thread automatically).
            </summary>
        </member>
        <member name="E:osu.Game.Online.API.APIRequest.Failure">
            <summary>
            Invoked on failure to complete an API request.
            This will be scheduled to the API's internal scheduler (run on update thread automatically).
            </summary>
        </member>
        <member name="M:osu.Game.Online.API.APIRequest.PostProcess">
            <summary>
            Perform any post-processing actions after a successful request.
            </summary>
        </member>
        <member name="M:osu.Game.Online.API.APIRequest.checkAndScheduleFailure">
            <summary>
            Checked for cancellation or error. Also queues up the Failed event if we can.
            </summary>
            <returns>Whether we are in a failed or cancelled state.</returns>
        </member>
        <member name="F:osu.Game.Online.API.DummyAPIAccess.HandleRequest">
            <summary>
            Provide handling logic for an arbitrary API request.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.IAPIProvider.LocalUser">
            <summary>
            The local user.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.IAPIProvider.Activity">
            <summary>
            The current user's activity.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.IAPIProvider.IsLoggedIn">
            <summary>
            Returns whether the local user is logged in.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.IAPIProvider.ProvidedUsername">
            <summary>
            The last username provided by the end-user.
            May not be authenticated.
            </summary>
        </member>
        <member name="P:osu.Game.Online.API.IAPIProvider.Endpoint">
            <summary>
            The URL endpoint for this API. Does not include a trailing slash.
            </summary>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.Queue(osu.Game.Online.API.APIRequest)">
            <summary>
            Queue a new request.
            </summary>
            <param name="request">The request to perform.</param>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.Perform(osu.Game.Online.API.APIRequest)">
            <summary>
            Perform a request immediately, bypassing any API state checks.
            </summary>
            <remarks>
            Can be used to run requests as a guest user.
            </remarks>
            <param name="request">The request to perform.</param>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.PerformAsync(osu.Game.Online.API.APIRequest)">
            <summary>
            Perform a request immediately, bypassing any API state checks.
            </summary>
            <remarks>
            Can be used to run requests as a guest user.
            </remarks>
            <param name="request">The request to perform.</param>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.Register(osu.Game.Online.API.IOnlineComponent)">
            <summary>
            Register a component to receive state changes.
            </summary>
            <param name="component">The component to register.</param>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.Unregister(osu.Game.Online.API.IOnlineComponent)">
            <summary>
            Unregisters a component to receive state changes.
            </summary>
            <param name="component">The component to unregister.</param>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.Login(System.String,System.String)">
            <summary>
            Attempt to login using the provided credentials. This is a non-blocking operation.
            </summary>
            <param name="username">The user's username.</param>
            <param name="password">The user's password.</param>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.Logout">
            <summary>
            Log out the current user.
            </summary>
        </member>
        <member name="M:osu.Game.Online.API.IAPIProvider.CreateAccount(System.String,System.String,System.String)">
            <summary>
            Create a new user account. This is a blocking operation.
            </summary>
            <param name="email">The email to create the account with.</param>
            <param name="username">The username to create the account with.</param>
            <param name="password">The password to create the account with.</param>
            <returns>Any errors encoutnered during account creation.</returns>
        </member>
        <member name="M:osu.Game.Online.API.OAuth.ensureAccessToken">
            <summary>
            Should be run before any API request to make sure we have a valid key.
            </summary>
        </member>
        <member name="F:osu.Game.Online.API.OAuthToken.AccessToken">
            <summary>
            OAuth 2.0 access token.
            </summary>
        </member>
        <member name="F:osu.Game.Online.API.OAuthToken.RefreshToken">
            <summary>
            OAuth 2.0 refresh token.
            </summary>
        </member>
        <member name="T:osu.Game.Online.API.Requests.Cursor">
            <summary>
            A collection of parameters which should be passed to the search endpoint to fetch the next page.
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.Channel.Users">
            <summary>
            Contains every joined user except the current logged in user. Currently only returned for PM channels.
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.Channel.Messages">
            <summary>
            Contains all the messages send in the channel.
            </summary>
        </member>
        <member name="P:osu.Game.Online.Chat.Channel.UnreadMessages">
            <summary>
            Contains all the messages that weren't read by the user.
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.Channel.pendingMessages">
            <summary>
            Contains all the messages that are still pending for submission to the server.
            </summary>
        </member>
        <member name="E:osu.Game.Online.Chat.Channel.NewMessagesArrived">
            <summary>
            An event that fires when new messages arrived.
            </summary>
        </member>
        <member name="E:osu.Game.Online.Chat.Channel.PendingMessageResolved">
            <summary>
            An event that fires when a pending message gets resolved.
            </summary>
        </member>
        <member name="E:osu.Game.Online.Chat.Channel.MessageRemoved">
            <summary>
            An event that fires when a pending message gets removed.
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.Channel.Joined">
            <summary>
            Signalles if the current user joined this channel or not. Defaults to false.
            </summary>
        </member>
        <member name="M:osu.Game.Online.Chat.Channel.#ctor(osu.Game.Users.User)">
            <summary>
            Create a private messaging channel with the specified user.
            </summary>
            <param name="user">The user to create the private conversation with.</param>
        </member>
        <member name="M:osu.Game.Online.Chat.Channel.AddLocalEcho(osu.Game.Online.Chat.LocalEchoMessage)">
            <summary>
            Adds the argument message as a local echo. When this local echo is resolved <see cref="E:osu.Game.Online.Chat.Channel.PendingMessageResolved"/> will get called.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:osu.Game.Online.Chat.Channel.AddNewMessages(osu.Game.Online.Chat.Message[])">
            <summary>
            Adds new messages to the channel and purges old messages. Triggers the <see cref="E:osu.Game.Online.Chat.Channel.NewMessagesArrived"/> event.
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:osu.Game.Online.Chat.Channel.ReplaceMessage(osu.Game.Online.Chat.LocalEchoMessage,osu.Game.Online.Chat.Message)">
            <summary>
            Replace or remove a message from the channel.
            </summary>
            <param name="echo">The local echo message (client-side).</param>
            <param name="final">The response message, or null if the message became invalid.</param>
        </member>
        <member name="T:osu.Game.Online.Chat.ChannelManager">
            <summary>
            Manages everything channel related
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.ChannelManager.defaultChannels">
            <summary>
            The channels the player joins on startup
            </summary>
        </member>
        <member name="P:osu.Game.Online.Chat.ChannelManager.CurrentChannel">
            <summary>
            The currently opened channel
            </summary>
        </member>
        <member name="P:osu.Game.Online.Chat.ChannelManager.JoinedChannels">
            <summary>
            The Channels the player has joined
            </summary>
        </member>
        <member name="P:osu.Game.Online.Chat.ChannelManager.AvailableChannels">
            <summary>
            The channels available for the player to join
            </summary>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.OpenChannel(System.String)">
            <summary>
            Opens a channel or switches to the channel if already opened.
            </summary>
            <exception cref="T:osu.Game.Online.Chat.ChannelNotFoundException">If the name of the specifed channel was not found this exception will be thrown.</exception>
            <param name="name"></param>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.OpenPrivateChannel(osu.Game.Users.User)">
            <summary>
            Opens a new private channel.
            </summary>
            <param name="user">The user the private channel is opened with.</param>
        </member>
        <member name="F:osu.Game.Online.Chat.ChannelManager.postQueue">
            <summary>
            Ensure we run post actions in sequence, once at a time.
            </summary>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.PostMessage(System.String,System.Boolean,osu.Game.Online.Chat.Channel)">
            <summary>
            Posts a message to the currently opened channel.
            </summary>
            <param name="text">The message text that is going to be posted</param>
            <param name="isAction">Is true if the message is an action, e.g.: user is currently eating </param>
            <param name="target">An optional target channel. If null, <see cref="P:osu.Game.Online.Chat.ChannelManager.CurrentChannel"/> will be used.</param>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.PostCommand(System.String,osu.Game.Online.Chat.Channel)">
            <summary>
            Posts a command locally. Commands like /help will result in a help message written in the current channel.
            </summary>
            <param name="text">the text containing the command identifier and command parameters.</param>
            <param name="target">An optional target channel. If null, <see cref="P:osu.Game.Online.Chat.ChannelManager.CurrentChannel"/> will be used.</param>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.fetchInitalMessages(osu.Game.Online.Chat.Channel)">
             <summary>
             Fetches inital messages of a channel
            
             TODO: remove this when the API supports returning initial fetch messages for more than one channel by specifying the last message id per channel instead of one last message id globally.
             right now it caps out at 50 messages and therefore only returns one channel's worth of content.
             </summary>
             <param name="channel">The channel </param>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.getChannel(osu.Game.Online.Chat.Channel,System.Boolean,System.Boolean)">
            <summary>
            Find an existing channel instance for the provided channel. Lookup is performed basd on ID.
            The provided channel may be used if an existing instance is not found.
            </summary>
            <param name="lookup">A candidate channel to be used for lookup or permanently on lookup failure.</param>
            <param name="addToAvailable">Whether the channel should be added to <see cref="P:osu.Game.Online.Chat.ChannelManager.AvailableChannels"/> if not already.</param>
            <param name="addToJoined">Whether the channel should be added to <see cref="P:osu.Game.Online.Chat.ChannelManager.JoinedChannels"/> if not already.</param>
            <returns>The found channel.</returns>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.JoinChannel(osu.Game.Online.Chat.Channel,System.Boolean)">
            <summary>
            Joins a channel if it has not already been joined.
            </summary>
            <param name="channel">The channel to join.</param>
            <param name="alreadyJoined">Whether the channel has already been joined server-side. Will skip a join request.</param>
            <returns>The joined channel. Note that this may not match the parameter channel as it is a backed object.</returns>
        </member>
        <member name="M:osu.Game.Online.Chat.ChannelManager.MarkChannelAsRead(osu.Game.Online.Chat.Channel)">
            <summary>
            Marks the <paramref name="channel"/> as read
            </summary>
            <param name="channel">The channel that will be marked as read</param>
        </member>
        <member name="T:osu.Game.Online.Chat.ChannelNotFoundException">
            <summary>
            An exception thrown when a channel could not been found.
            </summary>
        </member>
        <member name="T:osu.Game.Online.Chat.DrawableLinkCompiler">
            <summary>
            An invisible drawable that brings multiple <see cref="T:osu.Framework.Graphics.Drawable"/> pieces together to form a consumable clickable link.
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.DrawableLinkCompiler.Parts">
            <summary>
            Each word part of a chat link (split for word-wrap support).
            </summary>
        </member>
        <member name="M:osu.Game.Online.Chat.IChannelPostTarget.PostMessage(System.String,System.Boolean,osu.Game.Online.Chat.Channel)">
            <summary>
            Posts a message to the currently opened channel.
            </summary>
            <param name="text">The message text that is going to be posted</param>
            <param name="isAction">Is true if the message is an action, e.g.: user is currently eating </param>
            <param name="target">An optional target channel. If null, <see cref="P:osu.Game.Online.Chat.ChannelManager.CurrentChannel"/> will be used.</param>
        </member>
        <member name="T:osu.Game.Online.Chat.LocalMessage">
            <summary>
            A message which is generated and displayed locally.
            </summary>
        </member>
        <member name="P:osu.Game.Online.Chat.Message.DisplayContent">
            <summary>
            The text that is displayed in chat.
            </summary>
        </member>
        <member name="F:osu.Game.Online.Chat.Message.Links">
            <summary>
            The links found in this message.
            </summary>
            <remarks>The <see cref="T:osu.Game.Online.Chat.Link"/>s' <see cref="F:osu.Game.Online.Chat.Link.Index"/> and <see cref="F:osu.Game.Online.Chat.Link.Length"/>s are according to <see cref="P:osu.Game.Online.Chat.Message.DisplayContent"/></remarks>
        </member>
        <member name="T:osu.Game.Online.Chat.StandAloneChatDisplay">
            <summary>
            Display a chat channel in an insolated region.
            </summary>
        </member>
        <member name="M:osu.Game.Online.Chat.StandAloneChatDisplay.#ctor(System.Boolean)">
            <summary>
            Construct a new instance.
            </summary>
            <param name="postingTextbox">Whether a textbox for posting new messages should be displayed.</param>
        </member>
        <member name="T:osu.Game.Online.DownloadTrackingComposite`2">
            <summary>
            A component which tracks a <typeparamref name="TModel"/> through potential download/import/deletion.
            </summary>
        </member>
        <member name="F:osu.Game.Online.DownloadTrackingComposite`2.State">
            <summary>
            Holds the current download state of the <typeparamref name="TModel"/>, whether is has already been downloaded, is in progress, or is not downloaded.
            </summary>
        </member>
        <member name="M:osu.Game.Online.Leaderboards.DrawableRank.getRankNameColour">
            <summary>
             Retrieves the grade text colour.
            </summary>
        </member>
        <member name="P:osu.Game.Online.Leaderboards.Leaderboard`2.PlaceholderState">
            <summary>
            Update the placeholder visibility.
            Setting this to anything other than PlaceholderState.Successful will cancel all existing retrieval requests and hide scores.
            </summary>
        </member>
        <member name="M:osu.Game.Online.Leaderboards.Leaderboard`2.FetchScores(System.Action{System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Performs a fetch/refresh of scores to be displayed.
            </summary>
            <param name="scoresCallback">A callback which should be called when fetching is completed. Scheduling is not required.</param>
            <returns>An <see cref="T:osu.Game.Online.API.APIRequest"/> responsible for the fetch operation. This will be queued and performed automatically.</returns>
        </member>
        <member name="P:osu.Game.Online.Multiplayer.Room.Position">
            <summary>
            The position of this <see cref="T:osu.Game.Online.Multiplayer.Room"/> in the list. This is not read from or written to the API.
            </summary>
        </member>
        <member name="T:osu.Game.Online.OnlineViewContainer">
            <summary>
            A <see cref="T:osu.Framework.Graphics.Containers.Container"/> for displaying online content which require a local user to be logged in.
            Shows its children only when the local user is logged in and supports displaying a placeholder if not.
            </summary>
        </member>
        <member name="M:osu.Game.Online.OnlineViewContainer.PopContentOut(osu.Framework.Graphics.Drawable)">
            <summary>
            Applies a transform to the online content to make it hidden.
            </summary>
        </member>
        <member name="M:osu.Game.Online.OnlineViewContainer.PopContentIn(osu.Framework.Graphics.Drawable)">
            <summary>
            Applies a transform to the online content to make it visible.
            </summary>
        </member>
        <member name="T:osu.Game.Online.PollingComponent">
            <summary>
            A component which requires a constant polling process.
            </summary>
        </member>
        <member name="P:osu.Game.Online.PollingComponent.TimeBetweenPolls">
            <summary>
            The time in milliseconds to wait between polls.
            Setting to zero stops all polling.
            </summary>
        </member>
        <member name="M:osu.Game.Online.PollingComponent.#ctor(System.Double)">
             <summary>
            
             </summary>
             <param name="timeBetweenPolls">The initial time in milliseconds to wait between polls. Setting to zero stops all polling.</param>
        </member>
        <member name="M:osu.Game.Online.PollingComponent.Poll">
            <summary>
            Performs a poll. Implement but do not call this.
            </summary>
        </member>
        <member name="M:osu.Game.Online.PollingComponent.PollImmediately">
            <summary>
            Immediately performs a <see cref="M:osu.Game.Online.PollingComponent.Poll"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Online.PollingComponent.pollComplete">
            <summary>
            Call when a poll operation has completed.
            </summary>
        </member>
        <member name="T:osu.Game.OsuGame">
            <summary>
            The full osu! experience. Builds on top of <see cref="T:osu.Game.OsuGameBase"/> to add menus and binding logic
            for initial components that are generally retrieved via DI.
            </summary>
        </member>
        <member name="M:osu.Game.OsuGame.CloseAllOverlays(System.Boolean)">
            <summary>
            Close all game-wide overlays.
            </summary>
            <param name="hideToolbar">Whether the toolbar should also be hidden.</param>
        </member>
        <member name="M:osu.Game.OsuGame.HandleLink(System.String)">
            <summary>
            Handle an arbitrary URL. Displays via in-game overlays where possible.
            This can be called from a non-thread-safe non-game-loaded state.
            </summary>
            <param name="url">The URL to load.</param>
        </member>
        <member name="M:osu.Game.OsuGame.HandleLink(osu.Game.Online.Chat.LinkDetails)">
            <summary>
            Handle a specific <see cref="T:osu.Game.Online.Chat.LinkDetails"/>.
            This can be called from a non-thread-safe non-game-loaded state.
            </summary>
            <param name="link">The link to load.</param>
        </member>
        <member name="M:osu.Game.OsuGame.ShowChannel(System.String)">
            <summary>
            Open a specific channel in chat.
            </summary>
            <param name="channel">The channel to display.</param>
        </member>
        <member name="M:osu.Game.OsuGame.ShowBeatmapSet(System.Int32)">
            <summary>
            Show a beatmap set as an overlay.
            </summary>
            <param name="setId">The set to display.</param>
        </member>
        <member name="M:osu.Game.OsuGame.ShowUser(System.Int64)">
            <summary>
            Show a user's profile as an overlay.
            </summary>
            <param name="userId">The user to display.</param>
        </member>
        <member name="M:osu.Game.OsuGame.ShowBeatmap(System.Int32)">
            <summary>
            Show a beatmap's set as an overlay, displaying the given beatmap.
            </summary>
            <param name="beatmapId">The beatmap to show.</param>
        </member>
        <member name="M:osu.Game.OsuGame.PresentBeatmap(osu.Game.Beatmaps.BeatmapSetInfo,System.Predicate{osu.Game.Beatmaps.BeatmapInfo})">
            <summary>
            Present a beatmap at song select immediately.
            The user should have already requested this interactively.
            </summary>
            <param name="beatmap">The beatmap to select.</param>
            <param name="difficultyCriteria">
            Optional predicate used to try and find a difficulty to select.
            If omitted, this will try to present the first beatmap from the current ruleset.
            In case of failure the first difficulty of the set will be presented, ignoring the predicate.
            </param>
        </member>
        <member name="M:osu.Game.OsuGame.PresentScore(osu.Game.Scoring.ScoreInfo)">
            <summary>
            Present a score's replay immediately.
            The user should have already requested this interactively.
            </summary>
        </member>
        <member name="M:osu.Game.OsuGame.PerformFromScreen(System.Action{osu.Framework.Screens.IScreen},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Perform an action only after returning to a specific screen as indicated by <paramref name="validScreens"/>.
            Eagerly tries to exit the current screen until it succeeds.
            </summary>
            <param name="action">The action to perform once we are in the correct state.</param>
            <param name="validScreens">An optional collection of valid screen types. If any of these screens are already current we can perform the action immediately, else the first valid parent will be made current before performing the action. <see cref="T:osu.Game.Screens.Menu.MainMenu"/> is used if not specified.</param>
        </member>
        <member name="M:osu.Game.OsuGame.waitForReady``1(System.Func{``0},System.Action{``0})">
            <summary>
            Wait for the game (and target component) to become loaded and then run an action.
            </summary>
            <param name="retrieveInstance">A function to retrieve a (potentially not-yet-constructed) target instance.</param>
            <param name="action">The action to perform on the instance when load is confirmed.</param>
            <typeparam name="T">The type of the target instance.</typeparam>
        </member>
        <member name="M:osu.Game.OsuGame.loadComponentSingleFile``1(``0,System.Action{``0},System.Boolean)">
            <summary>
            Queues loading the provided component in sequential fashion.
            This operation is limited to a single thread to avoid saturating all cores.
            </summary>
            <param name="component">The component to load.</param>
            <param name="loadCompleteAction">An action to invoke on load completion (generally to add the component to the hierarchy).</param>
            <param name="cache">Whether to cache the component as type <typeparamref name="T"/> into the game dependencies before any scheduling.</param>
        </member>
        <member name="M:osu.Game.OsuGame.GracefullyExit">
            <summary>
            Use to programatically exit the game as if the user was triggering via alt-f4.
            Will keep persisting until an exit occurs (exit may be blocked multiple times).
            </summary>
        </member>
        <member name="T:osu.Game.OsuGameBase">
            <summary>
            The most basic <see cref="N:osu.Game"/> that can be used to host osu! components and systems.
            Unlike <see cref="T:osu.Game.OsuGame"/>, this class will not load any kind of UI, allowing it to be used
            for provide dependencies to test cases without interfering with them.
            </summary>
        </member>
        <member name="F:osu.Game.OsuGameBase.AvailableMods">
            <summary>
            Mods available for the current <see cref="F:osu.Game.OsuGameBase.Ruleset"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.BeatmapListing.BeatmapListingFilterControl.SearchFinished">
            <summary>
            Fired when a search finishes. Contains only new items in the case of pagination.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.BeatmapListing.BeatmapListingFilterControl.SearchStarted">
            <summary>
            Fired when search criteria change.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.BeatmapListing.BeatmapListingFilterControl.noMoreResults">
            <summary>
            True when pagination has reached the end of available results.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.BeatmapListing.BeatmapListingFilterControl.CurrentPage">
            <summary>
            The current page fetched of results (zero index).
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.BeatmapListing.BeatmapListingFilterControl.FetchNextPage">
            <summary>
            Fetch the next page of results. May result in a no-op if a fetch is already in progress, or if there are no results left.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.BeatmapListing.Panels.BeatmapPanelDownloadButton.SelectedBeatmap">
            <summary>
            Currently selected beatmap. Used to present the correct difficulty after completing a download.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.BeatmapSetOverlay.ShowBeatmapSet(osu.Game.Beatmaps.BeatmapSetInfo)">
            <summary>
            Show an already fully-populated beatmap set.
            </summary>
            <param name="set">The set to show.</param>
        </member>
        <member name="P:osu.Game.Overlays.BeatmapSet.Scores.TopScoreStatisticsSection.Score">
            <summary>
            Sets the score to be displayed.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.BeatmapSet.Scores.TopScoreUserSection.Score">
            <summary>
            Sets the score to be displayed.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.ChangelogOverlay.ShowBuild(osu.Game.Online.API.Requests.Responses.APIChangelogBuild)">
            <summary>
            Fetches and shows a specific build from a specific update stream.
            </summary>
            <param name="build">Must contain at least <see cref="P:osu.Game.Online.API.Requests.Responses.APIUpdateStream.Name"/> and
            <see cref="P:osu.Game.Online.API.Requests.Responses.APIChangelogBuild.Version"/>. If <see cref="P:osu.Game.Online.API.Requests.Responses.APIUpdateStream.DisplayName"/> and
            <see cref="P:osu.Game.Online.API.Requests.Responses.APIChangelogBuild.DisplayVersion"/> are specified, the header will instantly display them.</param>
        </member>
        <member name="M:osu.Game.Overlays.Chat.Tabs.ChannelTabControl.AddChannel(osu.Game.Online.Chat.Channel)">
            <summary>
            Adds a channel to the ChannelTabControl.
            The first channel added will automaticly selected.
            </summary>
            <param name="channel">The channel that is going to be added.</param>
        </member>
        <member name="M:osu.Game.Overlays.Chat.Tabs.ChannelTabControl.RemoveChannel(osu.Game.Online.Chat.Channel)">
            <summary>
            Removes a channel from the ChannelTabControl.
            If the selected channel is the one that is being removed, the next available channel will be selected.
            </summary>
            <param name="channel">The channel that is going to be removed.</param>
        </member>
        <member name="M:osu.Game.Overlays.Comments.CommentsContainer.ShowComments(osu.Game.Online.API.Requests.CommentableType,System.Int64)">
            <param name="type">The type of resource to get comments for.</param>
            <param name="id">The id of the resource to get comments for.</param>
        </member>
        <member name="M:osu.Game.Overlays.Comments.CommentsPage.AppendComments(osu.Game.Online.API.Requests.Responses.CommentBundle)">
            <summary>
            Appends retrieved comments to the subtree rooted of comments in this page.
            </summary>
            <param name="bundle">The bundle of comments to add.</param>
        </member>
        <member name="T:osu.Game.Overlays.HoldToConfirmOverlay">
            <summary>
            An overlay which will display a black screen that dims over a period before confirming an exit action.
            Action is BYO (derived class will need to call <see cref="M:osu.Game.Graphics.Containers.HoldToConfirmContainer.BeginConfirm"/> and <see cref="M:osu.Game.Graphics.Containers.HoldToConfirmContainer.AbortConfirm"/> from a user event).
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.LoginOverlay.GetToolbarHeight">
            <summary>
            Provide a source for the toolbar height.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.Mods.ModButton">
            <summary>
            Represents a clickable button which can cycle through one of more mods.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.Mods.ModButton.SelectionChanged">
            <summary>
            Fired when the selection changes.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.Mods.ModButton.changeSelectedIndex(System.Int32)">
            <summary>
            Change the selected mod index of this button.
            </summary>
            <param name="newIndex">The new index.</param>
            <returns>Whether the selection changed.</returns>
        </member>
        <member name="M:osu.Game.Overlays.Mods.ModButton.SelectNext(System.Int32)">
            <summary>
            Select the next available mod in a specified direction.
            </summary>
            <param name="direction">1 for forwards, -1 for backwards.</param>
        </member>
        <member name="T:osu.Game.Overlays.Mods.ModButtonEmpty">
            <summary>
            A mod button used exclusively for providing an empty space the size of a mod button.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.Mods.ModSection.ModIconsLoaded">
            <summary>
            True when all mod icons have completed loading.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.Mods.ModSection.DeselectTypes(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Deselect one or more mods in this section.
            </summary>
            <param name="modTypes">The types of <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s which should be deselected.</param>
            <param name="immediate">Set to true to bypass animations and update selections immediately.</param>
        </member>
        <member name="M:osu.Game.Overlays.Mods.ModSection.SelectTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Select one or more mods in this section and deselects all other ones.
            </summary>
            <param name="modTypes">The types of <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s which should be selected.</param>
        </member>
        <member name="M:osu.Game.Overlays.Mods.ModSelectOverlay.DeselectTypes(System.Type[],System.Boolean)">
            <summary>
            Deselect one or more mods.
            </summary>
            <param name="modTypes">The types of <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s which should be deselected.</param>
            <param name="immediate">Set to true to bypass animations and update selections immediately.</param>
        </member>
        <member name="T:osu.Game.Overlays.MusicController">
            <summary>
            Handles playback of the global music track.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.MusicController.restart_cutoff_point">
            <summary>
            Point in time after which the current track will be restarted on triggering a "previous track" action.
            </summary>
        </member>
        <member name="E:osu.Game.Overlays.MusicController.TrackChanged">
            <summary>
            Fired when the global <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> has changed.
            Includes direction information for display purposes.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.ChangeBeatmapSetPosition(osu.Game.Beatmaps.BeatmapSetInfo,System.Int32)">
            <summary>
            Change the position of a <see cref="T:osu.Game.Beatmaps.BeatmapSetInfo"/> in the current playlist.
            </summary>
            <param name="beatmapSetInfo">The beatmap to move.</param>
            <param name="index">The new position.</param>
        </member>
        <member name="P:osu.Game.Overlays.MusicController.IsPlaying">
            <summary>
            Returns whether the current beatmap track is playing.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.Play(System.Boolean)">
            <summary>
            Start playing the current track (if not already playing).
            </summary>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.Stop">
            <summary>
            Stop playing the current track and pause at the current position.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.TogglePause">
            <summary>
            Toggle pause / play.
            </summary>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.PreviousTrack">
            <summary>
            Play the previous track or restart the current track if it's current time below <see cref="F:osu.Game.Overlays.MusicController.restart_cutoff_point"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.prev">
            <summary>
            Play the previous track or restart the current track if it's current time below <see cref="F:osu.Game.Overlays.MusicController.restart_cutoff_point"/>.
            </summary>
            <returns>The <see cref="T:osu.Game.Overlays.PreviousTrackResult"/> that indicate the decided action.</returns>
        </member>
        <member name="M:osu.Game.Overlays.MusicController.NextTrack">
            <summary>
            Play the next random or playlist track.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.MusicController.AllowRateAdjustments">
            <summary>
            Whether mod rate adjustments are allowed to be applied.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.NotificationOverlay.GetToolbarHeight">
            <summary>
            Provide a source for the toolbar height.
            </summary>
        </member>
        <member name="E:osu.Game.Overlays.Notifications.Notification.Closed">
            <summary>
            User requested close.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.Notifications.Notification.IsImportant">
            <summary>
            Whether this notification should forcefully display itself.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.Notifications.Notification.Activated">
            <summary>
            Run on user activating the notification. Return true to close.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.Notifications.Notification.DisplayOnTop">
            <summary>
            Should we show at the top of our section on display?
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.Notifications.ProgressNotification.CompletionTarget">
            <summary>
            The function to post completion notifications back to.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.Notifications.ProgressNotification.CompletionClickAction">
            <summary>
            An action to complete when the completion notification is clicked. Return true to close.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.NowPlayingOverlay.GetToolbarHeight">
            <summary>
            Provide a source for the toolbar height.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.OnScreenDisplay">
            <summary>
            An on-screen display which automatically tracks and displays toast notifications for <seealso cref="T:osu.Framework.Configuration.Tracking.TrackedSettings"/>.
            Can also display custom content via <see cref="M:osu.Game.Overlays.OnScreenDisplay.Display(osu.Game.Overlays.OSD.Toast)"/>
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.OnScreenDisplay.BeginTracking(System.Object,osu.Framework.Configuration.Tracking.ITrackableConfigManager)">
            <summary>
            Registers a <see cref="T:osu.Framework.Configuration.ConfigManager`1"/> to have its settings tracked by this <see cref="T:osu.Game.Overlays.OnScreenDisplay"/>.
            </summary>
            <param name="source">The object that is registering the <see cref="T:osu.Framework.Configuration.ConfigManager`1"/> to be tracked.</param>
            <param name="configManager">The <see cref="T:osu.Framework.Configuration.ConfigManager`1"/> to be tracked.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="configManager"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="configManager"/> is already being tracked from the same <paramref name="source"/>.</exception>
        </member>
        <member name="M:osu.Game.Overlays.OnScreenDisplay.StopTracking(System.Object,osu.Framework.Configuration.Tracking.ITrackableConfigManager)">
            <summary>
            Unregisters a <see cref="T:osu.Framework.Configuration.ConfigManager`1"/> from having its settings tracked by this <see cref="T:osu.Game.Overlays.OnScreenDisplay"/>.
            </summary>
            <param name="source">The object that registered the <see cref="T:osu.Framework.Configuration.ConfigManager`1"/> to be tracked.</param>
            <param name="configManager">The <see cref="T:osu.Framework.Configuration.ConfigManager`1"/> that is being tracked.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="configManager"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="configManager"/> is not being tracked from the same <paramref name="source"/>.</exception>
        </member>
        <member name="M:osu.Game.Overlays.OnScreenDisplay.Display(osu.Game.Overlays.OSD.Toast)">
            <summary>
            Displays the provided <see cref="T:osu.Game.Overlays.OSD.Toast"/> temporarily.
            </summary>
            <param name="toast"></param>
        </member>
        <member name="M:osu.Game.Overlays.OverlayHeader.CreateTitleContent">
            <summary>
            Creates a <see cref="T:osu.Framework.Graphics.Drawable"/> on the opposite side of the <see cref="T:osu.Game.Overlays.OverlayTitle"/>. Used mostly to create <see cref="T:osu.Game.Overlays.OverlayRulesetSelector"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.OverlayScrollContainer">
            <summary>
            <see cref="T:osu.Game.Graphics.Containers.OsuScrollContainer"/> which provides <see cref="T:osu.Game.Overlays.OverlayScrollContainer.ScrollToTopButton"/>. Mostly used in <see cref="T:osu.Game.Overlays.FullscreenOverlay"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.OverlayScrollContainer.button_scroll_position">
            <summary>
            Scroll position at which the <see cref="T:osu.Game.Overlays.OverlayScrollContainer.ScrollToTopButton"/> will be shown.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.OverlayView`1">
            <summary>
            A subview containing online content, to be displayed inside a <see cref="T:osu.Game.Overlays.FullscreenOverlay"/>.
            </summary>
            <remarks>
            Automatically performs a data fetch on load.
            </remarks>
            <typeparam name="T">The type of the API response.</typeparam>
        </member>
        <member name="M:osu.Game.Overlays.OverlayView`1.CreateRequest">
            <summary>
            Create the API request for fetching data.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.OverlayView`1.OnSuccess(`0)">
            <summary>
            Fired when results arrive from the main API request.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:osu.Game.Overlays.OverlayView`1.PerformFetch">
            <summary>
            Force a re-request for data from the API.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.Profile.Sections.BeatmapMetadataContainer">
            <summary>
            Display artist/title/mapper information, commonly used as the left portion of a profile or score display row.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.SearchableList.SearchableListFilterControl`2.ContentHorizontalPadding">
            <summary>
            The amount of padding added to content (does not affect background or tab control strip).
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.SettingsPanel.GetToolbarHeight">
            <summary>
            Provide a source for the toolbar height.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.Settings.DangerousSettingsButton">
            <summary>
            A <see cref="T:osu.Game.Overlays.Settings.SettingsButton"/> with pink colours to mark dangerous/destructive actions.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.Settings.RulesetSettingsSubsection">
            <summary>
            A <see cref="T:osu.Game.Overlays.Settings.SettingsSubsection"/> which provides subclasses with the <see cref="T:osu.Game.Rulesets.Configuration.IRulesetConfigManager"/>
            from the <see cref="T:osu.Game.Rulesets.Ruleset"/>'s <see cref="M:osu.Game.Rulesets.Ruleset.CreateConfig(osu.Game.Configuration.SettingsStore)"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Overlays.Settings.Sections.General.LoginSettings.RequestHide">
            <summary>
            Called to request a hide of a parent displaying this container.
            </summary>
        </member>
        <member name="M:osu.Game.Overlays.Settings.Sections.Graphics.LayoutSettings.bindPreviewEvent(osu.Framework.Bindables.Bindable{System.Single})">
            <summary>
            Create a delayed bindable which only updates when a condition is met.
            </summary>
            <param name="bindable">The config bindable.</param>
            <returns>A bindable which will propagate updates with a delay.</returns>
        </member>
        <member name="P:osu.Game.Overlays.Settings.SettingsSlider`2.TransferValueOnCommit">
            <summary>
            When set, value changes based on user input are only transferred to any bound control's Current on commit.
            This is useful if the UI interaction could be adversely affected by the value changing, such as the position of the <see cref="T:osu.Framework.Graphics.UserInterface.SliderBar`1"/> on the screen.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.Settings.SettingsSlider`2.KeyboardStep">
            <summary>
            A custom step value for each key press which actuates a change on this control.
            </summary>
        </member>
        <member name="P:osu.Game.Overlays.Settings.SettingsSlider`2.DisplayAsPercentage">
            <summary>
            Whether to format the tooltip as a percentage or the actual value.
            </summary>
        </member>
        <member name="T:osu.Game.Overlays.TabControlOverlayHeader`1">
            <summary>
            An overlay header which contains a <see cref="T:osu.Game.Graphics.UserInterface.OsuTabControl`1"/>.
            </summary>
            <typeparam name="T">The type of item to be represented by tabs.</typeparam>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.DifficultyCalculator.SectionLength">
            <summary>
            The length of each strain section.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.DifficultyCalculator.Calculate(osu.Game.Rulesets.Mods.Mod[])">
            <summary>
            Calculates the difficulty of the beatmap using a specific mod combination.
            </summary>
            <param name="mods">The mods that should be applied to the beatmap.</param>
            <returns>A structure describing the difficulty of the beatmap.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.DifficultyCalculator.CalculateAll">
            <summary>
            Calculates the difficulty of the beatmap using all mod combinations applicable to the beatmap.
            </summary>
            <returns>A collection of structures describing the difficulty of the beatmap for each mod combination.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.DifficultyCalculator.CreateDifficultyAdjustmentModCombinations">
            <summary>
            Creates all <see cref="T:osu.Game.Rulesets.Mods.Mod"/> combinations which adjust the <see cref="T:osu.Game.Beatmaps.Beatmap"/> difficulty.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.DifficultyCalculator.DifficultyAdjustmentMods">
            <summary>
            Retrieves all <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s which adjust the <see cref="T:osu.Game.Beatmaps.Beatmap"/> difficulty.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.DifficultyCalculator.CreateDifficultyAttributes(osu.Game.Beatmaps.IBeatmap,osu.Game.Rulesets.Mods.Mod[],osu.Game.Rulesets.Difficulty.Skills.Skill[],System.Double)">
            <summary>
            Creates <see cref="T:osu.Game.Rulesets.Difficulty.DifficultyAttributes"/> to describe beatmap's calculated difficulty.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> whose difficulty was calculated.</param>
            <param name="mods">The <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s that difficulty was calculated with.</param>
            <param name="skills">The skills which processed the beatmap.</param>
            <param name="clockRate">The rate at which the gameplay clock is run at.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.DifficultyCalculator.CreateDifficultyHitObjects(osu.Game.Beatmaps.IBeatmap,System.Double)">
            <summary>
            Enumerates <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>s to be processed from <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s in the <see cref="T:osu.Game.Beatmaps.IBeatmap"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> providing the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s to enumerate.</param>
            <param name="clockRate">The rate at which the gameplay clock is run at.</param>
            <returns>The enumerated <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>s.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.DifficultyCalculator.CreateSkills(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Difficulty.Skills.Skill"/>s to calculate the difficulty of an <see cref="T:osu.Game.Beatmaps.IBeatmap"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> whose difficulty will be calculated.</param>
            <returns>The <see cref="T:osu.Game.Rulesets.Difficulty.Skills.Skill"/>s.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject">
            <summary>
            Wraps a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> and provides additional information to be used for difficulty calculation.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.BaseObject">
            <summary>
            The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> this <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/> wraps.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.LastObject">
            <summary>
            The last <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> which occurs before <see cref="F:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.BaseObject"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.DeltaTime">
            <summary>
            Amount of time elapsed between <see cref="F:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.BaseObject"/> and <see cref="F:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.LastObject"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject.#ctor(osu.Game.Rulesets.Objects.HitObject,osu.Game.Rulesets.Objects.HitObject,System.Double)">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> which this <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/> wraps.</param>
            <param name="lastObject">The last <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> which occurs before <paramref name="hitObject"/> in the beatmap.</param>
            <param name="clockRate">The rate at which the gameplay clock is run at.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Difficulty.Skills.Skill">
            <summary>
            Used to processes strain values of <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>s, keep track of strain levels caused by the processed objects
            and to calculate a final difficulty value representing the difficulty of hitting all the processed objects.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.Skills.Skill.StrainPeaks">
            <summary>
            The peak strain for each <see cref="P:osu.Game.Rulesets.Difficulty.DifficultyCalculator.SectionLength"/> section of the beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.Skills.Skill.SkillMultiplier">
            <summary>
            Strain values are multiplied by this number for the given skill. Used to balance the value of different skills between each other.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.Skills.Skill.StrainDecayBase">
            <summary>
            Determines how quickly strain decays for the given skill.
            For example a value of 0.15 indicates that strain decays to 15% of its original value in one second.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.Skills.Skill.DecayWeight">
            <summary>
            The weight by which each strain value decays.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Difficulty.Skills.Skill.Previous">
            <summary>
            <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>s that were processed previously. They can affect the strain values of the following objects.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Skills.Skill.Process(osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject)">
            <summary>
            Process a <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/> and update current strain values accordingly.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Skills.Skill.SaveCurrentPeak">
            <summary>
            Saves the current peak strain level to the list of strain peaks, which will be used to calculate an overall difficulty.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Skills.Skill.StartNewSectionFrom(System.Double)">
            <summary>
            Sets the initial strain level for a new section.
            </summary>
            <param name="offset">The beginning of the new section in milliseconds.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Skills.Skill.DifficultyValue">
            <summary>
            Returns the calculated difficulty value representing all processed <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Skills.Skill.StrainValueOf(osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject)">
            <summary>
            Calculates the strain value of a <see cref="T:osu.Game.Rulesets.Difficulty.Preprocessing.DifficultyHitObject"/>. This value is affected by previously processed objects.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1">
            <summary>
            An indexed stack with limited depth. Indexing starts at the top of the stack.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1.Count">
            <summary>
            The number of elements in the stack.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1"/>.
            </summary>
            <param name="capacity">The number of items the stack can hold.</param>
        </member>
        <member name="P:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1.Item(System.Int32)">
            <summary>
            Retrieves the item at an index in the stack.
            </summary>
            <param name="i">The index of the item to retrieve. The top of the stack is returned at index 0.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1.Push(`0)">
            <summary>
            Pushes an item to this <see cref="T:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1"/>.
            </summary>
            <param name="item">The item to push.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Difficulty.Utils.LimitedCapacityStack`1.GetEnumerator">
            <summary>
            Returns an enumerator which enumerates items in the history starting from the most recently added one.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Edit.DrawableEditRulesetWrapper`1">
            <summary>
            A wrapper for a <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/>. Handles adding visual representations of <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s to the underlying <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.HitObjectComposer.HitObjects">
            <summary>
            All the <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.HitObjectComposer.CursorInPlacementArea">
            <summary>
            Whether the user's cursor is currently in an area of the <see cref="T:osu.Game.Rulesets.Edit.HitObjectComposer"/> that is valid for placement.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.HitObjectComposer.CreateDistanceSnapGrid(System.Collections.Generic.IEnumerable{osu.Game.Rulesets.Objects.HitObject})">
            <summary>
            Creates the <see cref="T:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid"/> applicable for a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> selection.
            </summary>
            <param name="selectedHitObjects">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> selection.</param>
            <returns>The <see cref="T:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid"/> for <paramref name="selectedHitObjects"/>. If empty, a grid is returned for the current point in time.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IBeatSnapProvider.SnapTime(System.Double,System.Nullable{System.Double})">
            <summary>
            Snaps a duration to the closest beat of a timing point applicable at the reference time.
            </summary>
            <param name="time">The time to snap.</param>
            <param name="referenceTime">An optional reference point to use for timing point lookup.</param>
            <returns>A value that represents <paramref name="time"/> snapped to the closest beat of the timing point.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IBeatSnapProvider.GetBeatLengthAtTime(System.Double)">
            <summary>
            Get the most appropriate beat length at a given time.
            </summary>
            <param name="referenceTime">A reference time used for lookup.</param>
            <returns>The most appropriate beat length.</returns>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.IBeatSnapProvider.BeatDivisor">
            <summary>
            Returns the current beat divisor.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IDistanceSnapProvider.GetBeatSnapDistanceAt(System.Double)">
            <summary>
            Retrieves the distance between two points within a timing point that are one beat length apart.
            </summary>
            <param name="referenceTime">The time of the timing point.</param>
            <returns>The distance between two points residing in the timing point that are one beat length apart.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IDistanceSnapProvider.DurationToDistance(System.Double,System.Double)">
            <summary>
            Converts a duration to a distance.
            </summary>
            <param name="referenceTime">The time of the timing point which <paramref name="duration"/> resides in.</param>
            <param name="duration">The duration to convert.</param>
            <returns>A value that represents <paramref name="duration"/> as a distance in the timing point.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IDistanceSnapProvider.DistanceToDuration(System.Double,System.Single)">
            <summary>
            Converts a distance to a duration.
            </summary>
            <param name="referenceTime">The time of the timing point which <paramref name="distance"/> resides in.</param>
            <param name="distance">The distance to convert.</param>
            <returns>A value that represents <paramref name="distance"/> as a duration in the timing point.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IDistanceSnapProvider.GetSnappedDurationFromDistance(System.Double,System.Single)">
            <summary>
            Converts a distance to a snapped duration.
            </summary>
            <param name="referenceTime">The time of the timing point which <paramref name="distance"/> resides in.</param>
            <param name="distance">The distance to convert.</param>
            <returns>A value that represents <paramref name="distance"/> as a duration snapped to the closest beat of the timing point.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.IDistanceSnapProvider.GetSnappedDistanceFromDistance(System.Double,System.Single)">
            <summary>
            Converts an unsnapped distance to a snapped distance.
            </summary>
            <param name="referenceTime">The time of the timing point which <paramref name="distance"/> resides in.</param>
            <param name="distance">The distance to convert.</param>
            <returns>A value that represents <paramref name="distance"/> snapped to the closest beat of the timing point.</returns>
        </member>
        <member name="F:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint.DrawableObject">
            <summary>
            The <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> which this <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/> applies to.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Edit.PlacementBlueprint">
            <summary>
            A blueprint which governs the creation of a new <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/> to actualisation.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.PlacementBlueprint.PlacementActive">
            <summary>
            Whether the <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/> is currently mid-placement, but has not necessarily finished being placed.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject">
            <summary>
            The <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/> that is being placed.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.PlacementBlueprint.BeginPlacement(System.Nullable{System.Double},System.Boolean)">
            <summary>
            Signals that the placement of <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/> has started.
            </summary>
            <param name="startTime">The start time of <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/> at the placement point. If null, the current clock time is used.</param>
            <param name="commitStart">Whether this call is committing a value for HitObject.StartTime and continuing with further adjustments.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.PlacementBlueprint.EndPlacement(System.Boolean)">
            <summary>
            Signals that the placement of <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/> has finished.
            This will destroy this <see cref="T:osu.Game.Rulesets.Edit.PlacementBlueprint"/>, and add the HitObject.StartTime to the <see cref="T:osu.Game.Beatmaps.Beatmap"/>.
            </summary>
            <param name="commit">Whether the object should be committed.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.PlacementBlueprint.UpdatePosition(osuTK.Vector2)">
            <summary>
            Updates the position of this <see cref="T:osu.Game.Rulesets.Edit.PlacementBlueprint"/> to a new screen-space position.
            </summary>
            <param name="screenSpacePosition">The screen-space position.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.PlacementBlueprint.ApplyDefaultsToHitObject">
            <summary>
            Invokes <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/>,
            refreshing <see cref="P:osu.Game.Rulesets.Objects.HitObject.NestedHitObjects"/> and parameters for the <see cref="F:osu.Game.Rulesets.Edit.PlacementBlueprint.HitObject"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Edit.SelectionBlueprint">
            <summary>
            A blueprint placed above a <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> adding editing functionality.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Edit.SelectionBlueprint.Selected">
            <summary>
            Invoked when this <see cref="T:osu.Game.Rulesets.Edit.SelectionBlueprint"/> has been selected.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Edit.SelectionBlueprint.Deselected">
            <summary>
            Invoked when this <see cref="T:osu.Game.Rulesets.Edit.SelectionBlueprint"/> has been deselected.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.SelectionBlueprint.Select">
            <summary>
            Selects this <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/>, causing it to become visible.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Edit.SelectionBlueprint.Deselect">
            <summary>
            Deselects this <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/>, causing it to become invisible.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.SelectionBlueprint.ContextMenuItems">
            <summary>
            The <see cref="T:osu.Framework.Graphics.UserInterface.MenuItem"/>s to be displayed in the context menu for this <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.SelectionBlueprint.SelectionPoint">
            <summary>
            The screen-space point that causes this <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/> to be selected.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Edit.SelectionBlueprint.SelectionQuad">
            <summary>
            The screen-space quad that outlines this <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/> for selections.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.ILegacyRuleset.LegacyID">
            <summary>
            Identifies the server-side ID of a legacy ruleset.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Judgements.DrawableJudgement">
            <summary>
            A drawable object which visualises the hit result of a <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.DrawableJudgement.FadeInDuration">
            <summary>
            Duration of initial fade in.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.DrawableJudgement.FadeOutDelay">
            <summary>
            Duration to wait until fade out begins. Defaults to <see cref="P:osu.Game.Rulesets.Judgements.DrawableJudgement.FadeInDuration"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Judgements.DrawableJudgement.#ctor(osu.Game.Rulesets.Judgements.JudgementResult,osu.Game.Rulesets.Objects.Drawables.DrawableHitObject)">
            <summary>
            Creates a drawable which visualises a <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/>.
            </summary>
            <param name="result">The judgement to visualise.</param>
            <param name="judgedObject">The object which was judged.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Judgements.Judgement">
            <summary>
            The scoring information provided by a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Judgements.Judgement.DEFAULT_MAX_HEALTH_INCREASE">
            <summary>
            The default health increase for a maximum judgement, as a proportion of total health.
            By default, each maximum judgement restores 5% of total health.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.Judgement.MaxResult">
            <summary>
            The maximum <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/> that can be achieved.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.Judgement.AffectsCombo">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/> should affect the current combo.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.Judgement.IsBonus">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/> should be counted as base (combo) or bonus score.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.Judgement.MaxNumericResult">
            <summary>
            The numeric score representation for the maximum achievable result.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.Judgement.MaxHealthIncrease">
            <summary>
            The health increase for the maximum achievable result.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Judgements.Judgement.NumericResultFor(osu.Game.Rulesets.Scoring.HitResult)">
            <summary>
            Retrieves the numeric score representation of a <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.
            </summary>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/> to find the numeric score representation for.</param>
            <returns>The numeric score representation of <paramref name="result"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Judgements.Judgement.NumericResultFor(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Retrieves the numeric score representation of a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.
            </summary>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> to find the numeric score representation for.</param>
            <returns>The numeric score representation of <paramref name="result"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Judgements.Judgement.HealthIncreaseFor(osu.Game.Rulesets.Scoring.HitResult)">
            <summary>
            Retrieves the numeric health increase of a <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.
            </summary>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/> to find the numeric health increase for.</param>
            <returns>The numeric health increase of <paramref name="result"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Judgements.Judgement.HealthIncreaseFor(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Retrieves the numeric health increase of a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.
            </summary>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> to find the numeric health increase for.</param>
            <returns>The numeric health increase of <paramref name="result"/>.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.Judgements.JudgementResult">
            <summary>
            The scoring result of a <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Judgements.JudgementResult.Type">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> is the result of a hit or a miss.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Judgements.JudgementResult.HitObject">
            <summary>
            The <see cref="F:osu.Game.Rulesets.Judgements.JudgementResult.HitObject"/> which was judged.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Judgements.JudgementResult.Judgement">
            <summary>
            The <see cref="F:osu.Game.Rulesets.Judgements.JudgementResult.Judgement"/> which this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> applies for.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.TimeOffset">
            <summary>
            The offset from a perfect hit at which this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> occurred.
            Populated when this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> is applied via <see cref="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.ApplyResult(System.Action{osu.Game.Rulesets.Judgements.JudgementResult})"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.ComboAtJudgement">
            <summary>
            The combo prior to this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> occurring.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.HighestComboAtJudgement">
            <summary>
            The highest combo achieved prior to this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> occurring.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.HealthAtJudgement">
            <summary>
            The health prior to this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> occurring.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.FailedAtJudgement">
            <summary>
            Whether the user was in a failed state prior to this <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> occurring.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.HasResult">
            <summary>
            Whether a miss or hit occurred.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Judgements.JudgementResult.IsHit">
            <summary>
            Whether a successful hit occurred.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Judgements.JudgementResult.#ctor(osu.Game.Rulesets.Objects.HitObject,osu.Game.Rulesets.Judgements.Judgement)">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.
            </summary>
            <param name="hitObject">The <see cref="F:osu.Game.Rulesets.Judgements.JudgementResult.HitObject"/> which was judged.</param>
            <param name="judgement">The <see cref="F:osu.Game.Rulesets.Judgements.JudgementResult.Judgement"/> to refer to for scoring information.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableFailOverride">
            <summary>
            Represents a mod which can override (and block) a fail.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableFailOverride.PerformFail">
            <summary>
            Whether we should allow failing at the current point in time.
            </summary>
            <returns>Whether the fail should be allowed to proceed. Return false to block.</returns>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.IApplicableFailOverride.RestartOnFail">
            <summary>
            Whether we want to restart on fail. Only used if <see cref="M:osu.Game.Rulesets.Mods.IApplicableFailOverride.PerformFail"/> returns true.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableMod">
            <summary>
            The base interface for a mod which can be applied in some way.
            If this is not implemented by a mod, it will not be available for use in-game.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToBeatmap">
            <summary>
            Interface for a <see cref="T:osu.Game.Rulesets.Mods.Mod"/> that applies changes to a <see cref="T:osu.Game.Beatmaps.Beatmap"/> after conversion and post-processing has completed.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToBeatmap.ApplyToBeatmap(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Applies this <see cref="T:osu.Game.Rulesets.Mods.IApplicableToBeatmap"/> to an <see cref="T:osu.Game.Beatmaps.IBeatmap"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to apply to.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToBeatmapConverter">
            <summary>
            Interface for a <see cref="T:osu.Game.Rulesets.Mods.Mod"/> that applies changes to a <see cref="T:osu.Game.Beatmaps.BeatmapConverter`1"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToBeatmapConverter.ApplyToBeatmapConverter(osu.Game.Beatmaps.IBeatmapConverter)">
            <summary>
            Applies this <see cref="T:osu.Game.Rulesets.Mods.Mod"/> to a <see cref="T:osu.Game.Beatmaps.BeatmapConverter`1"/>.
            </summary>
            <param name="beatmapConverter">The <see cref="T:osu.Game.Beatmaps.BeatmapConverter`1"/> to apply to.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToDifficulty">
            <summary>
            An interface for mods that make general adjustments to difficulty.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToDifficulty.ReadFromDifficulty(osu.Game.Beatmaps.BeatmapDifficulty)">
            <summary>
            Called when a beatmap is changed. Can be used to read default values.
            Any changes made will not be preserved.
            </summary>
            <param name="difficulty">The difficulty to read from.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToDifficulty.ApplyToDifficulty(osu.Game.Beatmaps.BeatmapDifficulty)">
            <summary>
            Called post beatmap conversion. Can be used to apply changes to difficulty attributes.
            </summary>
            <param name="difficulty">The difficulty to mutate.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToDrawableHitObjects">
            <summary>
            An interface for <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s that can be applied to <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToDrawableHitObjects.ApplyToDrawableHitObjects(System.Collections.Generic.IEnumerable{osu.Game.Rulesets.Objects.Drawables.DrawableHitObject})">
            <summary>
            Applies this <see cref="T:osu.Game.Rulesets.Mods.IApplicableToDrawableHitObjects"/> to a list of <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s.
            This will only be invoked with top-level <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s. Access <see cref="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.NestedHitObjects"/> if adjusting nested objects is necessary.
            </summary>
            <param name="drawables">The list of <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s to apply to.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToDrawableRuleset`1">
            <summary>
            An interface for <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s that can be applied to <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToDrawableRuleset`1.ApplyToDrawableRuleset(osu.Game.Rulesets.UI.DrawableRuleset{`0})">
            <summary>
            Applies this <see cref="T:osu.Game.Rulesets.Mods.IApplicableToDrawableRuleset`1"/> to a <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/>.
            </summary>
            <param name="drawableRuleset">The <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/> to apply to.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToHealthProcessor.ApplyToHealthProcessor(osu.Game.Rulesets.Scoring.HealthProcessor)">
            <summary>
            Provide a <see cref="T:osu.Game.Rulesets.Scoring.HealthProcessor"/> to a mod. Called once on initialisation of a play instance.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToHitObject">
            <summary>
            An interface for <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s that can be applied to <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToHitObject.ApplyToHitObject(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Applies this <see cref="T:osu.Game.Rulesets.Mods.IApplicableToHitObject"/> to a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to apply to.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToHUD">
            <summary>
            An interface for mods that apply changes to the <see cref="T:osu.Game.Screens.Play.HUDOverlay"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToHUD.ApplyToHUD(osu.Game.Screens.Play.HUDOverlay)">
            <summary>
            Provide a <see cref="T:osu.Game.Screens.Play.HUDOverlay"/>. Called once on initialisation of a play instance.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToPlayer">
            <summary>
            An interface for a mod which can temporarily override the <see cref="T:osu.Game.Screens.Play.Player"/> settings.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToScoreProcessor">
            <summary>
            An interface for mods that make general adjustments to score processor.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToScoreProcessor.ApplyToScoreProcessor(osu.Game.Rulesets.Scoring.ScoreProcessor)">
            <summary>
            Provide a <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/> to a mod. Called once on initialisation of a play instance.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.IApplicableToScoreProcessor.AdjustRank(osu.Game.Scoring.ScoreRank,System.Double)">
            <summary>
            Called every time a rank calculation is requested. Allows mods to adjust the final rank.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IApplicableToTrack">
            <summary>
            An interface for mods that make adjustments to the track.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.IMod.Acronym">
            <summary>
            The shortened name of this mod.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.IReadFromConfig">
            <summary>
            An interface for mods that require reading access to the osu! configuration.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.Mod">
            <summary>
            The base class for gameplay modifiers.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.Name">
            <summary>
            The name of this mod.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.Acronym">
            <summary>
            The shortened name of this mod.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.Icon">
            <summary>
            The icon of this mod.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.Type">
            <summary>
            The type of this mod.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.Description">
            <summary>
            The user readable description of this mod.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.IconTooltip">
            <summary>
            The tooltip to display for this mod when used in a <see cref="T:osu.Game.Rulesets.UI.ModIcon"/>.
            </summary>
            <remarks>
            Differs from <see cref="P:osu.Game.Rulesets.Mods.Mod.Name"/>, as the value of attributes (AR, CS, etc) changeable via the mod
            are displayed in the tooltip.
            </remarks>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.SettingDescription">
            <summary>
            The description of editable settings of a mod to use in the <see cref="P:osu.Game.Rulesets.Mods.Mod.IconTooltip"/>.
            </summary>
            <remarks>
            Parentheses are added to the tooltip, surrounding the value of this property. If this property is <c>string.Empty</c>,
            the tooltip will not have parentheses.
            </remarks>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.ScoreMultiplier">
            <summary>
            The score multiplier of this mod.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.HasImplementation">
            <summary>
            Returns true if this mod is implemented (and playable).
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.Ranked">
            <summary>
            Returns if this mod is ranked.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.RequiresConfiguration">
            <summary>
            Whether this mod requires configuration to apply changes to the game.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Mods.Mod.IncompatibleMods">
            <summary>
            The mods this mod cannot be enabled with.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.Mod.CreateCopy">
            <summary>
            Creates a copy of this <see cref="T:osu.Game.Rulesets.Mods.Mod"/> initialised to a default state.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.ModBlockFail.PerformFail">
            <summary>
            We never fail, 'yo.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.ModDifficultyAdjust.TransferSettings(osu.Game.Beatmaps.BeatmapDifficulty)">
            <summary>
            Transfer initial settings from the beatmap to settings.
            </summary>
            <param name="difficulty">The beatmap's initial values.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.ModDifficultyAdjust.TransferSetting``1(osu.Framework.Bindables.BindableNumber{``0},``0)">
            <summary>
            Transfer a setting from <see cref="T:osu.Game.Beatmaps.BeatmapDifficulty"/> to a configuration bindable.
            Only performs the transfer if the user is not currently overriding.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.ModDifficultyAdjust.ApplySettings(osu.Game.Beatmaps.BeatmapDifficulty)">
            <summary>
            Apply all custom settings to the provided beatmap.
            </summary>
            <param name="difficulty">The beatmap to have settings applied.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.ModHidden.IsFirstHideableObject(osu.Game.Rulesets.Objects.Drawables.DrawableHitObject)">
            <summary>
            Check whether the provided hitobject should be considered the "first" hideable object.
            Can be used to skip spinners, for instance.
            </summary>
            <param name="hitObject">The hitobject to check.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Mods.ModNoMod">
            <summary>
            Indicates a type of mod that doesn't do anything.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Mods.ModTimeRamp.final_rate_progress">
            <summary>
            The point in the beatmap at which the final ramping rate should be reached.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Mods.ModTimeRamp.applyAdjustment(System.Double)">
            <summary>
            Adjust the rate along the specified ramp
            </summary>
            <param name="amount">The amount of adjustment to apply (from 0..1).</param>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.BarLineGenerator`1.BarLines">
            <summary>
            The generated bar lines.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.BarLineGenerator`1.#ctor(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Constructs and generates bar lines for provided beatmap.
            </summary>
            <param name="beatmap">The beatmap to generate bar lines for.</param>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.AccentColour">
            <summary>
            The colour used for various elements of this DrawableHitObject.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HandleUserInput">
            <summary>
            Whether this object should handle any user input events.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.OnNewResult">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> has been applied by this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> or a nested <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.OnRevertResult">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> is being reverted by this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> or a nested <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.DisplayResult">
            <summary>
            Whether a visual indicator should be displayed when a scoring result occurs.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.AllJudged">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> and all of its nested <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s have been judged.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.IsHit">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> has been hit. This occurs if <see cref="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.Result"/> is hit.
            Note: This does NOT include nested hitobjects.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.Judged">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> has been judged.
            Note: This does NOT include nested hitobjects.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.Result">
            <summary>
            The scoring result of this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.SamplePlaybackPosition">
            <summary>
            The relative X position of this hit object for sample playback balance adjustment.
            </summary>
            <remarks>
            This is a range of 0..1 (0 for far-left, 0.5 for centre, 1 for far-right).
            Dampening is post-applied to ensure the effect is not too intense.
            </remarks>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.AddNestedHitObject(osu.Game.Rulesets.Objects.Drawables.DrawableHitObject)">
            <summary>
            Invoked by the base <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> to add nested <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s to the hierarchy.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> to be added.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.ClearNestedHitObjects">
            <summary>
            Invoked by the base <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> to remove all previously-added nested <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.CreateNestedHitObject(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Creates the drawable representation for a nested <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/>.
            </summary>
            <param name="hitObject">The <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/>.</param>
            <returns>The drawable representation for <paramref name="hitObject"/>.</returns>
        </member>
        <member name="E:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.ApplyCustomUpdateState">
            <summary>
            Bind to apply a custom state which can override the default implementation.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.UpdateInitialTransforms">
             <summary>
             Apply (generally fade-in) transforms leading into the <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/> start time.
             The local drawable hierarchy is recursively delayed to <see cref="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.LifetimeStart"/> for convenience.
            
             By default this will fade in the object from zero with no duration.
             </summary>
             <remarks>
             This is called once before every <see cref="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.UpdateStateTransforms(osu.Game.Rulesets.Objects.Drawables.ArmedState)"/>. This is to ensure a good state in the case
             the <see cref="P:osu.Game.Rulesets.Judgements.JudgementResult.TimeOffset"/> was negative and potentially altered the pre-hit transforms.
             </remarks>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.UpdateStateTransforms(osu.Game.Rulesets.Objects.Drawables.ArmedState)">
            <summary>
            Apply transforms based on the current <see cref="T:osu.Game.Rulesets.Objects.Drawables.ArmedState"/>. Previous states are automatically cleared.
            In the case of a non-idle <see cref="T:osu.Game.Rulesets.Objects.Drawables.ArmedState"/>, and if <see cref="P:osu.Framework.Graphics.Drawable.LifetimeEnd"/> was not set during this call, <see cref="M:osu.Framework.Graphics.Drawable.Expire(System.Boolean)"/> will be invoked.
            </summary>
            <param name="state">The new armed state.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.GetComboColour(System.Collections.Generic.IReadOnlyList{osuTK.Graphics.Color4})">
            <summary>
            Called to retrieve the combo colour. Automatically assigned to <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.AccentColour"/>.
            Defaults to using <see cref="P:osu.Game.Rulesets.Objects.Types.IHasComboInformation.ComboIndex"/> to decide on a colour.
            </summary>
            <remarks>
            This will only be called if the <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/> implements <see cref="T:osu.Game.Rulesets.Objects.Types.IHasComboInformation"/>.
            </remarks>
            <param name="comboColours">A list of combo colours provided by the beatmap or skin. Can be null if not available.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.ApplySkin(osu.Game.Skinning.ISkinSource,System.Boolean)">
            <summary>
            Called when a change is made to the skin.
            </summary>
            <param name="skin">The new skin.</param>
            <param name="allowFallback">Whether fallback to default skin should be allowed if the custom skin is missing this resource.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.PlaySamples">
            <summary>
            Plays all the hit sounds for this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            This is invoked automatically when this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> is hit.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.Schedule(System.Action)">
            <summary>
            Schedules an <see cref="T:System.Action"/> to this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
            <remarks>
            Only provided temporarily until hitobject pooling is implemented.
            </remarks>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.InitialLifetimeOffset">
            <summary>
            A safe offset prior to the start time of <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/> at which this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> may begin displaying contents.
            By default, <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s are assumed to display their contents within 10 seconds prior to the start time of <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/>.
            </summary>
            <remarks>
            This is only used as an optimisation to delay the initial update of this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> and may be tuned more aggressively if required.
            It is indirectly used to decide the automatic transform offset provided to <see cref="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.UpdateInitialTransforms"/>.
            A more accurate <see cref="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.LifetimeStart"/> should be set for further optimisation (in <see cref="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.LoadComplete"/>, for example).
            </remarks>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.OnKilled">
            <summary>
            Will be called at least once after this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> has become not alive.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.ApplyResult(System.Action{osu.Game.Rulesets.Judgements.JudgementResult})">
            <summary>
            Applies the <see cref="P:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.Result"/> of this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>, notifying responders such as
            the <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/> of the <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.
            </summary>
            <param name="application">The callback that applies changes to the <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.UpdateResult(System.Boolean)">
            <summary>
            Processes this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>, checking if a scoring result has occurred.
            </summary>
            <param name="userTriggered">Whether the user triggered this process.</param>
            <returns>Whether a scoring result has occurred from this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> or any nested <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.CheckForResult(System.Boolean,System.Double)">
            <summary>
            Checks if a scoring result has occurred for this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
            <remarks>
            If a scoring result has occurred, this method must invoke <see cref="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.ApplyResult(System.Action{osu.Game.Rulesets.Judgements.JudgementResult})"/> to update the result and notify responders.
            </remarks>
            <param name="userTriggered">Whether the user triggered this check.</param>
            <param name="timeOffset">The offset from the end time of the <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/> at which this check occurred.
            A <paramref name="timeOffset"/> &gt; 0 implies that this check occurred after the end time of the <see cref="F:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.HitObject"/>. </param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject.CreateResult(osu.Game.Rulesets.Judgements.Judgement)">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> that represents the scoring result for this <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
            <param name="judgement">The <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/> that provides the scoring information.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Drawables.IScrollingHitObject">
            <summary>
            An interface that exposes properties required for scrolling hit objects to be properly displayed.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.IScrollingHitObject.LifetimeOffset">
             <summary>
             Time offset before the hit object start time at which this <see cref="T:osu.Game.Rulesets.Objects.Drawables.IScrollingHitObject"/> becomes visible and the time offset
             after the hit object's end time after which it expires.
            
             <para>
             This provides only a default life time range, however classes inheriting from <see cref="T:osu.Game.Rulesets.Objects.Drawables.IScrollingHitObject"/> should override
             their life times if more tight control is desired.
             </para>
             </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Drawables.IScrollingHitObject.ScrollingAxes">
            <summary>
            Axes which this <see cref="T:osu.Game.Rulesets.Objects.Drawables.IScrollingHitObject"/> will scroll through.
            This is set by the container which this scrolls through.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.HitObject">
            <summary>
            A HitObject describes an object in a Beatmap.
            <para>
            HitObjects may contain more properties for which you should be checking through the IHas* types.
            </para>
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.HitObject.control_point_leniency">
            <summary>
            A small adjustment to the start time of control points to account for rounding/precision errors.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Objects.HitObject.DefaultsApplied">
            <summary>
            Invoked after <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/> has completed on this <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.HitObject.StartTime">
            <summary>
            The time at which the HitObject starts.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.HitObject.Samples">
            <summary>
            The samples to be played when this hit object is hit.
            <para>
            In the case of <see cref="T:osu.Game.Rulesets.Objects.Types.IHasRepeats"/> types, this is the sample of the curve body
            and can be treated as the default samples for the hit object.
            </para>
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.HitObject.Kiai">
            <summary>
            Whether this <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> is in Kiai time.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.HitObject.HitWindows">
            <summary>
            The hit windows for this <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)">
            <summary>
            Applies default values to this HitObject.
            </summary>
            <param name="controlPointInfo">The control points.</param>
            <param name="difficulty">The difficulty settings to use.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.HitObject.CreateJudgement">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/> that represents the scoring information for this <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.HitObject.CreateHitWindows">
            <summary>
            Creates the <see cref="P:osu.Game.Rulesets.Objects.HitObject.HitWindows"/> for this <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            This can be null to indicate that the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> has no <see cref="P:osu.Game.Rulesets.Objects.HitObject.HitWindows"/> and timing errors should not be displayed to the user.
            <para>
            This will only be invoked if <see cref="P:osu.Game.Rulesets.Objects.HitObject.HitWindows"/> hasn't been set externally (e.g. from a <see cref="T:osu.Game.Beatmaps.BeatmapConverter`1"/>.
            </para>
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.HitObjectExtensions.GetEndTime(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Returns the end time of this object.
            </summary>
            <remarks>
            This returns the <see cref="P:osu.Game.Rulesets.Objects.Types.IHasEndTime.EndTime"/> where available, falling back to <see cref="P:osu.Game.Rulesets.Objects.HitObject.StartTime"/> otherwise.
            </remarks>
            <param name="hitObject">The object.</param>
            <returns>The end time of this object.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.IBarLine">
            <summary>
            Interface for bar line hitobjects.
            Used to decouple bar line generation from ruleset-specific rendering/drawing hierarchies.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.IBarLine.StartTime">
            <summary>
            The time position of the bar.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.IBarLine.Major">
            <summary>
            Whether this bar line is a prominent beat (based on time signature of beatmap).
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Catch.ConvertHit">
            <summary>
            Legacy osu!catch Hit-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Catch.ConvertHitObjectParser">
            <summary>
            A HitObjectParser to parse legacy osu!catch Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Catch.ConvertSlider">
            <summary>
            Legacy osu!catch Slider-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Catch.ConvertSpinner">
            <summary>
            Legacy osu!catch Spinner-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.ConvertHitObject">
            <summary>
            A hit object only used for conversion, not actual gameplay.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser">
            <summary>
            A HitObjectParser to parse legacy Beatmaps.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser.Offset">
            <summary>
            The offset to apply to all time values.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser.FormatVersion">
            <summary>
            The beatmap version.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser.CreateHit(osuTK.Vector2,System.Boolean,System.Int32)">
            <summary>
            Creates a legacy Hit-type hit object.
            </summary>
            <param name="position">The position of the hit object.</param>
            <param name="newCombo">Whether the hit object creates a new combo.</param>
            <param name="comboOffset">When starting a new combo, the offset of the new combo relative to the current one.</param>
            <returns>The hit object.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser.CreateSlider(osuTK.Vector2,System.Boolean,System.Int32,osu.Game.Rulesets.Objects.PathControlPoint[],System.Nullable{System.Double},System.Int32,System.Collections.Generic.List{System.Collections.Generic.IList{osu.Game.Audio.HitSampleInfo}})">
            <summary>
            Creats a legacy Slider-type hit object.
            </summary>
            <param name="position">The position of the hit object.</param>
            <param name="newCombo">Whether the hit object creates a new combo.</param>
            <param name="comboOffset">When starting a new combo, the offset of the new combo relative to the current one.</param>
            <param name="controlPoints">The slider control points.</param>
            <param name="length">The slider length.</param>
            <param name="repeatCount">The slider repeat count.</param>
            <param name="nodeSamples">The samples to be played when the slider nodes are hit. This includes the head and tail of the slider.</param>
            <returns>The hit object.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser.CreateSpinner(osuTK.Vector2,System.Boolean,System.Int32,System.Double)">
            <summary>
            Creates a legacy Spinner-type hit object.
            </summary>
            <param name="position">The position of the hit object.</param>
            <param name="newCombo">Whether the hit object creates a new combo.</param>
            <param name="comboOffset">When starting a new combo, the offset of the new combo relative to the current one.</param>
            <param name="endTime">The spinner end time.</param>
            <returns>The hit object.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Legacy.ConvertHitObjectParser.CreateHold(osuTK.Vector2,System.Boolean,System.Int32,System.Double)">
            <summary>
            Creates a legacy Hold-type hit object.
            </summary>
            <param name="position">The position of the hit object.</param>
            <param name="newCombo">Whether the hit object creates a new combo.</param>
            <param name="comboOffset">When starting a new combo, the offset of the new combo relative to the current one.</param>
            <param name="endTime">The hold end time.</param>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.Legacy.ConvertSlider.base_scoring_distance">
            <summary>
            Scoring distance with a speed-adjusted beat length of 1 second.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Legacy.ConvertSlider.Path">
            <summary>
            <see cref="T:osu.Game.Rulesets.Objects.Legacy.ConvertSlider"/>s don't need a curve since they're converted to ruleset-specific hitobjects.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Mania.ConvertHit">
            <summary>
            Legacy osu!mania Hit-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Mania.ConvertHitObjectParser">
            <summary>
            A HitObjectParser to parse legacy osu!mania Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Mania.ConvertSlider">
            <summary>
            Legacy osu!mania Slider-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Mania.ConvertSpinner">
            <summary>
            Legacy osu!mania Spinner-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Osu.ConvertHit">
            <summary>
            Legacy osu! Hit-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Osu.ConvertHitObjectParser">
            <summary>
            A HitObjectParser to parse legacy osu! Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Osu.ConvertSlider">
            <summary>
            Legacy osu! Slider-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Osu.ConvertSpinner">
            <summary>
            Legacy osu! Spinner-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Taiko.ConvertHit">
            <summary>
            Legacy osu!taiko Hit-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Taiko.ConvertHitObjectParser">
            <summary>
            A HitObjectParser to parse legacy osu!taiko Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Taiko.ConvertSlider">
            <summary>
            Legacy osu!taiko Slider-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Legacy.Taiko.ConvertSpinner">
            <summary>
            Legacy osu!taiko Spinner-type, used for parsing Beatmaps.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.PathControlPoint.Position">
            <summary>
            The position of this <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.PathControlPoint.Type">
            <summary>
            The type of path segment starting at this <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/>.
            If null, this <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/> will be a part of the previous path segment.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Objects.PathControlPoint.Changed">
            <summary>
            Invoked when any property of this <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/> is changed.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.PathControlPoint.#ctor">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.PathControlPoint.#ctor(osuTK.Vector2,System.Nullable{osu.Game.Rulesets.Objects.Types.PathType})">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/> with a provided position and type.
            </summary>
            <param name="position">The initial position.</param>
            <param name="type">The initial type.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.SliderEventGenerator.generateTicks(System.Int32,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Generates the ticks for a span of the slider.
            </summary>
            <param name="spanIndex">The span index.</param>
            <param name="spanStartTime">The start time of the span.</param>
            <param name="spanDuration">The duration of the span.</param>
            <param name="reversed">Whether the span is reversed.</param>
            <param name="length">The length of the path.</param>
            <param name="tickDistance">The distance between each tick.</param>
            <param name="minDistanceFromEnd">The distance from the end of the path at which ticks are not allowed to be added.</param>
            <returns>A <see cref="T:osu.Game.Rulesets.Objects.SliderEventDescriptor"/> for each tick. If <paramref name="reversed"/> is true, the ticks will be returned in reverse-StartTime order.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.SliderEventDescriptor">
            <summary>
            Describes a point in time on a slider given special meaning.
            Should be used by rulesets to visualise the slider.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderEventDescriptor.Type">
            <summary>
            The type of event.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderEventDescriptor.Time">
            <summary>
            The time of this event.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderEventDescriptor.SpanIndex">
            <summary>
            The zero-based index of the span. In the case of repeat sliders, this will increase after each <see cref="F:osu.Game.Rulesets.Objects.SliderEventType.Repeat"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderEventDescriptor.SpanStartTime">
            <summary>
            The time at which the contained <see cref="F:osu.Game.Rulesets.Objects.SliderEventDescriptor.SpanIndex"/> begins.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderEventDescriptor.PathProgress">
            <summary>
            The progress along the slider's <see cref="T:osu.Game.Rulesets.Objects.SliderPath"/> at which this event occurs.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.SliderPath.Version">
            <summary>
            The current version of this <see cref="T:osu.Game.Rulesets.Objects.SliderPath"/>. Updated when any change to the path occurs.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderPath.ExpectedDistance">
            <summary>
            The user-set distance of the path. If non-null, <see cref="P:osu.Game.Rulesets.Objects.SliderPath.Distance"/> will match this value,
            and the path will be shortened/lengthened to match this length.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Objects.SliderPath.ControlPoints">
            <summary>
            The control points of the path.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.SliderPath.#ctor">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Objects.SliderPath"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.SliderPath.#ctor(osu.Game.Rulesets.Objects.PathControlPoint[],System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Objects.SliderPath"/> initialised with a list of control points.
            </summary>
            <param name="controlPoints">An optional set of <see cref="T:osu.Game.Rulesets.Objects.PathControlPoint"/>s to initialise the path with.</param>
            <param name="expectedDistance">A user-set distance of the path that may be shorter or longer than the true distance between all control points.
            The path will be shortened/lengthened to match this length. If null, the path will use the true distance between all control points.</param>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.SliderPath.Distance">
            <summary>
            The distance of the path after lengthening/shortening to account for <see cref="F:osu.Game.Rulesets.Objects.SliderPath.ExpectedDistance"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.SliderPath.CalculatedDistance">
            <summary>
            The distance of the path prior to lengthening/shortening to account for <see cref="F:osu.Game.Rulesets.Objects.SliderPath.ExpectedDistance"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.SliderPath.GetPathToProgress(System.Collections.Generic.List{osuTK.Vector2},System.Double,System.Double)">
            <summary>
            Computes the slider path until a given progress that ranges from 0 (beginning of the slider)
            to 1 (end of the slider) and stores the generated path in the given list.
            </summary>
            <param name="path">The list to be filled with the computed path.</param>
            <param name="p0">Start progress. Ranges from 0 (beginning of the slider) to 1 (end of the slider).</param>
            <param name="p1">End progress. Ranges from 0 (beginning of the slider) to 1 (end of the slider).</param>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.SliderPath.PositionAt(System.Double)">
            <summary>
            Computes the position on the slider at a given progress that ranges from 0 (beginning of the path)
            to 1 (end of the path).
            </summary>
            <param name="progress">Ranges from 0 (beginning of the path) to 1 (end of the path).</param>
            <returns></returns>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasCombo">
            <summary>
            A HitObject that is part of a combo.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasCombo.NewCombo">
            <summary>
            Whether the HitObject starts a new combo.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasCombo.ComboOffset">
            <summary>
            When starting a new combo, the offset of the new combo relative to the current one.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasComboInformation">
            <summary>
            A HitObject that is part of a combo and has extended information about its position relative to other combo objects.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasComboInformation.IndexInCurrentCombo">
            <summary>
            The offset of this hitobject in the current combo.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasComboInformation.ComboIndex">
            <summary>
            The offset of this combo in relation to the beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasComboInformation.LastInCombo">
            <summary>
            Whether this is the last object in the current combo.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasCurve">
            <summary>
            A HitObject that has a curve.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasCurve.Path">
            <summary>
            The curve.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Types.HasCurveExtensions.CurvePositionAt(osu.Game.Rulesets.Objects.Types.IHasCurve,System.Double)">
            <summary>
            Computes the position on the curve relative to how much of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> has been completed.
            </summary>
            <param name="obj">The curve.</param>
            <param name="progress">[0, 1] where 0 is the start time of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> and 1 is the end time of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.</param>
            <returns>The position on the curve.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Types.HasCurveExtensions.ProgressAt(osu.Game.Rulesets.Objects.Types.IHasCurve,System.Double)">
            <summary>
            Computes the progress along the curve relative to how much of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> has been completed.
            </summary>
            <param name="obj">The curve.</param>
            <param name="progress">[0, 1] where 0 is the start time of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> and 1 is the end time of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.</param>
            <returns>[0, 1] where 0 is the beginning of the curve and 1 is the end of the curve.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Types.HasCurveExtensions.SpanAt(osu.Game.Rulesets.Objects.Types.IHasCurve,System.Double)">
            <summary>
            Determines which span of the curve the progress point is on.
            </summary>
            <param name="obj">The curve.</param>
            <param name="progress">[0, 1] where 0 is the beginning of the curve and 1 is the end of the curve.</param>
            <returns>[0, SpanCount) where 0 is the first run.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasDistance">
            <summary>
            A HitObject that has a positional length.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasDistance.Distance">
            <summary>
            The positional length of the HitObject.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasEndTime">
            <summary>
            A HitObject that ends at a different time than its start time.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasEndTime.EndTime">
            <summary>
            The time at which the HitObject ends.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasEndTime.Duration">
            <summary>
            The duration of the HitObject.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasHold">
            <summary>
            A special type of HitObject, mostly used for legacy conversion of "holds".
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasHold.EndTime">
            <summary>
            The time at which the hold ends.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasLegacyLastTickOffset">
            <summary>
            A type of <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> which may require the last tick to be offset.
            This is specific to osu!stable conversion, and should not be used elsewhere.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasPosition">
            <summary>
            A HitObject that has a starting position.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasPosition.Position">
            <summary>
            The starting position of the HitObject.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasRepeats">
            <summary>
            A HitObject that spans some length.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasRepeats.RepeatCount">
            <summary>
            The amount of times the HitObject repeats.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasRepeats.NodeSamples">
            <summary>
            The samples to be played when each node of the <see cref="T:osu.Game.Rulesets.Objects.Types.IHasRepeats"/> is hit.<br />
            0: The first node.<br />
            1: The first repeat.<br />
            2: The second repeat.<br />
            ...<br />
            n-1: The last repeat.<br />
            n: The last node.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Objects.Types.HasRepeatsExtensions.SpanCount(osu.Game.Rulesets.Objects.Types.IHasRepeats)">
            <summary>
            The amount of times the length of this <see cref="T:osu.Game.Rulesets.Objects.Types.IHasRepeats"/> spans.
            </summary>
            <param name="obj">The object that has repeats.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasXPosition">
            <summary>
            A HitObject that has a starting X-position.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasXPosition.X">
            <summary>
            The starting X-position of this HitObject.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Objects.Types.IHasYPosition">
            <summary>
            A HitObject that has a starting Y-position.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Objects.Types.IHasYPosition.Y">
            <summary>
            The starting Y-position of this HitObject.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Replays.AutoGenerator.Generate">
            <summary>
            Creates the auto replay and returns it.
            Every subclass of OsuAutoGeneratorBase should implement this!
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Replays.AutoGenerator.Beatmap">
            <summary>
            The beatmap we're making.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Replays.FramedReplayInputHandler`1">
            <summary>
            The ReplayHandler will take a replay and handle the propagation of updates to the input stack.
            It handles logic of any frames which *must* be executed.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Replays.FramedReplayInputHandler`1.FrameAccuratePlayback">
            <summary>
            When set, we will ensure frames executed by nested drawables are frame-accurate to replay data.
            Disabling this can make replay playback smoother (useful for autoplay, currently).
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Replays.FramedReplayInputHandler`1.SetFrameFromTime(System.Double)">
            <summary>
            Update the current frame based on an incoming time value.
            There are cases where we return a "must-use" time value that is different from the input.
            This is to ensure accurate playback of replay data.
            </summary>
            <param name="time">The time which we should use for finding the current frame.</param>
            <returns>The usable time value. If null, we should not advance time as we do not have enough data.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.Replays.Types.IConvertibleReplayFrame">
            <summary>
            A type of <see cref="T:osu.Game.Rulesets.Replays.ReplayFrame"/> which can be converted from a <see cref="T:osu.Game.Replays.Legacy.LegacyReplayFrame"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Replays.Types.IConvertibleReplayFrame.FromLegacy(osu.Game.Replays.Legacy.LegacyReplayFrame,osu.Game.Beatmaps.IBeatmap,osu.Game.Rulesets.Replays.ReplayFrame)">
            <summary>
            Populates this <see cref="T:osu.Game.Rulesets.Replays.ReplayFrame"/> using values from a <see cref="T:osu.Game.Replays.Legacy.LegacyReplayFrame"/>.
            </summary>
            <param name="currentFrame">The <see cref="T:osu.Game.Replays.Legacy.LegacyReplayFrame"/> to extract values from.</param>
            <param name="beatmap">The beatmap.</param>
            <param name="lastFrame">The last post-conversion <see cref="T:osu.Game.Rulesets.Replays.ReplayFrame"/>, used to fill in missing delta information. May be null.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Replays.Types.IConvertibleReplayFrame.ToLegacy(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Populates this <see cref="T:osu.Game.Rulesets.Replays.ReplayFrame"/> using values from a <see cref="T:osu.Game.Replays.Legacy.LegacyReplayFrame"/>.
            </summary>
            <param name="beatmap">The beatmap.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.ConvertFromLegacyMods(osu.Game.Beatmaps.Legacy.LegacyMods)">
            <summary>
            Converts mods from legacy enum values. Do not override if you're not a legacy ruleset.
            </summary>
            <param name="mods">The legacy enum which will be converted.</param>
            <returns>An enumerable of constructed <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.ConvertToLegacyMods(osu.Game.Rulesets.Mods.Mod[])">
            <summary>
            Converts mods to legacy enum values. Do not override if you're not a legacy ruleset.
            </summary>
            <param name="mods">The mods which will be converted.</param>
            <returns>A single bitwise enumerable value representing (to the best of our ability) the mods.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateDrawableRulesetWith(osu.Game.Beatmaps.IBeatmap,System.Collections.Generic.IReadOnlyList{osu.Game.Rulesets.Mods.Mod})">
            <summary>
            Attempt to create a hit renderer for a beatmap
            </summary>
            <param name="beatmap">The beatmap to create the hit renderer for.</param>
            <param name="mods">The <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s to apply.</param>
            <exception cref="T:osu.Game.Rulesets.UI.BeatmapInvalidForRulesetException">Unable to successfully load the beatmap to be usable with this ruleset.</exception>
            <returns></returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateScoreProcessor">
            <summary>
            Creates a <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/> for this <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
            <returns>The score processor.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateHealthProcessor(System.Double)">
            <summary>
            Creates a <see cref="T:osu.Game.Rulesets.Scoring.HealthProcessor"/> for this <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
            <returns>The health processor.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateBeatmapConverter(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Creates a <see cref="T:osu.Game.Beatmaps.IBeatmapConverter"/> to convert a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to one that is applicable for this <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to be converted.</param>
            <returns>The <see cref="T:osu.Game.Beatmaps.IBeatmapConverter"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateBeatmapProcessor(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Optionally creates a <see cref="T:osu.Game.Beatmaps.IBeatmapProcessor"/> to alter a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> after it has been converted.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to be processed.</param>
            <returns>The <see cref="T:osu.Game.Beatmaps.IBeatmapProcessor"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateConfig(osu.Game.Configuration.SettingsStore)">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Configuration.IRulesetConfigManager"/> for this <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
            <param name="settings">The <see cref="T:osu.Game.Configuration.SettingsStore"/> to store the settings.</param>
        </member>
        <member name="P:osu.Game.Rulesets.Ruleset.ShortName">
            <summary>
            A unique short name to reference this ruleset in online requests.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Ruleset.PlayingVerb">
            <summary>
            The playing verb to be shown in the <see cref="P:osu.Game.Users.UserActivity.SoloGame.Status"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Ruleset.AvailableVariants">
            <summary>
            A list of available variant ids.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.GetDefaultKeyBindings(System.Int32)">
            <summary>
            Get a list of default keys for the specified variant.
            </summary>
            <param name="variant">A variant.</param>
            <returns>A list of valid <see cref="T:osu.Framework.Input.Bindings.KeyBinding"/>s.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.GetVariantName(System.Int32)">
            <summary>
            Gets the name for a key binding variant. This is used for display in the settings overlay.
            </summary>
            <param name="variant">The variant.</param>
            <returns>A descriptive name of the variant.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Ruleset.CreateConvertibleReplayFrame">
            <summary>
            For rulesets which support legacy (osu-stable) replay conversion, this method will create an empty replay frame
            for conversion use.
            </summary>
            <returns>An empty frame for the current ruleset, or null if unsupported.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.RulesetConfigCache">
            <summary>
            A cache that provides a single <see cref="T:osu.Game.Rulesets.Configuration.IRulesetConfigManager"/> per-ruleset.
            This is done to support referring to and updating ruleset configs from multiple locations in the absence of inter-config bindings.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.RulesetConfigCache.GetConfigFor(osu.Game.Rulesets.Ruleset)">
            <summary>
            Retrieves the <see cref="T:osu.Game.Rulesets.Configuration.IRulesetConfigManager"/> for a <see cref="T:osu.Game.Rulesets.Ruleset"/>.
            </summary>
            <param name="ruleset">The <see cref="T:osu.Game.Rulesets.Ruleset"/> to retrieve the <see cref="T:osu.Game.Rulesets.Configuration.IRulesetConfigManager"/> for.</param>
            <returns>The <see cref="T:osu.Game.Rulesets.Configuration.IRulesetConfigManager"/> defined by <paramref name="ruleset"/>, null if <paramref name="ruleset"/> doesn't define one.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="ruleset"/> doesn't have a valid <see cref="P:osu.Game.Rulesets.RulesetInfo.ID"/>.</exception>
        </member>
        <member name="M:osu.Game.Rulesets.RulesetStore.GetRuleset(System.Int32)">
            <summary>
            Retrieve a ruleset using a known ID.
            </summary>
            <param name="id">The ruleset's internal ID.</param>
            <returns>A ruleset, if available, else null.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.RulesetStore.GetRuleset(System.String)">
            <summary>
            Retrieve a ruleset using a known short name.
            </summary>
            <param name="shortName">The ruleset's short name.</param>
            <returns>A ruleset, if available, else null.</returns>
        </member>
        <member name="P:osu.Game.Rulesets.RulesetStore.AvailableRulesets">
            <summary>
            All available rulesets.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Scoring.AccumulatingHealthProcessor">
            <summary>
            A <see cref="T:osu.Game.Rulesets.Scoring.HealthProcessor"/> that accumulates health and causes a fail if the final health
            is less than a value required to pass the beatmap.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.AccumulatingHealthProcessor.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Scoring.AccumulatingHealthProcessor"/>.
            </summary>
            <param name="requiredHealth">The minimum amount of health required to beatmap.</param>
        </member>
        <member name="T:osu.Game.Rulesets.Scoring.DrainingHealthProcessor">
            <summary>
            A <see cref="T:osu.Game.Rulesets.Scoring.HealthProcessor"/> which continuously drains health.<br />
            At HP=0, the minimum health reached for a perfect play is 95%.<br />
            At HP=5, the minimum health reached for a perfect play is 70%.<br />
            At HP=10, the minimum health reached for a perfect play is 30%.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.DrainingHealthProcessor.minimum_health_error">
            <summary>
            A reasonable allowable error for the minimum health offset from <see cref="F:osu.Game.Rulesets.Scoring.DrainingHealthProcessor.targetMinimumHealth"/>. A 1% error is unnoticeable.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.DrainingHealthProcessor.min_health_target">
            <summary>
            The minimum health target at an HP drain rate of 0.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.DrainingHealthProcessor.mid_health_target">
            <summary>
            The minimum health target at an HP drain rate of 5.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.DrainingHealthProcessor.max_health_target">
            <summary>
            The minimum health target at an HP drain rate of 10.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.DrainingHealthProcessor.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.Scoring.DrainingHealthProcessor"/>.
            </summary>
            <param name="drainStartTime">The time after which draining should begin.</param>
        </member>
        <member name="E:osu.Game.Rulesets.Scoring.HealthProcessor.Failed">
            <summary>
            Invoked when the <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/> is in a failed state.
            Return true if the fail was permitted.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Scoring.HealthProcessor.FailConditions">
            <summary>
            Additional conditions on top of <see cref="P:osu.Game.Rulesets.Scoring.HealthProcessor.DefaultFailCondition"/> that cause a failing state.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HealthProcessor.Health">
            <summary>
            The current health.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HealthProcessor.IsBreakTime">
            <summary>
            Whether gameplay is currently in a break.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Scoring.HealthProcessor.HasFailed">
            <summary>
            Whether this ScoreProcessor has already triggered the failed state.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HealthProcessor.GetHealthIncreaseFor(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Retrieves the health increase for a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.
            </summary>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/>.</param>
            <returns>The health increase.</returns>
        </member>
        <member name="P:osu.Game.Rulesets.Scoring.HealthProcessor.DefaultFailCondition">
            <summary>
            The default conditions for failing.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.None">
            <summary>
            Indicates that the object has not been judged yet.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.Miss">
            <summary>
            Indicates that the object has been judged as a miss.
            </summary>
            <remarks>
            This miss window should determine how early a hit can be before it is considered for judgement (as opposed to being ignored as
            "too far in the future). It should also define when a forced miss should be triggered (as a result of no user input in time).
            </remarks>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.Ok">
            <summary>
            Optional judgement.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.Perfect">
            <summary>
            Optional judgement.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.SmallTickMiss">
            <summary>
            Indicates small tick miss.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.SmallTickHit">
            <summary>
            Indicates a small tick hit.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.LargeTickMiss">
            <summary>
            Indicates a large tick miss.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.HitResult.LargeTickHit">
            <summary>
            Indicates a large tick hit.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Scoring.HitWindows">
            <summary>
            A structure containing timing data for hit window based gameplay.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Scoring.HitWindows.Empty">
            <summary>
            An empty <see cref="T:osu.Game.Rulesets.Scoring.HitWindows"/> with only <see cref="F:osu.Game.Rulesets.Scoring.HitResult.Miss"/> and <see cref="F:osu.Game.Rulesets.Scoring.HitResult.Perfect"/>.
            No time values are provided (meaning instantaneous hit or miss).
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.LowestSuccessfulHitResult">
            <summary>
            Retrieves the <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/> with the largest hit window that produces a successful hit.
            </summary>
            <returns>The lowest allowed successful <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.GetAllAvailableWindows">
            <summary>
            Retrieves a mapping of <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>s to their timing windows for all allowed <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.IsHitResultAllowed(osu.Game.Rulesets.Scoring.HitResult)">
            <summary>
            Check whether it is possible to achieve the provided <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.
            </summary>
            <param name="result">The result type to check.</param>
            <returns>Whether the <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/> can be achieved.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.SetDifficulty(System.Double)">
            <summary>
            Sets hit windows with values that correspond to a difficulty parameter.
            </summary>
            <param name="difficulty">The parameter.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.ResultFor(System.Double)">
            <summary>
            Retrieves the <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/> for a time offset.
            </summary>
            <param name="timeOffset">The time offset.</param>
            <returns>The hit result, or <see cref="F:osu.Game.Rulesets.Scoring.HitResult.None"/> if <paramref name="timeOffset"/> doesn't result in a judgement.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.WindowFor(osu.Game.Rulesets.Scoring.HitResult)">
            <summary>
            Retrieves the hit window for a <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.
            This is the number of +/- milliseconds allowed for the requested result (so the actual hittable range is double this).
            </summary>
            <param name="result">The expected <see cref="T:osu.Game.Rulesets.Scoring.HitResult"/>.</param>
            <returns>One half of the hit window for <paramref name="result"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.CanBeHit(System.Double)">
            <summary>
            Given a time offset, whether the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> can ever be hit in the future with a non-<see cref="F:osu.Game.Rulesets.Scoring.HitResult.Miss"/> result.
            This happens if <paramref name="timeOffset"/> is less than what is required for <see cref="M:osu.Game.Rulesets.Scoring.HitWindows.LowestSuccessfulHitResult"/>.
            </summary>
            <param name="timeOffset">The time offset.</param>
            <returns>Whether the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> can be hit at any point in the future from this time offset.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.HitWindows.GetRanges">
            <summary>
            Retrieve a valid list of <see cref="T:osu.Game.Rulesets.Scoring.DifficultyRange"/>s representing hit windows.
            Defaults are provided but can be overridden to customise for a ruleset.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.Scoring.JudgementProcessor.NewJudgement">
            <summary>
            Invoked when a new judgement has occurred. This occurs after the judgement has been processed by this <see cref="T:osu.Game.Rulesets.Scoring.JudgementProcessor"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Scoring.JudgementProcessor.MaxHits">
            <summary>
            The maximum number of hits that can be judged.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Scoring.JudgementProcessor.JudgedHits">
            <summary>
            The total number of judged <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s at the current point in time.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Scoring.JudgementProcessor.HasCompleted">
            <summary>
            Whether all <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/>s have been processed.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.ApplyBeatmap(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Applies a <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to this <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to read properties from.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.ApplyResult(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Applies the score change of a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> to this <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/>.
            </summary>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> to apply.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.RevertResult(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Reverts the score change of a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> that was applied to this <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/>.
            </summary>
            <param name="result">The judgement scoring result.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.ApplyResultInternal(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Applies the score change of a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> to this <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/>.
            </summary>
            <remarks>
            Any changes applied via this method can be reverted via <see cref="M:osu.Game.Rulesets.Scoring.JudgementProcessor.RevertResultInternal(osu.Game.Rulesets.Judgements.JudgementResult)"/>.
            </remarks>
            <param name="result">The <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> to apply.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.RevertResultInternal(osu.Game.Rulesets.Judgements.JudgementResult)">
            <summary>
            Reverts the score change of a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> that was applied to this <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/> via <see cref="M:osu.Game.Rulesets.Scoring.JudgementProcessor.ApplyResultInternal(osu.Game.Rulesets.Judgements.JudgementResult)"/>.
            </summary>
            <param name="result">The judgement scoring result.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.Reset(System.Boolean)">
            <summary>
            Resets this <see cref="T:osu.Game.Rulesets.Scoring.JudgementProcessor"/> to a default state.
            </summary>
            <param name="storeResults">Whether to store the current state of the <see cref="T:osu.Game.Rulesets.Scoring.JudgementProcessor"/> for future use.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.CreateResult(osu.Game.Rulesets.Objects.HitObject,osu.Game.Rulesets.Judgements.Judgement)">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> that represents the scoring result for a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> which was judged.</param>
            <param name="judgement">The <see cref="T:osu.Game.Rulesets.Judgements.Judgement"/> that provides the scoring information.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.JudgementProcessor.SimulateAutoplay(osu.Game.Beatmaps.IBeatmap)">
            <summary>
            Simulates an autoplay of the <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to determine scoring values.
            </summary>
            <remarks>This provided temporarily. DO NOT USE.</remarks>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.IBeatmap"/> to simulate.</param>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.TotalScore">
            <summary>
            The current total score.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.Accuracy">
            <summary>
            The current accuracy.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.Combo">
            <summary>
            The current combo.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.Mods">
            <summary>
            The current selected mods
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.Rank">
            <summary>
            The current rank.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.HighestCombo">
            <summary>
            The highest combo achieved by this score.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Scoring.ScoreProcessor.Mode">
            <summary>
            The <see cref="T:osu.Game.Rulesets.Scoring.ScoringMode"/> used to calculate scores.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.ScoreProcessor.Reset(System.Boolean)">
            <summary>
            Resets this ScoreProcessor to a default state.
            </summary>
            <param name="storeResults">Whether to store the current state of the <see cref="T:osu.Game.Rulesets.Scoring.ScoreProcessor"/> for future use.</param>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.ScoreProcessor.PopulateScore(osu.Game.Scoring.ScoreInfo)">
            <summary>
            Retrieve a score populated with data for the current play this processor is responsible for.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Scoring.ScoreProcessor.CreateHitWindows">
            <summary>
            Create a <see cref="T:osu.Game.Rulesets.Scoring.HitWindows"/> for this processor.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.Timing.MultiplierControlPoint">
            <summary>
            A control point which adds an aggregated multiplier based on the provided <see cref="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.TimingPoint"/>'s BeatLength and <see cref="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.DifficultyPoint"/>'s SpeedMultiplier.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.StartTime">
            <summary>
            The time in milliseconds at which this <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/> starts.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.Timing.MultiplierControlPoint.Multiplier">
            <summary>
            The aggregate multiplier which this <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/> provides.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.BaseBeatLength">
            <summary>
            The base beat length to scale the <see cref="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.TimingPoint"/> provided multiplier relative to.
            </summary>
            <example>For a <see cref="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.BaseBeatLength"/> of 1000, a <see cref="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.TimingPoint"/> with a beat length of 500 will increase the multiplier by 2.</example>
        </member>
        <member name="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.Velocity">
            <summary>
            The velocity multiplier.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.TimingPoint">
            <summary>
            The <see cref="T:osu.Game.Beatmaps.ControlPoints.TimingControlPoint"/> that provides the timing information for this <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.Timing.MultiplierControlPoint.DifficultyPoint">
            <summary>
            The <see cref="T:osu.Game.Beatmaps.ControlPoints.DifficultyControlPoint"/> that provides additional difficulty information for this <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Timing.MultiplierControlPoint.#ctor">
            <summary>
            Creates a <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>. This is required for JSON serialization
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.Timing.MultiplierControlPoint.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>.
            </summary>
            <param name="startTime">The start time of this <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>.</param>
        </member>
        <member name="T:osu.Game.Rulesets.UI.DrawableRuleset`1">
            <summary>
            Displays an interactive ruleset gameplay instance.
            </summary>
            <typeparam name="TObject">The type of HitObject contained by this DrawableRuleset.</typeparam>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset`1.Variant">
            <summary>
            The selected variant.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.DrawableRuleset`1.KeyBindingInputManager">
            <summary>
            The key conversion input manager for this DrawableRuleset.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset`1.Playfield">
            <summary>
            The playfield.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset`1.FrameStablePlayback">
            <summary>
            Whether to enable frame-stable playback.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.DrawableRuleset`1.Beatmap">
            <summary>
            The beatmap.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.DrawableRuleset`1.Mods">
            <summary>
            The mods which are to be applied.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.#ctor(osu.Game.Rulesets.Ruleset,osu.Game.Beatmaps.IBeatmap,System.Collections.Generic.IReadOnlyList{osu.Game.Rulesets.Mods.Mod})">
            <summary>
            Creates a ruleset visualisation for the provided ruleset and beatmap.
            </summary>
            <param name="ruleset">The ruleset being represented.</param>
            <param name="beatmap">The beatmap to create the hit renderer for.</param>
            <param name="mods">The <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s to apply.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.loadObjects(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates and adds drawable representations of hit objects to the play field.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.addHitObject(`0)">
            <summary>
            Creates and adds the visual representation of a <typeparamref name="TObject"/> to this <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/>.
            </summary>
            <param name="hitObject">The <typeparamref name="TObject"/> to add the visual representation for.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.CreateDrawableRepresentation(`0)">
            <summary>
            Creates a DrawableHitObject from a HitObject.
            </summary>
            <param name="h">The HitObject to make drawable.</param>
            <returns>The DrawableHitObject.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.CreateInputManager">
            <summary>
            Creates a key conversion input manager. An exception will be thrown if a valid <see cref="T:osu.Game.Rulesets.UI.RulesetInputManager`1"/> is not returned.
            </summary>
            <returns>The input manager.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.CreatePlayfield">
            <summary>
            Creates a Playfield.
            </summary>
            <returns>The Playfield.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset`1.applyRulesetMods(System.Collections.Generic.IReadOnlyList{osu.Game.Rulesets.Mods.Mod},osu.Game.Configuration.OsuConfigManager)">
            <summary>
            Applies the active mods to this DrawableRuleset.
            </summary>
            <param name="mods">The <see cref="T:osu.Game.Rulesets.Mods.Mod"/>s to apply.</param>
            <param name="config">The <see cref="T:osu.Game.Configuration.OsuConfigManager"/> to apply.</param>
        </member>
        <member name="T:osu.Game.Rulesets.UI.DrawableRuleset">
            <summary>
            Displays an interactive ruleset gameplay instance.
            <remarks>
            This type is required only for adding non-generic type to the draw hierarchy.
            Once IDrawable is a thing, this can also become an interface.
            </remarks>
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.UI.DrawableRuleset.OnNewResult">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> has been applied by a <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
        </member>
        <member name="E:osu.Game.Rulesets.UI.DrawableRuleset.OnRevertResult">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Judgements.JudgementResult"/> is being reverted by a <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.DrawableRuleset.HasReplayLoaded">
            <summary>
            Whether a replay is currently loaded.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.DrawableRuleset.IsPaused">
            <summary>
            Whether the game is paused. Used to block user input.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.Playfield">
            <summary>
            The playfield.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.Overlays">
            <summary>
            Content to be placed above hitobjects. Will be affected by frame stability.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.FrameStableComponents">
            <summary>
            Components to be run potentially multiple times in line with frame-stable gameplay.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.FrameStableClock">
            <summary>
            The frame-stable clock which is being used for playfield display.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.DrawableRuleset.Ruleset">
            <summary>~
            The associated ruleset.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset.#ctor(osu.Game.Rulesets.Ruleset)">
            <summary>
            Creates a ruleset visualisation for the provided ruleset.
            </summary>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.Objects">
            <summary>
            All the converted hit objects contained by this hit renderer.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.GameplayStartTime">
            <summary>
            The point in time at which gameplay starts, including any required lead-in for display purposes.
            Defaults to two seconds before the first <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>. Override as necessary.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.ReplayScore">
            <summary>
            The currently loaded replay. Usually null in the case of a local player.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.Cursor">
            <summary>
            The cursor being displayed by the <see cref="P:osu.Game.Rulesets.UI.DrawableRuleset.Playfield"/>. May be null if no cursor is provided.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.ResumeOverlay">
            <summary>
            An optional overlay used when resuming gameplay from a paused state.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.FirstAvailableHitWindows">
            <summary>
            Returns first available <see cref="T:osu.Game.Rulesets.Scoring.HitWindows"/> provided by a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.DrawableRuleset.AllowGameplayOverlays">
            <summary>
            Whether to display gameplay overlays, such as <see cref="T:osu.Game.Screens.Play.HUDOverlay"/> and <see cref="T:osu.Game.Screens.Play.BreakOverlay"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset.SetReplayScore(osu.Game.Scoring.Score)">
            <summary>
            Sets a replay to be used, overriding local input.
            </summary>
            <param name="replayScore">The replay, null for local input.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset.SetRecordTarget(osu.Game.Replays.Replay)">
            <summary>
            Sets a replay to be used to record gameplay.
            </summary>
            <param name="recordingReplay">The target to be recorded to.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset.RequestResume(System.Action)">
            <summary>
            Invoked when the interactive user requests resuming from a paused state.
            Allows potentially delaying the resume process until an interaction is performed.
            </summary>
            <param name="continueResume">The action to run when resuming is to be completed.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.DrawableRuleset.CancelResume">
            <summary>
            Invoked when the user requests to pause while the resume overlay is active.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.UI.FallbackSampleStore">
            <summary>
            A sample store which adds a fallback source.
            </summary>
            <remarks>
            This is a temporary implementation to workaround ISampleStore limitations.
            </remarks>
        </member>
        <member name="T:osu.Game.Rulesets.UI.FrameStabilityContainer">
            <summary>
            A container which consumes a parent gameplay clock and standardises frame counts for children.
            Will ensure a minimum of 50 frames per clock second is maintained, regardless of any system lag or seeks.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.FrameStabilityContainer.MaxCatchUpFrames">
            <summary>
            The number of frames (per parent frame) which can be run in an attempt to catch-up to real-time.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.FrameStabilityContainer.FrameStablePlayback">
            <summary>
            Whether to enable frame-stable playback.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.FrameStabilityContainer.direction">
            <summary>
            The current direction of playback to be exposed to frame stable children.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.FrameStabilityContainer.requireMoreUpdateLoops">
            <summary>
            Whether we are running up-to-date with our parent clock.
            If not, we will need to keep processing children until we catch up.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.FrameStabilityContainer.validState">
            <summary>
            Whether we are in a valid state (ie. should we keep processing children frames).
            This should be set to false when the replay is, for instance, waiting for future frames to arrive.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.GameplayCursorContainer.LastFrameState">
             <summary>
             Because Show/Hide are executed by a parent, <see cref="F:osu.Framework.Graphics.Containers.VisibilityContainer.State"/> is updated immediately even if the cursor
             is in a non-updating state (via <see cref="T:osu.Game.Rulesets.UI.FrameStabilityContainer"/> limitations).
            
             This holds the true visibility value.
             </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Playfield.HitObjectContainer">
            <summary>
            The <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> contained in this Playfield.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Playfield.GamefieldToScreenSpace">
            <summary>
            A function that converts gamefield coordinates to screen space.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Playfield.ScreenSpaceToGamefield">
            <summary>
            A function that converts screen space coordinates to gamefield.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Playfield.AllHitObjects">
            <summary>
            All the <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s contained in this <see cref="T:osu.Game.Rulesets.UI.Playfield"/> and all <see cref="P:osu.Game.Rulesets.UI.Playfield.NestedPlayfields"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Playfield.NestedPlayfields">
            <summary>
            All <see cref="T:osu.Game.Rulesets.UI.Playfield"/>s nested inside this <see cref="T:osu.Game.Rulesets.UI.Playfield"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Playfield.DisplayJudgements">
            <summary>
            Whether judgements should be displayed by this and and all nested <see cref="T:osu.Game.Rulesets.UI.Playfield"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.#ctor">
            <summary>
            Creates a new <see cref="T:osu.Game.Rulesets.UI.Playfield"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.PostProcess">
            <summary>
            Performs post-processing tasks (if any) after all DrawableHitObjects are loaded into this Playfield.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.Add(osu.Game.Rulesets.Objects.Drawables.DrawableHitObject)">
            <summary>
            Adds a DrawableHitObject to this Playfield.
            </summary>
            <param name="h">The DrawableHitObject to add.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.Remove(osu.Game.Rulesets.Objects.Drawables.DrawableHitObject)">
            <summary>
            Remove a DrawableHitObject from this Playfield.
            </summary>
            <param name="h">The DrawableHitObject to remove.</param>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Playfield.Cursor">
            <summary>
            The cursor currently being used by this <see cref="T:osu.Game.Rulesets.UI.Playfield"/>. May be null if no cursor is provided.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.CreateCursor">
            <summary>
            Provide a cursor which is to be used for gameplay.
            </summary>
            <remarks>
            The default provided cursor is invisible when inside the bounds of the <see cref="T:osu.Game.Rulesets.UI.Playfield"/>.
            </remarks>
            <returns>The cursor, or null to show the menu cursor.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.AddNested(osu.Game.Rulesets.UI.Playfield)">
            <summary>
            Registers a <see cref="T:osu.Game.Rulesets.UI.Playfield"/> as a nested <see cref="T:osu.Game.Rulesets.UI.Playfield"/>.
            This does not add the <see cref="T:osu.Game.Rulesets.UI.Playfield"/> to the draw hierarchy.
            </summary>
            <param name="otherPlayfield">The <see cref="T:osu.Game.Rulesets.UI.Playfield"/> to add.</param>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Playfield.CreateHitObjectContainer">
            <summary>
            Creates the container that will be used to contain the <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.UI.PlayfieldAdjustmentContainer">
            <summary>
            A container which handles sizing of the <see cref="T:osu.Game.Rulesets.UI.Playfield"/> and any other components that need to match their size.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.UI.IHasReplayHandler">
            <summary>
            Expose the <see cref="P:osu.Game.Rulesets.UI.IHasReplayHandler.ReplayInputHandler"/>  in a capable <see cref="T:osu.Framework.Input.InputManager"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.UI.ICanAttachKeyCounter">
            <summary>
            Supports attaching a <see cref="T:osu.Game.Screens.Play.KeyCounterDisplay"/>.
            Keys will be populated automatically and a receptor will be injected inside.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm.GetDisplayStartTime(System.Double,System.Single,System.Double,System.Single)">
            <summary>
            Given a point in time associated with an object's origin
            and the spatial distance between the edge and the origin of the object along the scrolling axis,
            computes the time at which the object initially enters the time range.
            </summary>
            <example>
            Let's assume the following parameters:
            <list type="bullet">
                <item><paramref name="originTime"/> = 7000ms,</item>
                <item><paramref name="offset"/> = 100px,</item>
                <item><paramref name="timeRange"/> = 5000ms,</item>
                <item><paramref name="scrollLength"/> = 1000px</item>
            </list>
            and a constant scrolling rate.
            To arrive at the end of the scrolling container, the object's origin has to cover
            <code>1000 + 100 = 1100px</code>
            so that the edge starts at the end of the scrolling container.
            One scroll length of 1000px covers 5000ms of time, so the time required to cover 1100px is equal to
            <code>5000 * (1100 / 1000) = 5500ms,</code>
            and therefore the object should start being visible at
            <code>7000 - 5500 = 1500ms.</code>
            </example>
            <param name="originTime">The time point at which the object origin should enter the time range.</param>
            <param name="offset">The spatial distance between the object's edge and its origin along the scrolling axis.</param>
            <param name="timeRange">The amount of visible time.</param>
            <param name="scrollLength">The absolute spatial length through <paramref name="timeRange"/>.</param>
            <returns>The time at which the object should enter the time range.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm.GetLength(System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Computes the spatial length within a start and end time.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="timeRange">The amount of visible time.</param>
            <param name="scrollLength">The absolute spatial length through <paramref name="timeRange"/>.</param>
            <returns>The absolute spatial length.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm.PositionAt(System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Given the current time, computes the spatial position of a point in time.
            </summary>
            <param name="time">The time to compute the spatial position of.</param>
            <param name="currentTime">The current time.</param>
            <param name="timeRange">The amount of visible time.</param>
            <param name="scrollLength">The absolute spatial length through <paramref name="timeRange"/>.</param>
            <returns>The absolute spatial position.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm.TimeAt(System.Single,System.Double,System.Double,System.Single)">
            <summary>
            Computes the time which brings a point to a provided spatial position given the current time.
            </summary>
            <param name="position">The absolute spatial position.</param>
            <param name="currentTime">The current time.</param>
            <param name="timeRange">The amount of visible time.</param>
            <param name="scrollLength">The absolute spatial length through <paramref name="timeRange"/>.</param>
            <returns>The time at which <see cref="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm.PositionAt(System.Double,System.Double,System.Double,System.Single)"/> == <paramref name="position"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm.Reset">
            <summary>
            Resets this <see cref="T:osu.Game.Rulesets.UI.Scrolling.Algorithms.IScrollAlgorithm"/> to a default state.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.OverlappingScrollAlgorithm.controlPointAt(System.Double)">
            <summary>
            Finds the <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/> which affects the speed of hitobjects at a specific time.
            </summary>
            <param name="time">The time which the <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/> should affect.</param>
            <returns>The <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>.</returns>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.Algorithms.SequentialScrollAlgorithm.relativePositionAt(System.Double,System.Double)">
            <summary>
            Finds the position which corresponds to a point in time.
            This is a non-linear operation that depends on all the control points up to and including the one active at the time value.
            </summary>
            <param name="time">The time to find the position at.</param>
            <param name="timeRange">The amount of time visualised by the scrolling area.</param>
            <returns>A positive value indicating the position at <paramref name="time"/>.</returns>
        </member>
        <member name="T:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1">
            <summary>
            A type of <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/> that supports a <see cref="T:osu.Game.Rulesets.UI.Scrolling.ScrollingPlayfield"/>.
            <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s inside this <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/> will scroll within the playfield.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.time_span_default">
            <summary>
            The default span of time visible by the length of the scrolling axes.
            This is clamped between <see cref="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.time_span_min"/> and <see cref="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.time_span_max"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.time_span_min">
            <summary>
            The minimum span of time that may be visible by the length of the scrolling axes.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.time_span_max">
            <summary>
            The maximum span of time that may be visible by the length of the scrolling axes.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.time_span_step">
            <summary>
            The step increase/decrease of the span of time visible by the length of the scrolling axes.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.TimeRange">
            <summary>
            The span of time that is visible by the length of the scrolling axes.
            For example, only hit objects with start time less than or equal to 1000 will be visible with <see cref="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.TimeRange"/> = 1000.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.UserScrollSpeedAdjustment">
            <summary>
            Whether the player can change <see cref="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.TimeRange"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.RelativeScaleBeatLengths">
            <summary>
            Whether <see cref="T:osu.Game.Beatmaps.ControlPoints.TimingControlPoint"/> beat lengths should scale relative to the most common beat length in the <see cref="T:osu.Game.Beatmaps.Beatmap"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.ControlPoints">
            <summary>
            The <see cref="T:osu.Game.Rulesets.Timing.MultiplierControlPoint"/>s that adjust the scrolling rate of <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s inside this <see cref="T:osu.Game.Rulesets.UI.DrawableRuleset`1"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Rulesets.UI.Scrolling.DrawableScrollingRuleset`1.AdjustScrollSpeed(System.Int32)">
            <summary>
            Adjusts the scroll speed of <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </summary>
            <param name="amount">The amount to adjust by. Greater than 0 if the scroll speed should be increased, less than 0 if it should be decreased.</param>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Scrolling.IScrollingInfo.Direction">
            <summary>
            The direction <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s should scroll in.
            </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Scrolling.IScrollingInfo.TimeRange">
             <summary>
            
             </summary>
        </member>
        <member name="P:osu.Game.Rulesets.UI.Scrolling.IScrollingInfo.Algorithm">
            <summary>
            The algorithm which controls <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> positions and sizes.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.ScrollingDirection.Up">
            <summary>
            Hit objects will scroll vertically from the bottom of the hitobject container.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.ScrollingDirection.Down">
            <summary>
            Hit objects will scroll vertically from the top of the hitobject container.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.ScrollingDirection.Left">
            <summary>
            Hit objects will scroll horizontally from the right of the hitobject container.
            </summary>
        </member>
        <member name="F:osu.Game.Rulesets.UI.Scrolling.ScrollingDirection.Right">
            <summary>
            Hit objects will scroll horizontally from the left of the hitobject container.
            </summary>
        </member>
        <member name="T:osu.Game.Rulesets.UI.Scrolling.ScrollingPlayfield">
            <summary>
            A type of <see cref="T:osu.Game.Rulesets.UI.Playfield"/> specialized towards scrolling <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s.
            </summary>
        </member>
        <member name="T:osu.Game.Scoring.Legacy.DatabasedLegacyScoreDecoder">
            <summary>
            A <see cref="T:osu.Game.Scoring.Legacy.LegacyScoreDecoder"/> which retrieves the applicable <see cref="T:osu.Game.Beatmaps.Beatmap"/> and <see cref="T:osu.Game.Rulesets.Ruleset"/>
            for the score from the database.
            </summary>
        </member>
        <member name="M:osu.Game.Scoring.Legacy.LegacyScoreDecoder.GetRuleset(System.Int32)">
            <summary>
            Retrieves the <see cref="T:osu.Game.Rulesets.Ruleset"/> for a specific id.
            </summary>
            <param name="rulesetId">The id.</param>
            <returns>The <see cref="T:osu.Game.Rulesets.Ruleset"/>.</returns>
        </member>
        <member name="M:osu.Game.Scoring.Legacy.LegacyScoreDecoder.GetBeatmap(System.String)">
            <summary>
            Retrieves the <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/> corresponding to an MD5 hash.
            </summary>
            <param name="md5Hash">The MD5 hash.</param>
            <returns>The <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>.</returns>
        </member>
        <member name="F:osu.Game.Screens.Backgrounds.BackgroundScreenBeatmap.USER_BLUR_FACTOR">
            <summary>
            The amount of blur to apply when full user blur is requested.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Backgrounds.BackgroundScreenBeatmap.EnableUserDim">
            <summary>
            Whether or not user dim settings should be applied to this Background.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Backgrounds.BackgroundScreenBeatmap.BlurAmount">
            <summary>
            The amount of blur to be applied in addition to user-specified blur.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Backgrounds.BackgroundScreenBeatmap.DimmableBackground.BlurAmount">
            <summary>
            The amount of blur to be applied to the background in addition to user-specified blur.
            </summary>
            <remarks>
            Used in contexts where there can potentially be both user and screen-specified blurring occuring at the same time, such as in <see cref="T:osu.Game.Screens.Play.PlayerLoader"/>
            </remarks>
        </member>
        <member name="P:osu.Game.Screens.Backgrounds.BackgroundScreenBeatmap.DimmableBackground.blurTarget">
            <summary>
            As an optimisation, we add the two blur portions to be applied rather than actually applying two separate blurs.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.BindableBeatDivisor.GetColourFor(System.Int32,osu.Game.Graphics.OsuColour)">
            <summary>
            Retrieves the appropriate colour for a beat divisor.
            </summary>
            <param name="beatDivisor">The beat divisor.</param>
            <param name="colours">The set of colours.</param>
            <returns>The applicable colour from <paramref name="colours"/> for <paramref name="beatDivisor"/>.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.BindableBeatDivisor.GetDivisorForBeatIndex(System.Int32,System.Int32)">
            <summary>
            Retrieves the applicable divisor for a specific beat index.
            </summary>
            <param name="index">The 0-based beat index.</param>
            <param name="beatDivisor">The beat divisor.</param>
            <returns>The applicable divisor.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.Components.Menus.EditorMenuBar.DrawableEditorBarMenuItem.BackgroundBox.Expand">
            <summary>
            Expands the background such that it doesn't show the bottom corners.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Components.Menus.EditorMenuBar.DrawableEditorBarMenuItem.BackgroundBox.Contract">
            <summary>
            Contracts the background such that it shows the bottom corners.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Components.RadioButtons.DrawableRadioButton.Selected">
            <summary>
            Invoked when this <see cref="T:osu.Game.Screens.Edit.Components.RadioButtons.DrawableRadioButton"/> has been selected.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton.Selected">
            <summary>
            Whether this <see cref="T:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton"/> is selected.
            </summary>
            <returns></returns>
        </member>
        <member name="F:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton.Item">
            <summary>
            The item related to this button.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton.Select">
            <summary>
            Selects this <see cref="T:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton.Deselect">
            <summary>
            Deselects this <see cref="T:osu.Game.Screens.Edit.Components.RadioButtons.RadioButton"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Parts.BookmarkPart">
            <summary>
            The part of the timeline that displays bookmarks.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Parts.BreakPart">
            <summary>
            The part of the timeline that displays breaks in the song.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Parts.ControlPointPart">
            <summary>
            The part of the timeline that displays the control points.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Parts.MarkerPart">
            <summary>
            The part of the timeline that displays the current position of the song.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Components.Timelines.Summary.Parts.MarkerPart.seekToPosition(osuTK.Vector2)">
            <summary>
            Seeks the <see cref="T:osu.Game.Screens.Edit.Components.Timelines.Summary.SummaryTimeline"/> to the time closest to a position on the screen relative to the <see cref="T:osu.Game.Screens.Edit.Components.Timelines.Summary.SummaryTimeline"/>.
            </summary>
            <param name="screenPosition">The position in screen coordinates.</param>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Parts.TimelinePart`1">
            <summary>
            Represents a part of the summary timeline..
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.SummaryTimeline">
            <summary>
            The timeline that sits at the bottom of the editor.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Visualisations.DurationVisualisation">
            <summary>
            Represents a spanning point on a timeline part.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Components.Timelines.Summary.Visualisations.PointVisualisation">
            <summary>
            Represents a singular point on a timeline part.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer">
            <summary>
            A container which provides a "blueprint" display of hitobjects.
            Includes selection and manipulation support via a <see cref="T:osu.Game.Screens.Edit.Compose.Components.SelectionHandler"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.CreateSelectionHandler">
            <summary>
            Creates a <see cref="T:osu.Game.Screens.Edit.Compose.Components.SelectionHandler"/> which outlines <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s and handles movement of selections.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.CreateBlueprintFor(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Creates a <see cref="T:osu.Game.Rulesets.Edit.SelectionBlueprint"/> for a specific <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/> to create the overlay for.</param>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.clickSelectionBegan">
            <summary>
            Whether a blueprint was selected by a previous click event.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.beginClickSelection(osu.Framework.Input.Events.MouseButtonEvent)">
            <summary>
            Attempts to select any hovered blueprints.
            </summary>
            <param name="e">The input event that triggered this selection.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.endClickSelection">
            <summary>
            Finishes the current blueprint selection.
            </summary>
            <returns>Whether a click selection was active.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.select(osu.Framework.Graphics.Primitives.RectangleF)">
            <summary>
            Select all masks in a given rectangle selection area.
            </summary>
            <param name="rect">The rectangle to perform a selection on in screen-space coordinates.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.selectAll">
            <summary>
            Selects all <see cref="T:osu.Game.Rulesets.Edit.SelectionBlueprint"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.deselectAll">
            <summary>
            Deselects all selected <see cref="T:osu.Game.Rulesets.Edit.SelectionBlueprint"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.prepareSelectionMovement">
            <summary>
            Attempts to begin the movement of any selected blueprints.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.moveCurrentSelection(osu.Framework.Input.Events.DragEvent)">
            <summary>
            Moves the current selected blueprints.
            </summary>
            <param name="e">The <see cref="T:osu.Framework.Input.Events.DragEvent"/> defining the movement event.</param>
            <returns>Whether a movement was active.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.BlueprintContainer.finishSelectionMovement">
            <summary>
            Finishes the current movement of selected blueprints.
            </summary>
            <returns>Whether a movement was active.</returns>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.ComposeBlueprintContainer">
            <summary>
            A blueprint container generally displayed as an overlay to a ruleset's playfield.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.ComposeBlueprintContainer.refreshTool">
            <summary>
            Refreshes the current placement tool.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.ComposeBlueprintContainer.CurrentTool">
            <summary>
            The current placement tool.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid">
            <summary>
            A grid which takes user input and returns a quantized ("snapped") position and time.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.DistanceSpacing">
            <summary>
            The spacing between each tick of the beat snapping grid.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.MaxIntervals">
            <summary>
            The maximum number of distance snapping intervals allowed.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.StartPosition">
            <summary>
            The position which the grid should start.
            The first beat snapping tick is located at <see cref="F:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.StartPosition"/> + <see cref="P:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.DistanceSpacing"/> away from this point.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.StartTime">
            <summary>
            The snapping time at <see cref="F:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.StartPosition"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.#ctor(osuTK.Vector2,System.Double,System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid"/>.
            </summary>
            <param name="startPosition">The position at which the grid should start. The first tick is located one distance spacing length away from this point.</param>
            <param name="startTime">The snapping time at <see cref="F:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.StartPosition"/>.</param>
            <param name="endTime">The time at which the snapping grid should end. If null, the grid will continue until the bounds of the screen are exceeded.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.CreateContent">
            <summary>
            Creates the content which visualises the grid ticks.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.GetSnappedPosition(osuTK.Vector2)">
            <summary>
            Snaps a position to this grid.
            </summary>
            <param name="position">The original position in coordinate space local to this <see cref="T:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid"/>.</param>
            <returns>A tuple containing the snapped position in coordinate space local to this <see cref="T:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid"/> and the respective time value.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.DistanceSnapGrid.GetColourForIndexFromPlacement(System.Int32)">
            <summary>
            Retrieves the applicable colour for a beat index.
            </summary>
            <param name="placementIndex">The 0-based beat index from the point of placement.</param>
            <returns>The applicable colour.</returns>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.DragBox">
            <summary>
            A box that displays the drag selection and provides selection events for users to handle.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.DragBox.#ctor(System.Action{osu.Framework.Graphics.Primitives.RectangleF})">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Edit.Compose.Components.DragBox"/>.
            </summary>
            <param name="performSelection">A delegate that performs drag selection.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.DragBox.HandleDrag(osu.Framework.Input.Events.MouseButtonEvent)">
            <summary>
            Handle a forwarded mouse event.
            </summary>
            <param name="e">The mouse event.</param>
            <returns>Whether the event should be handled and blocking.</returns>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.EditorPlayfieldBorder">
            <summary>
            Provides a border around the playfield.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent">
            <summary>
            An event which occurs when a <see cref="T:osu.Game.Rulesets.Edit.OverlaySelectionBlueprint"/> is moved.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent.Blueprint">
            <summary>
            The <see cref="T:osu.Game.Rulesets.Edit.SelectionBlueprint"/> that triggered this <see cref="T:osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent.ScreenSpacePosition">
            <summary>
            The expected screen-space position of the hitobject at the current cursor position.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent.InstantDelta">
            <summary>
            The distance between <see cref="F:osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent.ScreenSpacePosition"/> and the hitobject's current position, in the coordinate-space of the hitobject's parent.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.Compose.Components.SelectionHandler">
            <summary>
            A component which outlines <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s and handles movement of selections.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.HandleMovement(osu.Game.Screens.Edit.Compose.Components.MoveSelectionEvent)">
            <summary>
            Handles the selected <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s being moved.
            </summary>
            <param name="moveEvent">The move event.</param>
            <returns>Whether any <see cref="T:osu.Game.Rulesets.Objects.Drawables.DrawableHitObject"/>s were moved.</returns>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.DeselectAll">
            <summary>
            Bind an action to deselect all selected blueprints.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.HandleSelected(osu.Game.Rulesets.Edit.SelectionBlueprint)">
            <summary>
            Handle a blueprint becoming selected.
            </summary>
            <param name="blueprint">The blueprint.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.HandleDeselected(osu.Game.Rulesets.Edit.SelectionBlueprint)">
            <summary>
            Handle a blueprint becoming deselected.
            </summary>
            <param name="blueprint">The blueprint.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.HandleSelectionRequested(osu.Game.Rulesets.Edit.SelectionBlueprint,osu.Framework.Input.States.InputState)">
            <summary>
            Handle a blueprint requesting selection.
            </summary>
            <param name="blueprint">The blueprint.</param>
            <param name="state">The input state at the point of selection.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.UpdateVisibility">
            <summary>
            Updates whether this <see cref="T:osu.Game.Screens.Edit.Compose.Components.SelectionHandler"/> is visible.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.AddHitSample(System.String)">
            <summary>
            Adds a hit sample to all selected <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </summary>
            <param name="sampleName">The name of the hit sample.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.SelectionHandler.RemoveHitSample(System.String)">
            <summary>
            Removes a hit sample from all selected <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </summary>
            <param name="sampleName">The name of the hit sample.</param>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.Timeline.lastScrollPosition">
            <summary>
            The timeline's scroll position in the last frame.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.Timeline.lastTrackTime">
            <summary>
            The track time in the last frame.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.Timeline.handlingDragInput">
            <summary>
            Whether the user is currently dragging the timeline.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.Timeline.trackWasPlaying">
            <summary>
            Whether the track was playing before a user drag event.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.TimelineButton.TimelineIconButton.repeat_initial_delay">
            <summary>
            The initial delay before mouse down repeat begins.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.TimelineButton.TimelineIconButton.repeat_tick_rate">
            <summary>
            The delay between mouse down repeats after the initial repeat.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.ZoomDuration">
            <summary>
            The time to zoom into/out of a point.
            All user scroll input will be overwritten during the zoom transform.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.ZoomEasing">
            <summary>
            The easing with which to transform the zoom.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.MinZoom">
            <summary>
            The minimum zoom level allowed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.MaxZoom">
            <summary>
            The maximum zoom level allowed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.Zoom">
            <summary>
            Gets or sets the content zoom level of this <see cref="T:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.TransformZoom.focusPoint">
            <summary>
            The focus point in absolute coordinates local to the content.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.TransformZoom.contentSize">
            <summary>
            The size of the content.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.TransformZoom.scrollOffset">
            <summary>
            The scroll offset at the start of the transform.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.TransformZoom.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Transforms <see cref="F:osu.Game.Screens.Edit.Compose.Components.Timeline.ZoomableScrollContainer.currentZoom"/> to a new value.
            </summary>
            <param name="focusPoint">The focus point in absolute coordinates local to the content.</param>
            <param name="contentSize">The size of the content.</param>
            <param name="scrollOffset">The scroll offset at the start of the transform.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.IPlacementHandler.BeginPlacement(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Notifies that a placement has begun.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> being placed.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.IPlacementHandler.EndPlacement(osu.Game.Rulesets.Objects.HitObject,System.Boolean)">
            <summary>
            Notifies that a placement has finished.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> that has been placed.</param>
            <param name="commit">Whether the object should be committed.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.Compose.IPlacementHandler.Delete(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Deletes a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to delete.</param>
        </member>
        <member name="E:osu.Game.Screens.Edit.EditorBeatmap.HitObjectAdded">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> is added to this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
        </member>
        <member name="E:osu.Game.Screens.Edit.EditorBeatmap.HitObjectRemoved">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> is removed from this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
        </member>
        <member name="E:osu.Game.Screens.Edit.EditorBeatmap.HitObjectUpdated">
            <summary>
            Invoked when a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> is updated.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.EditorBeatmap.SelectedHitObjects">
            <summary>
            All currently selected <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Edit.EditorBeatmap.PlacementObject">
            <summary>
            The current placement. Null if there's no active placement.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.UpdateHitObject(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Updates a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>, invoking <see cref="M:osu.Game.Rulesets.Objects.HitObject.ApplyDefaults(osu.Game.Beatmaps.ControlPoints.ControlPointInfo,osu.Game.Beatmaps.BeatmapDifficulty)"/> and re-processing the beatmap.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to update.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.AddRange(System.Collections.Generic.IEnumerable{osu.Game.Rulesets.Objects.HitObject})">
            <summary>
            Adds a collection of <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s to this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
            <param name="hitObjects">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s to add.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.Add(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Adds a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to add.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.Insert(System.Int32,osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Inserts a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> into this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
            <remarks>
            It is the invoker's responsibility to make sure that <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> sorting order is maintained.
            </remarks>
            <param name="index">The index to insert the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> at.</param>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to insert.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.Remove(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Removes a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> from this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to add.</param>
            <returns>True if the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> has been removed, false otherwise.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.FindIndex(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Finds the index of a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> in this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
            <param name="hitObject">The <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to search for.</param>
            <returns>The index of <paramref name="hitObject"/>.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> at an index in this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
            <param name="index">The index of the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> to remove.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorBeatmap.Clear">
            <summary>
            Clears all <see cref="P:osu.Game.Screens.Edit.EditorBeatmap.HitObjects"/> from this <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.EditorChangeHandler">
            <summary>
            Tracks changes to the <see cref="T:osu.Game.Screens.Edit.Editor"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorChangeHandler.#ctor(osu.Game.Screens.Edit.EditorBeatmap)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Edit.EditorChangeHandler"/>.
            </summary>
            <param name="editorBeatmap">The <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/> to track the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s of.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorChangeHandler.SaveState">
            <summary>
            Saves the current <see cref="T:osu.Game.Screens.Edit.Editor"/> state.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorChangeHandler.RestoreState(System.Int32)">
            <summary>
            Restores an older or newer state.
            </summary>
            <param name="direction">The direction to restore in. If less than 0, an older state will be used. If greater than 0, a newer state will be used.</param>
        </member>
        <member name="T:osu.Game.Screens.Edit.EditorClock">
            <summary>
            A decoupled clock which adds editor-specific functionality, such as snapping to a user-defined beat divisor.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorClock.SeekSnapped(System.Double)">
            <summary>
            Seek to the closest snappable beat from a time.
            </summary>
            <param name="position">The raw position which should be seeked around.</param>
            <returns>Whether the seek could be performed.</returns>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorClock.SeekBackward(System.Boolean,System.Double)">
            <summary>
            Seeks backwards by one beat length.
            </summary>
            <param name="snapped">Whether to snap to the closest beat after seeking.</param>
            <param name="amount">The relative amount (magnitude) which should be seeked.</param>
        </member>
        <member name="M:osu.Game.Screens.Edit.EditorClock.SeekForward(System.Boolean,System.Double)">
            <summary>
            Seeks forwards by one beat length.
            </summary>
            <param name="snapped">Whether to snap to the closest beat after seeking.</param>
            <param name="amount">The relative amount (magnitude) which should be seeked.</param>
        </member>
        <member name="T:osu.Game.Screens.Edit.EditorScreen">
            <summary>
            TODO: eventually make this inherit Screen and add a local screen stack inside the Editor.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Edit.IEditorChangeHandler">
            <summary>
            Interface for a component that manages changes in the <see cref="T:osu.Game.Screens.Edit.Editor"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Edit.IEditorChangeHandler.BeginChange">
            <summary>
            Begins a bulk state change event. <see cref="M:osu.Game.Screens.Edit.IEditorChangeHandler.EndChange"/> should be invoked soon after.
            </summary>
            <remarks>
            This should be invoked when multiple changes to the <see cref="T:osu.Game.Screens.Edit.Editor"/> should be bundled together into one state change event.
            When nested invocations are involved, a state change will not occur until an equal number of invocations of <see cref="M:osu.Game.Screens.Edit.IEditorChangeHandler.EndChange"/> are received.
            </remarks>
            <example>
            When a group of <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>s are deleted, a single undo and redo state change should update the state of all <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </example>
        </member>
        <member name="M:osu.Game.Screens.Edit.IEditorChangeHandler.EndChange">
            <summary>
            Ends a bulk state change event.
            </summary>
            <remarks>
            This should be invoked as soon as possible after <see cref="M:osu.Game.Screens.Edit.IEditorChangeHandler.BeginChange"/> to cause a state change.
            </remarks>
        </member>
        <member name="T:osu.Game.Screens.Edit.LegacyEditorBeatmapPatcher">
            <summary>
            Patches an <see cref="T:osu.Game.Screens.Edit.EditorBeatmap"/> based on the difference between two legacy (.osu) states.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.DisallowExternalBeatmapRulesetChanges">
            <summary>
            Whether the beatmap or ruleset should be allowed to be changed by the user or game.
            Used to mark exclusive areas where this is strongly prohibited, like gameplay.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.AllowBackButton">
            <summary>
            Whether the user can exit this this <see cref="T:osu.Game.Screens.IOsuScreen"/> by pressing the back button.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.AllowExternalScreenChange">
            <summary>
            Whether a top-level component should be allowed to exit the current screen to, for example,
            complete an import. Note that this can be overridden by a user if they specifically request.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.CursorVisible">
            <summary>
            Whether this <see cref="T:osu.Game.Screens.OsuScreen"/> allows the cursor to be displayed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.HideOverlaysOnEnter">
            <summary>
            Whether all overlays should be hidden when this screen is entered or resumed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.InitialOverlayActivationMode">
            <summary>
            Whether overlays should be able to be opened once this screen is entered or resumed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.BackgroundParallaxAmount">
            <summary>
            The amount of parallax to be applied while this screen is displayed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.IOsuScreen.AllowRateAdjustments">
            <summary>
            Whether mod rate adjustments are allowed to be applied.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Loader.ShaderPrecompiler">
            <summary>
            Compiles a set of shaders before continuing. Attempts to draw some frames between compilation by limiting to one compile per draw frame.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Menu.Button">
            <summary>
            Button designed specifically for the osu!next main menu.
            In order to correctly flow, we have to use a negative margin on the parent container (due to the parallelogram shape).
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.Button.VisibleState">
            <summary>
            The menu state for which we are visible for.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Menu.ButtonSystem.SetOsuLogo(osu.Game.Screens.Menu.OsuLogo)">
            <summary>
            Assign the <see cref="T:osu.Game.Screens.Menu.OsuLogo"/> that this ButtonSystem should manage the position of.
            </summary>
            <param name="logo">The instance of the logo to be assigned. If null, we are suspending from the screen that uses this ButtonSystem.</param>
        </member>
        <member name="T:osu.Game.Screens.Menu.FlowContainerWithOrigin">
            <summary>
            A flow container with an origin based on one of its contained drawables.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.FlowContainerWithOrigin.CentreTarget">
            <summary>
            A target drawable which this flowcontainer should be centered around.
            This target should be a direct child of this FlowContainer.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Menu.IntroScreen.DidLoadMenu">
            <summary>
            Whether we have loaded the menu previously.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Menu.IntroScreen.BeatmapHash">
            <summary>
            A hash used to find the associated beatmap if already imported.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Menu.IntroScreen.BeatmapFile">
            <summary>
            A source file to use as an import source if the intro beatmap is not yet present.
            Should be within the "Tracks" namespace of game resources.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Menu.IntroTriangles.TrianglesIntroSequence.GlitchingTriangles.OutlineTriangle">
            <summary>
            Represents a sprite that is drawn in a triangle shape, instead of a rectangle shape.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.index_change">
            <summary>
            The number of bars to jump each update iteration.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.bar_length">
            <summary>
            The maximum length of each bar in the visualiser. Will be reduced when kiai is not activated.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.bars_per_visualiser">
            <summary>
            The number of bars in one rotation of the visualiser.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.visualiser_rounds">
            <summary>
            How many times we should stretch around the circumference (overlapping overselves).
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.decay_per_milisecond">
            <summary>
            How much should each bar go down each millisecond (based on a full bar).
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.time_between_updates">
            <summary>
            Number of milliseconds between each amplitude update.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.LogoVisualisation.amplitude_dead_zone">
            <summary>
            The minimum amplitude to show a bar.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Menu.OsuLogo">
            <summary>
            osu! logo and its attachments (pulsing, visualiser etc.)
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Menu.OsuLogo.Action">
            <summary>
            Return value decides whether the logo should play its own sample for the click action.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Menu.OsuLogo.SizeForFlow">
            <summary>
            The size of the logo Sprite with respect to the scale of its hover and bounce containers.
            </summary>
            <remarks>Does not account for the scale of this <see cref="T:osu.Game.Screens.Menu.OsuLogo"/></remarks>
        </member>
        <member name="M:osu.Game.Screens.Menu.OsuLogo.AppendAnimatingAction(System.Action,System.Boolean)">
            <summary>
            Schedule a new external animation. Handled queueing and finishing previous animations in a sane way.
            </summary>
            <param name="action">The animation to be performed</param>
            <param name="waitForPrevious">If true, the new animation is delayed until all previous transforms finish. If false, existing transformed are cleared.</param>
        </member>
        <member name="E:osu.Game.Screens.Multi.IRoomManager.RoomsUpdated">
            <summary>
            Invoked when the <see cref="T:osu.Game.Online.Multiplayer.Room"/>s have been updated.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Multi.IRoomManager.Rooms">
            <summary>
            All the active <see cref="T:osu.Game.Online.Multiplayer.Room"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Multi.IRoomManager.CreateRoom(osu.Game.Online.Multiplayer.Room,System.Action{osu.Game.Online.Multiplayer.Room},System.Action{System.String})">
            <summary>
            Creates a new <see cref="T:osu.Game.Online.Multiplayer.Room"/>.
            </summary>
            <param name="room">The <see cref="T:osu.Game.Online.Multiplayer.Room"/> to create.</param>
            <param name="onSuccess">An action to be invoked if the creation succeeds.</param>
            <param name="onError">An action to be invoked if an error occurred.</param>
        </member>
        <member name="M:osu.Game.Screens.Multi.IRoomManager.JoinRoom(osu.Game.Online.Multiplayer.Room,System.Action{osu.Game.Online.Multiplayer.Room},System.Action{System.String})">
            <summary>
            Joins a <see cref="T:osu.Game.Online.Multiplayer.Room"/>.
            </summary>
            <param name="room">The <see cref="T:osu.Game.Online.Multiplayer.Room"/> to join. <see cref="P:osu.Game.Online.Multiplayer.Room.RoomID"/> must be populated.</param>
            <param name="onSuccess"></param>
            <param name="onError"></param>
        </member>
        <member name="M:osu.Game.Screens.Multi.IRoomManager.PartRoom">
            <summary>
            Parts the currently-joined <see cref="T:osu.Game.Online.Multiplayer.Room"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Multi.Lounge.LoungeSubScreen.Open(osu.Game.Online.Multiplayer.Room)">
            <summary>
            Push a room as a new subscreen.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Multi.Multiplayer.Start(System.Func{osu.Game.Screens.Play.Player})">
            <summary>
            Push a <see cref="T:osu.Game.Screens.Play.Player"/> to the main screen stack to begin gameplay.
            Generally called from a <see cref="T:osu.Game.Screens.Multi.Match.MatchSubScreen"/> via DI resolution.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Multi.RoomManager.onListingReceived(System.Collections.Generic.List{osu.Game.Online.Multiplayer.Room})">
            <summary>
            Invoked when the listing of all <see cref="T:osu.Game.Online.Multiplayer.Room"/>s is received from the server.
            </summary>
            <param name="listing">The listing.</param>
        </member>
        <member name="M:osu.Game.Screens.Multi.RoomManager.onSelectedRoomReceived(osu.Game.Online.Multiplayer.Room)">
            <summary>
            Invoked when a <see cref="T:osu.Game.Online.Multiplayer.Room"/> is received from the server.
            </summary>
            <param name="toUpdate">The received <see cref="T:osu.Game.Online.Multiplayer.Room"/>.</param>
        </member>
        <member name="M:osu.Game.Screens.Multi.RoomManager.update(osu.Game.Online.Multiplayer.Room,osu.Game.Online.Multiplayer.Room)">
            <summary>
            Updates a local <see cref="T:osu.Game.Online.Multiplayer.Room"/> with a remote copy.
            </summary>
            <param name="local">The local <see cref="T:osu.Game.Online.Multiplayer.Room"/> to update.</param>
            <param name="remote">The remote <see cref="T:osu.Game.Online.Multiplayer.Room"/> to update with.</param>
        </member>
        <member name="M:osu.Game.Screens.Multi.RoomManager.addRoom(osu.Game.Online.Multiplayer.Room)">
            <summary>
            Adds a <see cref="T:osu.Game.Online.Multiplayer.Room"/> to the list of available rooms.
            </summary>
            <param name="room">The <see cref="T:osu.Game.Online.Multiplayer.Room"/> to add.</param>
        </member>
        <member name="F:osu.Game.Screens.OsuScreen.HORIZONTAL_OVERFLOW_PADDING">
            <summary>
            The amount of negative padding that should be applied to game background content which touches both the left and right sides of the screen.
            This allows for the game content to be pushed by the options/notification overlays without causing black areas to appear.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.OsuScreen.Title">
            <summary>
            A user-facing title for this screen.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.OsuScreen.HideOverlaysOnEnter">
            <summary>
            Whether all overlays should be hidden when this screen is entered or resumed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.OsuScreen.InitialOverlayActivationMode">
            <summary>
            Whether overlays should be able to be opened once this screen is entered or resumed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.OsuScreen.InitialActivity">
            <summary>
            The <see cref="T:osu.Game.Users.UserActivity"/> to set the user's activity automatically to when this screen is entered
            <para>This <see cref="P:osu.Game.Screens.OsuScreen.Activity"/> will be automatically set to <see cref="P:osu.Game.Screens.OsuScreen.InitialActivity"/> for this screen on entering unless
            <see cref="P:osu.Game.Screens.OsuScreen.Activity"/> is manually set before.</para>
            </summary>
        </member>
        <member name="P:osu.Game.Screens.OsuScreen.Activity">
            <summary>
            The current <see cref="T:osu.Game.Users.UserActivity"/> for this screen.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.OsuScreen.DisallowExternalBeatmapRulesetChanges">
            <summary>
            Whether to disallow changes to game-wise Beatmap/Ruleset bindables for this screen (and all children).
            </summary>
        </member>
        <member name="M:osu.Game.Screens.OsuScreen.LogoArriving(osu.Game.Screens.Menu.OsuLogo,System.Boolean)">
            <summary>
            Fired when this screen was entered or resumed and the logo state is required to be adjusted.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.OsuScreen.ApplyLogoArrivingDefaults(osu.Game.Screens.Menu.OsuLogo)">
            <summary>
            Applies default animations to an arriving logo.
            Todo: This should not exist.
            </summary>
            <param name="logo">The logo to apply animations to.</param>
        </member>
        <member name="M:osu.Game.Screens.OsuScreen.LogoExiting(osu.Game.Screens.Menu.OsuLogo)">
            <summary>
            Fired when this screen was exited to add any outwards transition to the logo.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.OsuScreen.LogoSuspending(osu.Game.Screens.Menu.OsuLogo)">
            <summary>
            Fired when this screen was suspended to add any outwards transition to the logo.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.OsuScreen.CreateBackground">
            <summary>
            Override to create a BackgroundMode for the current screen.
            Note that the instance created may not be the used instance if it matches the BackgroundMode equality clause.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.BeatmapMetadataDisplay">
            <summary>
            Displays beatmap metadata inside <see cref="T:osu.Game.Screens.Play.PlayerLoader"/>
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.BreakOverlay.BREAK_FADE_DURATION">
            <summary>
            The duration of the break overlay fading.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.BreakTracker.IsBreakTime">
            <summary>
            Whether the gameplay is currently in a break.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.DimmableStoryboard">
            <summary>
            A container that handles <see cref="T:osu.Game.Storyboards.Storyboard"/> loading, as well as applies user-specified visual settings to it.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.FailAnimation">
            <summary>
            Manage the animation to be applied when a player fails.
            Single file; automatically disposed after use.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.FailAnimation.Start">
            <summary>
            Start the fail animation playing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if started more than once.</exception>
        </member>
        <member name="T:osu.Game.Screens.Play.GameplayClock">
            <summary>
            A clock which is used for gameplay elements that need to follow audio time 1:1.
            Exposed via DI by <see cref="T:osu.Game.Screens.Play.GameplayClockContainer"/>.
            <remarks>
            The main purpose of this clock is to stop components using it from accidentally processing the main
            <see cref="T:osu.Framework.Timing.IFrameBasedClock"/>, as this should only be done once to ensure accuracy.
            </remarks>
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.GameplayClockContainer">
            <summary>
            Encapsulates gameplay timing logic and provides a <see cref="T:osu.Game.Screens.Play.GameplayClock"/> for children.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.GameplayClockContainer.track">
            <summary>
            The <see cref="T:osu.Game.Beatmaps.WorkingBeatmap"/>'s track.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.GameplayClockContainer.adjustableClock">
            <summary>
            The decoupled clock used for gameplay. Should be used for seeks and clock control.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.GameplayClockContainer.GameplayClock">
            <summary>
            The final clock which is exposed to underlying components.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.GameplayClockContainer.MINIMUM_SKIP_TIME">
            <summary>
            Duration before gameplay start time required before skip button displays.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.GameplayClockContainer.Skip">
            <summary>
            Skip forward to the next valid skip point.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.GameplayClockContainer.Seek(System.Double)">
            <summary>
            Seek to a specific time in gameplay.
            <remarks>
            Adjusts for any offsets which have been applied (so the seek may not be the expected point in time on the underlying audio track).
            </remarks>
            </summary>
            <param name="time">The destination time to seek to.</param>
        </member>
        <member name="M:osu.Game.Screens.Play.GameplayClockContainer.StopUsingBeatmapClock">
            <summary>
            Changes the backing clock to avoid using the originally provided beatmap's track.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.GameplayMenuOverlay.BackAction">
            <summary>
            Action that is invoked when <see cref="F:osu.Game.Input.Bindings.GlobalAction.Back"/> is triggered.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.GameplayMenuOverlay.SelectAction">
            <summary>
            Action that is invoked when <see cref="F:osu.Game.Input.Bindings.GlobalAction.Select"/> is triggered.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.HUDOverlay.ShowHud">
            <summary>
            Whether the elements that can optionally be hidden should be visible.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.HUD.ComboCounter.RollingDuration">
            <summary>
            Duration in milliseconds for the counter roll-up animation for each element.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.HUD.ComboCounter.RollingEasing">
            <summary>
            Easing for the counter rollover animation.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.HUD.ComboCounter.#ctor">
            <summary>
            Base of all combo counters.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.HUD.ComboCounter.DisplayedCount">
            <summary>
            Value shown at the current moment.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.HUD.ComboCounter.Increment(System.Int32)">
            <summary>
            Increments the combo by an amount.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:osu.Game.Screens.Play.HUD.ComboCounter.StopRolling">
            <summary>
            Stops rollover animation, forcing the displayed count to be the actual count.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.HUD.ComboResultCounter">
            <summary>
            Used to display combo with a roll-up animation in results screen.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.HUD.FailingLayer">
            <summary>
            An overlay layer on top of the playfield which fades to red when the current player health falls below a certain threshold defined by <see cref="F:osu.Game.Screens.Play.HUD.FailingLayer.LowHealthThreshold"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.FailingLayer.LowHealthThreshold">
            <summary>
            The threshold under which the current player life should be considered low and the layer should start fading in.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.HUD.HealthDisplay">
            <summary>
            A container for components displaying the current player health.
            Gets bound automatically to the <see cref="T:osu.Game.Rulesets.Scoring.HealthProcessor"/> when inserted to <see cref="P:osu.Game.Rulesets.UI.DrawableRuleset.Overlays"/> hierarchy.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.HUD.HealthDisplay.BindHealthProcessor(osu.Game.Rulesets.Scoring.HealthProcessor)">
            <summary>
            Bind the tracked fields of <see cref="T:osu.Game.Rulesets.Scoring.HealthProcessor"/> to this health display.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.ExpansionMode.ExpandOnHover">
            <summary>
            The <see cref="T:osu.Game.Screens.Play.HUD.ModDisplay"/> will expand only when hovered.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.ExpansionMode.AlwaysExpanded">
            <summary>
            The <see cref="T:osu.Game.Screens.Play.HUD.ModDisplay"/> will always be expanded.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.ExpansionMode.AlwaysContracted">
            <summary>
            The <see cref="T:osu.Game.Screens.Play.HUD.ModDisplay"/> will always be contracted.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.HUD.StandardComboCounter">
            <summary>
            Uses the 'x' symbol and has a pop-out effect while rolling over.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.base_glow_opacity">
            <summary>
            The base opacity of the glow.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.glow_max_hits">
            <summary>
            The number of sequential hits required within <see cref="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.glow_fade_delay"/> to reach the maximum glow opacity.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.glow_fade_delay">
            <summary>
            The amount of time to delay before fading the glow opacity back to <see cref="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.base_glow_opacity"/>.
            <para>
            This is calculated to require a stream snapped to 1/4 at 150bpm to reach the maximum glow opacity with <see cref="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.glow_max_hits"/> hits.
            </para>
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.glow_fade_time">
            <summary>
            The amount of time to fade the glow to <see cref="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.base_glow_opacity"/> after <see cref="F:osu.Game.Screens.Play.HUD.StandardHealthDisplay.glow_fade_delay"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.KeyCounterDisplay.AlwaysVisible">
            <summary>
            Whether the key counter should be visible regardless of the configuration value.
            This is true by default, but can be changed.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.Player.RESULTS_DISPLAY_DELAY">
            <summary>
            The delay upon completion of the beatmap before displaying the results screen.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.Player.PauseOnFocusLost">
            <summary>
            Whether gameplay should pause when the game window focus is lost.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.Player.CheckModsAllowFailure">
            <summary>
            Whether failing should be allowed.
            By default, this checks whether all selected mods allow failing.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.Player.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create a new player instance.
            </summary>
            <param name="allowPause">Whether pausing should be allowed. If not allowed, attempting to pause will quit.</param>
            <param name="showResults">Whether results screen should be pushed on completion.</param>
        </member>
        <member name="M:osu.Game.Screens.Play.Player.PrepareReplay">
            <summary>
            Run any recording / playback setup for replays.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.Player.Restart">
            <summary>
            Restart gameplay via a parent <see cref="T:osu.Game.Screens.Play.PlayerLoader"/>.
            <remarks>This can be called from a child screen in order to trigger the restart process.</remarks>
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Play.Player.pause_cooldown">
            <summary>
            The amount of gameplay time after which a second pause is allowed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.PlayerSettings.PlayerSettingsGroup.Title">
            <summary>
            The title to be displayed in the header of this group.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Play.ResumeOverlay">
            <summary>
            An overlay which can be used to require further user actions before gameplay is resumed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Play.ResumeOverlay.ResumeAction">
            <summary>
            The action to be performed to complete resuming.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.SkipOverlay.#ctor(System.Double)">
            <summary>
            Displays a skip overlay, giving the user the ability to skip forward.
            </summary>
            <param name="startTime">The time at which gameplay begins to appear.</param>
        </member>
        <member name="F:osu.Game.Screens.Play.SongProgress.AllowSeeking">
            <summary>
            Whether seeking is allowed and the progress bar should be shown.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.SquareGraph.RecreateGraph">
            <summary>
            Recreates the entire graph.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.SquareGraph.redrawProgress">
            <summary>
            Redraws all the columns to match their lit/dimmed state.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.SquareGraph.redrawFilled">
            <summary>
            Redraws the filled amount of all the columns.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Play.SquareGraph.recalculateValues">
            <summary>
            Takes <see cref="P:osu.Game.Screens.Play.SquareGraph.Values"/> and adjusts it to fit the amount of columns.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle">
            <summary>
            The component that displays the player's accuracy on the results screen.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.APPEAR_DURATION">
            <summary>
            Duration for the transforms causing this component to appear.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.ACCURACY_TRANSFORM_DELAY">
            <summary>
            Delay before the accuracy circle starts filling.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.ACCURACY_TRANSFORM_DURATION">
            <summary>
            Duration for the accuracy circle fill.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.TEXT_APPEAR_DELAY">
            <summary>
            Delay after <see cref="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.ACCURACY_TRANSFORM_DURATION"/> for the rank text (A/B/C/D/S/SS) to appear.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.RANK_CIRCLE_TRANSFORM_DELAY">
            <summary>
            Delay before the rank circles start filling.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.RANK_CIRCLE_TRANSFORM_DURATION">
            <summary>
            Duration for the rank circle fills.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.RANK_CIRCLE_RADIUS">
            <summary>
            Relative width of the rank circles.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.accuracy_circle_radius">
            <summary>
            Relative width of the circle showing the accuracy.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.virtual_ss_percentage">
            <summary>
            SS is displayed as a 1% region, otherwise it would be invisible.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle.ACCURACY_TRANSFORM_EASING">
            <summary>
            The easing for the circle filling transforms.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge">
            <summary>
            Contains a <see cref="T:osu.Game.Online.Leaderboards.DrawableRank"/> that is positioned around the <see cref="T:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge.Accuracy">
            <summary>
            The accuracy value corresponding to the <see cref="T:osu.Game.Scoring.ScoreRank"/> displayed by this badge.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge.#ctor(System.Single,osu.Game.Scoring.ScoreRank)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge"/>.
            </summary>
            <param name="accuracy">The accuracy value corresponding to <paramref name="rank"/>.</param>
            <param name="rank">The <see cref="T:osu.Game.Scoring.ScoreRank"/> to be displayed in this <see cref="T:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge"/>.</param>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge.Appear">
            <summary>
            Shows this <see cref="T:osu.Game.Screens.Ranking.Expanded.Accuracy.RankBadge"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Accuracy.RankNotch">
            <summary>
            A solid "notch" of the <see cref="T:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle"/> that appears at the ends of the rank circles to add separation.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Accuracy.RankText">
            <summary>
            The text that appears in the middle of the <see cref="T:osu.Game.Screens.Ranking.Expanded.Accuracy.AccuracyCircle"/> displaying the user's rank.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Accuracy.SmoothCircularProgress">
            <summary>
            Contains a <see cref="T:osu.Framework.Graphics.UserInterface.CircularProgress"/> with smoothened edges.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.ExpandedPanelMiddleContent">
            <summary>
            The content that appears in the middle section of the <see cref="T:osu.Game.Screens.Ranking.ScorePanel"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.ExpandedPanelMiddleContent.#ctor(osu.Game.Scoring.ScoreInfo)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.ExpandedPanelMiddleContent"/>.
            </summary>
            <param name="score">The score to display.</param>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.ExpandedPanelTopContent">
            <summary>
            The content that appears in the middle section of the <see cref="T:osu.Game.Screens.Ranking.ScorePanel"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.ExpandedPanelTopContent.#ctor(osu.Game.Users.User)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.ExpandedPanelTopContent"/>.
            </summary>
            <param name="user">The <see cref="T:osu.Game.Users.User"/> to display.</param>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.StarRatingDisplay">
            <summary>
            A pill that displays the star rating of a <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.StarRatingDisplay.#ctor(osu.Game.Beatmaps.BeatmapInfo)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.StarRatingDisplay"/>.
            </summary>
            <param name="beatmap">The <see cref="T:osu.Game.Beatmaps.BeatmapInfo"/> to display the star difficulty of.</param>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Statistics.AccuracyStatistic">
            <summary>
            A <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay"/> to display the player's accuracy.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Statistics.AccuracyStatistic.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.AccuracyStatistic"/>.
            </summary>
            <param name="accuracy">The accuracy to display.</param>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Statistics.ComboStatistic">
            <summary>
            A <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay"/> to display the player's combo.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Statistics.ComboStatistic.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.ComboStatistic"/>.
            </summary>
            <param name="combo">The combo to be displayed.</param>
            <param name="isPerfect">Whether this is a perfect combo.</param>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Statistics.CounterStatistic">
            <summary>
            A <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay"/> to display general numeric values.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Statistics.CounterStatistic.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.CounterStatistic"/>.
            </summary>
            <param name="header">The name of the statistic.</param>
            <param name="count">The value to display.</param>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay">
            <summary>
            A statistic from the score to be displayed in the <see cref="T:osu.Game.Screens.Ranking.Expanded.ExpandedPanelMiddleContent"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay"/>.
            </summary>
            <param name="header">The name of the statistic.</param>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay.Appear">
            <summary>
            Shows the statistic value.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay.CreateContent">
            <summary>
            Creates the content for this <see cref="T:osu.Game.Screens.Ranking.Expanded.Statistics.StatisticDisplay"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Ranking.Expanded.TotalScoreCounter">
            <summary>
            A counter for the player's total score to be displayed in the <see cref="T:osu.Game.Screens.Ranking.Expanded.ExpandedPanelMiddleContent"/>.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.contracted_width">
            <summary>
            Width of the panel when contracted.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.contracted_height">
            <summary>
            Height of the panel when contracted.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.EXPANDED_WIDTH">
            <summary>
            Width of the panel when expanded.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.expanded_height">
            <summary>
            Height of the panel when expanded.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.expanded_top_layer_height">
            <summary>
            Height of the top layer when the panel is expanded.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.contracted_top_layer_height">
            <summary>
            Height of the top layer when the panel is contracted.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.resize_duration">
            <summary>
            Duration for the panel to resize into its expanded/contracted size.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.top_layer_expand_delay">
            <summary>
            Delay after <see cref="F:osu.Game.Screens.Ranking.ScorePanel.resize_duration"/> before the top layer is expanded.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.top_layer_expand_duration">
            <summary>
            Duration for the top layer expansion.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Ranking.ScorePanel.content_fade_duration">
            <summary>
            Duration for the panel contents to fade in.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.BleedTop">
            <summary>
            Height of the area above the carousel that should be treated as visible due to transparency of elements in front of it.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.BleedBottom">
            <summary>
            Height of the area below the carousel that should be treated as visible due to transparency of elements in front of it.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.BeatmapCarousel.BeatmapSetsChanged">
            <summary>
            Triggered when the <see cref="P:osu.Game.Screens.Select.BeatmapCarousel.BeatmapSets"/> loaded change and are completely loaded.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.SelectedBeatmap">
            <summary>
            The currently selected beatmap.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.SelectedBeatmapSet">
            <summary>
            The currently selected beatmap set.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.BeatmapCarousel.GetRecommendedBeatmap">
            <summary>
            A function to optionally decide on a recommended difficulty from a beatmap set.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.BeatmapCarousel.SelectionChanged">
            <summary>
            Raised when the <see cref="P:osu.Game.Screens.Select.BeatmapCarousel.SelectedBeatmap"/> is changed.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.BeatmapSetsLoaded">
            <summary>
            Whether carousel items have completed asynchronously loaded.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.SelectBeatmap(osu.Game.Beatmaps.BeatmapInfo,System.Boolean)">
            <summary>
            Selects a given beatmap on the carousel.
            </summary>
            <param name="beatmap">The beatmap to select.</param>
            <param name="bypassFilters">Whether to select the beatmap even if it is filtered (i.e., not visible on carousel).</param>
            <returns>True if a selection was made, False if it wasn't.</returns>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.SelectNext(System.Int32,System.Boolean)">
            <summary>
            Increment selection in the carousel in a chosen direction.
            </summary>
            <param name="direction">The direction to increment. Negative is backwards.</param>
            <param name="skipDifficulties">Whether to skip individual difficulties and only increment over full groups.</param>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.SelectNextRandom">
            <summary>
            Select the next beatmap in the random sequence.
            </summary>
            <returns>True if a selection could be made, else False.</returns>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.visibleHalfHeight">
            <summary>
            Half the height of the visible content.
            <remarks>
            This is different from the height of <see cref="T:osu.Framework.Graphics.Containers.ScrollContainer`1"/>.displayableContent, since
            the beatmap carousel bleeds into the <see cref="T:osu.Game.Screens.Select.FilterControl"/> and the <see cref="T:osu.Game.Screens.Select.Footer"/>
            </remarks>
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.visibleBottomBound">
            <summary>
            The position of the lower visible bound with respect to the current scroll position.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.visibleUpperBound">
            <summary>
            The position of the upper visible bound with respect to the current scroll position.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.ScrollToSelected">
            <summary>
            Scroll to the current <see cref="P:osu.Game.Screens.Select.BeatmapCarousel.SelectedBeatmap"/>.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.updateItems">
            <summary>
            Computes the target Y positions for every item in the carousel.
            </summary>
            <returns>The Y position of the currently selected item.</returns>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.offsetX(System.Single,System.Single)">
            <summary>
            Computes the x-offset of currently visible items. Makes the carousel appear round.
            </summary>
            <param name="dist">
            Vertical distance from the center of the carousel container
            ranging from -1 to 1.
            </param>
            <param name="halfHeight">Half the height of the carousel container.</param>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapCarousel.updateItem(osu.Game.Screens.Select.Carousel.DrawableCarouselItem)">
            <summary>
            Update a item's x position and multiplicative alpha based on its y position and
            the current scroll position.
            </summary>
            <param name="p">The item to be updated.</param>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapCarousel.CarouselScrollContainer.UserScrolling">
            <summary>
            Whether the last scroll event was user triggered, directly on the scroll container.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapDetailArea.Refresh">
            <summary>
            Refreshes the currently-displayed details.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapDetailArea.OnTabChanged(osu.Game.Screens.Select.BeatmapDetailAreaTabItem,System.Boolean)">
            <summary>
            Invoked when a new tab is selected.
            </summary>
            <param name="tab">The tab that was selected.</param>
            <param name="selectedMods">Whether the currently-selected mods should be considered.</param>
        </member>
        <member name="M:osu.Game.Screens.Select.BeatmapDetailArea.CreateTabItems">
            <summary>
            Creates the tabs to be displayed.
            </summary>
            <returns>The tabs.</returns>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapDetailAreaTabItem.Name">
            <summary>
            The name of this tab, to be displayed in the tab control.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.BeatmapDetailAreaTabItem.FilterableByMods">
            <summary>
            Whether the contents of this tab can be filtered by the user's currently-selected mods.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.Carousel.CarouselBeatmapSet.ValidBeatmaps">
            <summary>
            All beatmaps which are not filtered and valid for display.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Select.Carousel.CarouselGroup">
            <summary>
            A group which ensures only one child is selected.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.Carousel.CarouselGroup.currentChildID">
            <summary>
            Used to assign a monotonically increasing ID to children as they are added. This member is
            incremented whenever a child is added.
            </summary>
        </member>
        <member name="T:osu.Game.Screens.Select.Carousel.CarouselGroupEagerSelect">
            <summary>
            A group which ensures at least one child is selected (if the group itself is selected).
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.Carousel.CarouselGroupEagerSelect.LastSelected">
            <summary>
            The last selected item.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.Carousel.CarouselGroupEagerSelect.lastSelectedIndex">
            <summary>
            We need to keep track of the index for cases where the selection is removed but we want to select a new item based on its old location.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.Carousel.CarouselGroupEagerSelect.filteringChildren">
            <summary>
            To avoid overhead during filter operations, we don't attempt any selections until after all
            children have been filtered. This bool will be true during the base <see cref="M:osu.Game.Screens.Select.Carousel.CarouselGroupEagerSelect.Filter(osu.Game.Screens.Select.FilterCriteria)"/>
            operation.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.Carousel.CarouselItem.Visible">
            <summary>
            This item is not in a hidden state.
            </summary>
        </member>
        <member name="F:osu.Game.Screens.Select.Carousel.CarouselItem.ChildID">
            <summary>
            Used as a default sort method for <see cref="T:osu.Game.Screens.Select.Carousel.CarouselItem"/>s of differing types.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.Carousel.CarouselItem.CreateDrawableRepresentation">
            <summary>
            Create a fresh drawable version of this item. If you wish to consume the current representation, use <see cref="F:osu.Game.Screens.Select.Carousel.CarouselItem.DrawableRepresentation"/> instead.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.DifficultyRecommender.GetRecommendedBeatmap(System.Collections.Generic.IEnumerable{osu.Game.Beatmaps.BeatmapInfo})">
            <summary>
            Find the recommended difficulty from a selection of available difficulties for the current local user.
            </summary>
            <remarks>
            This requires the user to be online for now.
            </remarks>
            <param name="beatmaps">A collection of beatmaps to select a difficulty from.</param>
            <returns>The recommended difficulty, or null if a recommendation could not be provided.</returns>
        </member>
        <member name="M:osu.Game.Screens.Select.Footer.AddButton(osu.Game.Screens.Select.FooterButton,osu.Framework.Graphics.Containers.OverlayContainer)">
            <param name="button">THe button to be added.</param>
            <param name="overlay">The <see cref="T:osu.Framework.Graphics.Containers.OverlayContainer"/> to be toggled by this button.</param>
        </member>
        <member name="M:osu.Game.Screens.Select.Footer.AddButton(osu.Game.Screens.Select.FooterButton)">
            <param name="button">Button to be added.</param>
        </member>
        <member name="P:osu.Game.Screens.Select.Leaderboards.BeatmapLeaderboard.FilterMods">
            <summary>
            Whether to apply the game's currently selected mods as a filter when retrieving scores.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.Options.BeatmapOptionsOverlay.AddButton(System.String,System.String,osu.Framework.Graphics.Sprites.IconUsage,osuTK.Graphics.Color4,System.Action,System.Nullable{osuTK.Input.Key})">
            <param name="firstLine">Text in the first line.</param>
            <param name="secondLine">Text in the second line.</param>
            <param name="colour">Colour of the button.</param>
            <param name="icon">Icon of the button.</param>
            <param name="hotkey">Hotkey of the button.</param>
            <param name="action">Binding the button does.</param>
        </member>
        <member name="P:osu.Game.Screens.Select.SongSelect.BeatmapOptions">
            <summary>
            Can be null if <see cref="P:osu.Game.Screens.Select.SongSelect.ShowFooter"/> is false.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.SongSelect.Footer">
            <summary>
            Can be null if <see cref="P:osu.Game.Screens.Select.SongSelect.ShowFooter"/> is false.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.SongSelect.FooterPanels">
            <summary>
            Contains any panel which is triggered by a footer button.
            Helps keep them located beneath the footer itself.
            </summary>
        </member>
        <member name="P:osu.Game.Screens.Select.SongSelect.AllowEditing">
            <summary>
            Whether entering editor mode should be allowed.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.CreateBeatmapDetailArea">
            <summary>
            Creates the beatmap details to be displayed underneath the wedge.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.FinaliseSelection(osu.Game.Beatmaps.BeatmapInfo,osu.Game.Rulesets.RulesetInfo,System.Action)">
            <summary>
            Call to make a selection and perform the default action for this SongSelect.
            </summary>
            <param name="beatmap">An optional beatmap to override the current carousel selection.</param>
            <param name="ruleset">An optional ruleset to override the current carousel selection.</param>
            <param name="customStartAction">An optional custom action to perform instead of <see cref="M:osu.Game.Screens.Select.SongSelect.OnStart"/>.</param>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.OnStart">
            <summary>
            Called when a selection is made.
            </summary>
            <returns>If a resultant action occurred that takes the user away from SongSelect.</returns>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.performUpdateSelected">
            <summary>
            Selection has been changed as the result of a user interaction.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.updateComponentFromBeatmap(osu.Game.Beatmaps.WorkingBeatmap)">
            <summary>
            Allow components in SongSelect to update their loaded beatmap details.
            This is a debounced call (unlike directly binding to WorkingBeatmap.ValueChanged).
            </summary>
            <param name="beatmap">The working beatmap.</param>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.ensurePlayingSelected">
            <summary>
            Ensures some music is playing for the current track.
            Will resume playback from a manual user pause if the track has changed.
            </summary>
        </member>
        <member name="M:osu.Game.Screens.Select.SongSelect.transferRulesetValue">
            <summary>
            Transfer the game-wide ruleset to the local decoupled ruleset.
            Will immediately run filter operations if required.
            </summary>
            <returns>Whether a transfer occurred.</returns>
        </member>
        <member name="T:osu.Game.Screens.StartupScreen">
            <summary>
            A screen which is shown once as part of the startup procedure.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.BeatmapSkinProvidingContainer">
            <summary>
            A container which overrides existing skin options with beatmap-local values.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.DefaultSkinConfiguration">
            <summary>
            A skin configuration pre-populated with sane defaults.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.IAnimationTimeReference">
            <summary>
            Denotes an object which provides a reference time to start animations from.
            </summary>
            <remarks>
            This should not be used to start an animation immediately at the current time.
            To do so, use <see cref="M:osu.Game.Skinning.LegacySkinExtensions.GetAnimation(osu.Game.Skinning.ISkin,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Nullable{System.Double})"/> with <code>startAtCurrentTime = true</code> instead.
            </remarks>
        </member>
        <member name="P:osu.Game.Skinning.IAnimationTimeReference.Clock">
            <summary>
            The reference clock.
            </summary>
        </member>
        <member name="P:osu.Game.Skinning.IAnimationTimeReference.AnimationStartTime">
            <summary>
            The time which animations should be started from, relative to <see cref="P:osu.Game.Skinning.IAnimationTimeReference.Clock"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.ISkin">
            <summary>
            Provides access to skinnable elements.
            </summary>
        </member>
        <member name="M:osu.Game.Skinning.ISkin.GetDrawableComponent(osu.Game.Skinning.ISkinComponent)">
            <summary>
            Retrieve a <see cref="T:osu.Framework.Graphics.Drawable"/> component implementation.
            </summary>
            <param name="component">The requested component.</param>
            <returns>A drawable representation for the requested component, or null if unavailable.</returns>
        </member>
        <member name="M:osu.Game.Skinning.ISkin.GetTexture(System.String)">
            <summary>
            Retrieve a <see cref="T:osu.Framework.Graphics.Textures.Texture"/>.
            </summary>
            <param name="componentName">The requested texture.</param>
            <returns>A matching texture, or null if unavailable.</returns>
        </member>
        <member name="M:osu.Game.Skinning.ISkin.GetSample(osu.Game.Audio.ISampleInfo)">
            <summary>
            Retrieve a <see cref="T:osu.Framework.Audio.Sample.SampleChannel"/>.
            </summary>
            <param name="sampleInfo">The requested sample.</param>
            <returns>A matching sample channel, or null if unavailable.</returns>
        </member>
        <member name="M:osu.Game.Skinning.ISkin.GetConfig``2(``0)">
            <summary>
            Retrieve a configuration value.
            </summary>
            <param name="lookup">The requested configuration value.</param>
            <returns>A matching value boxed in an <see cref="T:osu.Framework.Bindables.IBindable`1"/>, or null if unavailable.</returns>
        </member>
        <member name="T:osu.Game.Skinning.ISkinSource">
            <summary>
            Provides access to skinnable elements.
            </summary>
        </member>
        <member name="F:osu.Game.Skinning.LegacyManiaSkinConfiguration.POSITION_SCALE_FACTOR">
            <summary>
            Conversion factor from converting legacy positioning values (based in x480 dimensions) to x768.
            </summary>
        </member>
        <member name="F:osu.Game.Skinning.LegacyManiaSkinConfiguration.DEFAULT_COLUMN_SIZE">
            <summary>
            Size of a legacy column in the default skin, used for determining relative scale factors.
            </summary>
        </member>
        <member name="F:osu.Game.Skinning.LegacySkin.hasKeyTexture">
            <summary>
            Whether texture for the keys exists.
            Used to determine if the mania ruleset is skinned.
            </summary>
        </member>
        <member name="P:osu.Game.Skinning.LegacySkinConfiguration.LegacyVersion">
            <summary>
            Legacy version of this skin.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.SkinConfiguration">
            <summary>
            An empty skin configuration.
            </summary>
        </member>
        <member name="F:osu.Game.Skinning.SkinConfiguration.AllowDefaultComboColoursFallback">
            <summary>
            Whether to allow <see cref="P:osu.Game.Skinning.SkinConfiguration.DefaultComboColours"/> as a fallback list for when no combo colours are provided.
            </summary>
        </member>
        <member name="M:osu.Game.Skinning.SkinManager.GetAllUsableSkins">
            <summary>
            Returns a list of all usable <see cref="T:osu.Game.Skinning.SkinInfo"/>s. Includes the special default skin plus all skins from <see cref="M:osu.Game.Skinning.SkinManager.GetAllUserSkins"/>.
            </summary>
            <returns>A list of available <see cref="T:osu.Game.Skinning.SkinInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Skinning.SkinManager.GetAllUserSkins">
            <summary>
            Returns a list of all usable <see cref="T:osu.Game.Skinning.SkinInfo"/>s that have been loaded by the user.
            </summary>
            <returns>A list of available <see cref="T:osu.Game.Skinning.SkinInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Skinning.SkinManager.GetSkin(osu.Game.Skinning.SkinInfo)">
            <summary>
            Retrieve a <see cref="T:osu.Game.Skinning.Skin"/> instance for the provided <see cref="T:osu.Game.Skinning.SkinInfo"/>
            </summary>
            <param name="skinInfo">The skin to lookup.</param>
            <returns>A <see cref="T:osu.Game.Skinning.Skin"/> instance correlating to the provided <see cref="T:osu.Game.Skinning.SkinInfo"/>.</returns>
        </member>
        <member name="M:osu.Game.Skinning.SkinManager.Query(System.Linq.Expressions.Expression{System.Func{osu.Game.Skinning.SkinInfo,System.Boolean}})">
            <summary>
            Perform a lookup query on available <see cref="T:osu.Game.Skinning.SkinInfo"/>s.
            </summary>
            <param name="query">The query.</param>
            <returns>The first result for the provided query, or null if no results were found.</returns>
        </member>
        <member name="T:osu.Game.Skinning.SkinnableDrawable">
            <summary>
            A drawable which can be skinned via an <see cref="T:osu.Game.Skinning.ISkinSource"/>.
            </summary>
        </member>
        <member name="P:osu.Game.Skinning.SkinnableDrawable.Drawable">
            <summary>
            The displayed component.
            </summary>
        </member>
        <member name="M:osu.Game.Skinning.SkinnableDrawable.#ctor(osu.Game.Skinning.ISkinComponent,System.Func{osu.Game.Skinning.ISkinComponent,osu.Framework.Graphics.Drawable},System.Func{osu.Game.Skinning.ISkinSource,System.Boolean},osu.Game.Skinning.ConfineMode)">
            <summary>
            Create a new skinnable drawable.
            </summary>
            <param name="component">The namespace-complete resource name for this skinnable element.</param>
            <param name="defaultImplementation">A function to create the default skin implementation of this element.</param>
            <param name="allowFallback">A conditional to decide whether to allow fallback to the default implementation if a skinned element is not present.</param>
            <param name="confineMode">How (if at all) the <see cref="P:osu.Game.Skinning.SkinnableDrawable.Drawable"/> should be resize to fit within our own bounds.</param>
        </member>
        <member name="P:osu.Game.Skinning.SkinnableDrawable.ApplySizeRestrictionsToDefault">
            <summary>
            Whether to apply size restrictions (specified via <see cref="F:osu.Game.Skinning.SkinnableDrawable.confineMode"/>) to the default implementation.
            </summary>
        </member>
        <member name="F:osu.Game.Skinning.ConfineMode.NoScaling">
            <summary>
            Don't apply any scaling. This allows the user element to be of any size, exceeding specified bounds.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.SkinnableSprite">
            <summary>
            A skinnable element which uses a stable sprite and can therefore share implementation logic.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.SkinProvidingContainer">
            <summary>
            A container which adds a local <see cref="T:osu.Game.Skinning.ISkinSource"/> to the hierarchy.
            </summary>
        </member>
        <member name="T:osu.Game.Skinning.SkinReloadableDrawable">
            <summary>
            A drawable which has a callback when the skin changes.
            </summary>
        </member>
        <member name="E:osu.Game.Skinning.SkinReloadableDrawable.OnSkinChanged">
            <summary>
            Invoked when <see cref="P:osu.Game.Skinning.SkinReloadableDrawable.CurrentSkin"/> has changed.
            </summary>
        </member>
        <member name="P:osu.Game.Skinning.SkinReloadableDrawable.CurrentSkin">
            <summary>
            The current skin source.
            </summary>
        </member>
        <member name="P:osu.Game.Skinning.SkinReloadableDrawable.allowDefaultFallback">
            <summary>
            Whether fallback to default skin should be allowed if the custom skin is missing this resource.
            </summary>
        </member>
        <member name="M:osu.Game.Skinning.SkinReloadableDrawable.#ctor(System.Func{osu.Game.Skinning.ISkinSource,System.Boolean})">
            <summary>
            Create a new <see cref="T:osu.Game.Skinning.SkinReloadableDrawable"/>
            </summary>
            <param name="allowFallback">A conditional to decide whether to allow fallback to the default implementation if a skinned element is not present.</param>
        </member>
        <member name="M:osu.Game.Skinning.SkinReloadableDrawable.SkinChanged(osu.Game.Skinning.ISkinSource,System.Boolean)">
            <summary>
            Called when a change is made to the skin.
            </summary>
            <param name="skin">The new skin.</param>
            <param name="allowFallback">Whether fallback to default skin should be allowed if the custom skin is missing this resource.</param>
        </member>
        <member name="T:osu.Game.Skinning.SkinUtils">
            <summary>
            Contains helper methods to assist in implementing <see cref="T:osu.Game.Skinning.ISkin"/>s.
            </summary>
        </member>
        <member name="M:osu.Game.Skinning.SkinUtils.As``1(System.Object)">
            <summary>
            Converts an <see cref="T:System.Object"/> to a <see cref="T:osu.Framework.Bindables.Bindable`1"/>. Used for returning configuration values of specific types.
            </summary>
            <param name="value">The value.</param>
            <typeparam name="TValue">The type of value <paramref name="value"/>, and the type of the resulting bindable.</typeparam>
            <returns>The resulting bindable.</returns>
        </member>
        <member name="M:osu.Game.Storyboards.Drawables.DrawablesExtensions.TransformBlendingMode``1(``0,osu.Framework.Graphics.BlendingParameters,System.Double)">
            <summary>
            Adjusts <see cref="P:osu.Framework.Graphics.Drawable.Blending"/> after a delay.
            </summary>
            <returns>A <see cref="T:osu.Framework.Graphics.Transforms.TransformSequence`1"/> to which further transforms can be added.</returns>
        </member>
        <member name="F:osu.Game.Storyboards.Drawables.DrawableStoryboardSample.allowable_late_start">
            <summary>
            The amount of time allowable beyond the start time of the sample, for the sample to start.
            </summary>
        </member>
        <member name="M:osu.Game.Storyboards.Drawables.FlippableExtensions.TransformFlipH``1(``0,System.Boolean,System.Double)">
            <summary>
            Adjusts <see cref="P:osu.Game.Storyboards.Drawables.IFlippable.FlipH"/> after a delay.
            </summary>
            <returns>A <see cref="T:osu.Framework.Graphics.Transforms.TransformSequence`1"/> to which further transforms can be added.</returns>
        </member>
        <member name="M:osu.Game.Storyboards.Drawables.FlippableExtensions.TransformFlipV``1(``0,System.Boolean,System.Double)">
            <summary>
            Adjusts <see cref="P:osu.Game.Storyboards.Drawables.IFlippable.FlipV"/> after a delay.
            </summary>
            <returns>A <see cref="T:osu.Framework.Graphics.Transforms.TransformSequence`1"/> to which further transforms can be added.</returns>
        </member>
        <member name="P:osu.Game.Storyboards.Storyboard.ReplacesBackground">
            <summary>
            Whether the beatmap's background should be hidden while this storyboard is being displayed.
            </summary>
        </member>
        <member name="M:osu.Game.Tests.Beatmaps.BeatmapConversionTest`2.CreateConvertMapping(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Creates the conversion mapping for a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>. A conversion mapping stores important information about the conversion process.
            This is generated _after_ the <see cref="T:osu.Game.Rulesets.Objects.HitObject"/> has been converted.
            <para>
            This should be used to validate the integrity of the conversion process after a conversion has occurred.
            </para>
            </summary>
        </member>
        <member name="M:osu.Game.Tests.Beatmaps.BeatmapConversionTest`2.CreateConvertValue(osu.Game.Rulesets.Objects.HitObject)">
            <summary>
            Creates the conversion value for a <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>. A conversion value stores information about the converted <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            <para>
            This should be used to validate the integrity of the converted <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.
            </para>
            </summary>
            <param name="hitObject">The converted <see cref="T:osu.Game.Rulesets.Objects.HitObject"/>.</param>
        </member>
        <member name="M:osu.Game.Tests.Beatmaps.BeatmapConversionTest`2.CreateRuleset">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Ruleset"/> applicable to this <see cref="T:osu.Game.Tests.Beatmaps.BeatmapConversionTest`2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:osu.Game.Tests.Beatmaps.LegacyModConversionTest">
            <summary>
            Base class for tests of converting <see cref="T:osu.Game.Beatmaps.Legacy.LegacyMods"/> enumeration flags to ruleset mod instances.
            </summary>
        </member>
        <member name="M:osu.Game.Tests.Beatmaps.LegacyModConversionTest.CreateRuleset">
            <summary>
            Creates the <see cref="T:osu.Game.Rulesets.Ruleset"/> whose legacy mod conversion is to be tested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:osu.Game.Tests.Beatmaps.TestWorkingBeatmap.#ctor(osu.Game.Beatmaps.IBeatmap,osu.Game.Storyboards.Storyboard,osu.Framework.Audio.AudioManager)">
            <summary>
            Create an instance which provides the <see cref="T:osu.Game.Beatmaps.IBeatmap"/> when requested.
            </summary>
            <param name="beatmap">The beatmap.</param>
            <param name="storyboard">An optional storyboard.</param>
            <param name="audioManager">The <see cref="T:osu.Framework.Audio.AudioManager"/>.</param>
        </member>
        <member name="T:osu.Game.Tests.CleanRunHeadlessGameHost">
            <summary>
            A headless host which cleans up before running (removing any remnants from a previous execution).
            </summary>
        </member>
        <member name="T:osu.Game.Tests.Visual.EditorClockTestScene">
            <summary>
            Provides a clock, beat-divisor, and scrolling capability for test cases of editor components that
            are preferrably tested within the presence of a clock and seek controls.
            </summary>
        </member>
        <member name="F:osu.Game.Tests.Visual.ModTestScene.ModTestData.Autoplay">
            <summary>
            Whether to use a replay to simulate an auto-play. True by default.
            </summary>
        </member>
        <member name="F:osu.Game.Tests.Visual.ModTestScene.ModTestData.Beatmap">
            <summary>
            The beatmap for this test case.
            </summary>
        </member>
        <member name="F:osu.Game.Tests.Visual.ModTestScene.ModTestData.PassCondition">
            <summary>
            The conditions that cause this test case to pass.
            </summary>
        </member>
        <member name="F:osu.Game.Tests.Visual.ModTestScene.ModTestData.Mod">
            <summary>
            The <see cref="F:osu.Game.Tests.Visual.ModTestScene.ModTestData.Mod"/> this test case tests.
            </summary>
        </member>
        <member name="T:osu.Game.Tests.Visual.OsuGridTestScene">
            <summary>
            An abstract test case which exposes small cells arranged in a grid.
            Useful for displaying multiple configurations of a tested component at a glance.
            </summary>
        </member>
        <member name="F:osu.Game.Tests.Visual.OsuGridTestScene.Rows">
            <summary>
            The amount of rows in the grid.
            </summary>
        </member>
        <member name="F:osu.Game.Tests.Visual.OsuGridTestScene.Cols">
            <summary>
            The amount of columns in the grid.
            </summary>
        </member>
        <member name="M:osu.Game.Tests.Visual.OsuGridTestScene.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a grid test case with the given dimensions.
            </summary>
        </member>
        <member name="P:osu.Game.Tests.Visual.OsuTestScene.UseOnlineAPI">
            <summary>
            Whether this test scene requires real-world API access.
            If true, this will bypass the local <see cref="T:osu.Game.Online.API.DummyAPIAccess"/> and use the <see cref="T:osu.Game.OsuGameBase"/> provided one.
            </summary>
        </member>
        <member name="M:osu.Game.Tests.Visual.OsuTestScene.ClockBackedTestWorkingBeatmap.#ctor(osu.Game.Rulesets.RulesetInfo,osu.Framework.Timing.IFrameBasedClock,osu.Framework.Audio.AudioManager)">
            <summary>
            Create an instance which creates a <see cref="T:osu.Game.Tests.Beatmaps.TestBeatmap"/> for the provided ruleset when requested.
            </summary>
            <param name="ruleset">The target ruleset.</param>
            <param name="referenceClock">A clock which should be used instead of a stopwatch for virtual time progression.</param>
            <param name="audio">Audio manager. Required if a reference clock isn't provided.</param>
        </member>
        <member name="M:osu.Game.Tests.Visual.OsuTestScene.ClockBackedTestWorkingBeatmap.#ctor(osu.Game.Beatmaps.IBeatmap,osu.Game.Storyboards.Storyboard,osu.Framework.Timing.IFrameBasedClock,osu.Framework.Audio.AudioManager,System.Double)">
            <summary>
            Create an instance which provides the <see cref="T:osu.Game.Beatmaps.IBeatmap"/> when requested.
            </summary>
            <param name="beatmap">The beatmap</param>
            <param name="storyboard">The storyboard.</param>
            <param name="referenceClock">An optional clock which should be used instead of a stopwatch for virtual time progression.</param>
            <param name="audio">Audio manager. Required if a reference clock isn't provided.</param>
            <param name="length">The length of the returned virtual track.</param>
        </member>
        <member name="T:osu.Game.Tests.Visual.OsuTestScene.ClockBackedTestWorkingBeatmap.TrackVirtualManual">
            <summary>
            A virtual track which tracks a reference clock.
            </summary>
        </member>
        <member name="P:osu.Game.Tests.Visual.PlayerTestScene.HasCustomSteps">
            <summary>
            Whether custom test steps are provided. Custom tests should invoke <see cref="M:osu.Game.Tests.Visual.PlayerTestScene.CreateTest(System.Action)"/> to create the test steps.
            </summary>
        </member>
        <member name="T:osu.Game.Tests.Visual.RateAdjustedBeatmapTestScene">
            <summary>
            Test case which adjusts the beatmap's rate to match any speed adjustments in visual tests.
            </summary>
        </member>
        <member name="T:osu.Game.Tests.Visual.ScreenTestScene">
            <summary>
            A test case which can be used to test a screen (that relies on OnEntering being called to execute startup instructions).
            </summary>
        </member>
        <member name="T:osu.Game.Tests.Visual.ScrollingTestContainer">
            <summary>
            A container which provides a <see cref="T:osu.Game.Rulesets.UI.Scrolling.IScrollingInfo"/> to children.
            This should only be used when testing
            </summary>
        </member>
        <member name="T:osu.Game.Tests.Visual.TestPlayer">
            <summary>
            A player that exposes many components that would otherwise not be available, for testing purposes.
            </summary>
        </member>
        <member name="P:osu.Game.Tests.Visual.TestPlayer.Mods">
            <summary>
            Mods from *player* (not OsuScreen).
            </summary>
        </member>
        <member name="T:osu.Game.Updater.SimpleUpdateManager">
            <summary>
            An update manager that shows notifications if a newer release is detected.
            Installation is left up to the user.
            </summary>
        </member>
        <member name="T:osu.Game.Updater.UpdateManager">
            <summary>
            An update manager which only shows notifications after an update completes.
            </summary>
        </member>
        <member name="F:osu.Game.Users.Country.FullName">
            <summary>
            The name of this country.
            </summary>
        </member>
        <member name="F:osu.Game.Users.Country.FlagName">
            <summary>
            Two-letter flag acronym (ISO 3166 standard)
            </summary>
        </member>
        <member name="F:osu.Game.Users.Drawables.DrawableAvatar.OpenOnClick">
            <summary>
            Whether to open the user's profile when clicked.
            </summary>
        </member>
        <member name="M:osu.Game.Users.Drawables.DrawableAvatar.#ctor(osu.Game.Users.User)">
            <summary>
            An avatar for specified user.
            </summary>
            <param name="user">The user. A null value will get a placeholder avatar.</param>
        </member>
        <member name="T:osu.Game.Users.Drawables.UpdateableAvatar">
            <summary>
            An avatar which can update to a new user when needed.
            </summary>
        </member>
        <member name="F:osu.Game.Users.Drawables.UpdateableAvatar.ShowGuestOnNull">
            <summary>
            Whether to show a default guest representation on null user (as opposed to nothing).
            </summary>
        </member>
        <member name="F:osu.Game.Users.Drawables.UpdateableAvatar.OpenOnClick">
            <summary>
            Whether to open the user's profile when clicked.
            </summary>
        </member>
        <member name="F:osu.Game.Users.Drawables.UpdateableFlag.ShowPlaceholderOnNull">
            <summary>
            Whether to show a place holder on null country.
            </summary>
        </member>
        <member name="F:osu.Game.Users.User.SYSTEM_USER">
            <summary>
            A user instance for displaying locally created system messages.
            </summary>
        </member>
        <member name="M:osu.Game.Utils.FormatUtils.FormatAccuracy(System.Double)">
            <summary>
            Turns the provided accuracy into a percentage with 2 decimal places.
            </summary>
            <param name="accuracy">The accuracy to be formatted</param>
            <returns>formatted accuracy in percentage</returns>
        </member>
        <member name="M:osu.Game.Utils.FormatUtils.FormatAccuracy(System.Decimal)">
            <summary>
            Turns the provided accuracy into a percentage with 2 decimal places.
            </summary>
            <param name="accuracy">The accuracy to be formatted</param>
            <returns>formatted accuracy in percentage</returns>
        </member>
        <member name="M:osu.Game.Utils.HumanizerUtils.Humanize(System.DateTimeOffset)">
            <summary>
            Turns the current or provided date into a human readable sentence
            </summary>
            <param name="input">The date to be humanized</param>
            <returns>distance of time in words</returns>
        </member>
        <member name="M:osu.Game.Utils.OrderAttributeUtils.GetValuesInOrder``1">
            <summary>
            Get values of an enum in order. Supports custom ordering via <see cref="T:osu.Game.Utils.OrderAttribute"/>.
            </summary>
        </member>
        <member name="T:osu.Game.Utils.PeriodTracker">
            <summary>
            Represents a tracking component used for whether a specific time instant falls into any of the provided periods.
            </summary>
        </member>
        <member name="M:osu.Game.Utils.PeriodTracker.IsInAny(System.Double)">
            <summary>
            Whether the provided time is in any of the added periods.
            </summary>
            <param name="time">The time value to check.</param>
        </member>
        <member name="F:osu.Game.Utils.Period.Start">
            <summary>
            The start time of this period.
            </summary>
        </member>
        <member name="F:osu.Game.Utils.Period.End">
            <summary>
            The end time of this period.
            </summary>
        </member>
        <member name="T:osu.Game.Utils.SentryLogger">
            <summary>
            Report errors to sentry.
            </summary>
        </member>
    </members>
</doc>
